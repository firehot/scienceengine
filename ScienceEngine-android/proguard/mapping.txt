com.android.vending.billing.IInAppBillingService -> com.a.a.a.a:
    int isBillingSupported(int,java.lang.String,java.lang.String) -> a
    android.os.Bundle getSkuDetails(int,java.lang.String,java.lang.String,android.os.Bundle) -> a
    android.os.Bundle getBuyIntent(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    android.os.Bundle getPurchases(int,java.lang.String,java.lang.String,java.lang.String) -> a
    int consumePurchase(int,java.lang.String,java.lang.String) -> b
com.android.vending.billing.IInAppBillingService$Stub -> com.a.a.a.b:
    com.android.vending.billing.IInAppBillingService asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.android.vending.billing.IInAppBillingService$Stub$Proxy -> com.a.a.a.c:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    int isBillingSupported(int,java.lang.String,java.lang.String) -> a
    android.os.Bundle getSkuDetails(int,java.lang.String,java.lang.String,android.os.Bundle) -> a
    android.os.Bundle getBuyIntent(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    android.os.Bundle getPurchases(int,java.lang.String,java.lang.String,java.lang.String) -> a
    int consumePurchase(int,java.lang.String,java.lang.String) -> b
com.badlogic.gdx.Application -> com.badlogic.gdx.a:
    com.badlogic.gdx.Graphics getGraphics() -> a
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void debug(java.lang.String,java.lang.String) -> c
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> a
    com.badlogic.gdx.utils.Clipboard getClipboard() -> c
    void postRunnable(java.lang.Runnable) -> a
    void exit() -> d
com.badlogic.gdx.Application$ApplicationType -> com.badlogic.gdx.b:
    com.badlogic.gdx.Application$ApplicationType Android -> a
    com.badlogic.gdx.Application$ApplicationType Desktop -> b
    com.badlogic.gdx.Application$ApplicationType Applet -> c
    com.badlogic.gdx.Application$ApplicationType WebGL -> d
    com.badlogic.gdx.Application$ApplicationType iOS -> e
    com.badlogic.gdx.Application$ApplicationType[] $VALUES -> f
    com.badlogic.gdx.Application$ApplicationType[] values() -> values
    com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.ApplicationListener -> com.badlogic.gdx.c:
    void create() -> a
    void resize(int,int) -> a
    void render() -> b
    void pause() -> c
    void resume() -> d
    void dispose() -> e
com.badlogic.gdx.Audio -> com.badlogic.gdx.d:
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.Files -> com.badlogic.gdx.e:
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle external(java.lang.String) -> c
    com.badlogic.gdx.files.FileHandle absolute(java.lang.String) -> d
    java.lang.String getExternalStoragePath() -> a
com.badlogic.gdx.Files$FileType -> com.badlogic.gdx.f:
    com.badlogic.gdx.Files$FileType Classpath -> a
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType[] $VALUES -> f
    com.badlogic.gdx.Files$FileType[] values() -> values
    com.badlogic.gdx.Files$FileType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.Game -> com.badlogic.gdx.g:
    com.badlogic.gdx.Screen screen -> a
    void dispose() -> e
    void pause() -> c
    void resume() -> d
    void render() -> b
    void resize(int,int) -> a
    void setScreen(com.badlogic.gdx.Screen) -> a
    com.badlogic.gdx.Screen getScreen() -> f
com.badlogic.gdx.Gdx -> com.badlogic.gdx.h:
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.Audio audio -> c
    com.badlogic.gdx.Input input -> d
    com.badlogic.gdx.Files files -> e
    com.badlogic.gdx.Net net -> f
    com.badlogic.gdx.graphics.GLCommon gl -> g
    com.badlogic.gdx.graphics.GL10 gl10 -> h
    com.badlogic.gdx.graphics.GL11 gl11 -> i
    com.badlogic.gdx.graphics.GL20 gl20 -> j
    com.badlogic.gdx.graphics.GLU glu -> k
com.badlogic.gdx.Graphics -> com.badlogic.gdx.i:
    boolean isGL20Available() -> a
    com.badlogic.gdx.graphics.GL20 getGL20() -> b
    int getWidth() -> c
    int getHeight() -> d
    float getDeltaTime() -> e
    int getFramesPerSecond() -> f
    com.badlogic.gdx.Graphics$DisplayMode getDesktopDisplayMode() -> g
    boolean supportsExtension(java.lang.String) -> a
    void setContinuousRendering(boolean) -> a
    void requestRendering() -> h
com.badlogic.gdx.Graphics$BufferFormat -> com.badlogic.gdx.j:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int samples -> g
    boolean coverageSampling -> h
    java.lang.String toString() -> toString
com.badlogic.gdx.Graphics$DisplayMode -> com.badlogic.gdx.k:
    int width -> a
    int height -> b
    int refreshRate -> c
    int bitsPerPixel -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.Input -> com.badlogic.gdx.l:
    int getX$134621() -> a
    int getY$134621() -> b
    boolean isTouched$134632() -> c
    boolean isButtonPressed(int) -> a
    boolean isKeyPressed(int) -> b
    void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String) -> a
    void setOnscreenKeyboardVisible(boolean) -> a
    long getCurrentEventTime() -> d
    void setCatchBackKey$1385ff() -> e
    void setCatchMenuKey$1385ff() -> f
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
com.badlogic.gdx.Input$Orientation -> com.badlogic.gdx.m:
    com.badlogic.gdx.Input$Orientation Landscape -> a
    com.badlogic.gdx.Input$Orientation Portrait -> b
    com.badlogic.gdx.Input$Orientation[] $VALUES -> c
    com.badlogic.gdx.Input$Orientation[] values() -> values
    com.badlogic.gdx.Input$Orientation valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.Input$TextInputListener -> com.badlogic.gdx.n:
    void input(java.lang.String) -> a
    void canceled() -> a
com.badlogic.gdx.InputAdapter -> com.badlogic.gdx.o:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.InputMultiplexer -> com.badlogic.gdx.p:
    com.badlogic.gdx.utils.Array processors -> a
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.InputProcessor -> com.badlogic.gdx.q:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.Net -> com.badlogic.gdx.r:
    com.badlogic.gdx.net.Socket newClientSocket$7347e804(java.lang.String,int) -> a
    void openURI(java.lang.String) -> a
com.badlogic.gdx.Net$Protocol -> com.badlogic.gdx.s:
    com.badlogic.gdx.Net$Protocol TCP -> a
    com.badlogic.gdx.Net$Protocol[] $VALUES -> b
    com.badlogic.gdx.Net$Protocol[] values() -> values
    com.badlogic.gdx.Net$Protocol valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.Preferences -> com.badlogic.gdx.t:
    void putBoolean(java.lang.String,boolean) -> a
    void putFloat(java.lang.String,float) -> a
    void putString(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> a
    boolean getBoolean(java.lang.String,boolean) -> b
    float getFloat$505d0a6f(java.lang.String) -> b
    void remove(java.lang.String) -> c
    void flush() -> a
com.badlogic.gdx.Screen -> com.badlogic.gdx.u:
    void render(float) -> a
    void resize(int,int) -> a
    void show() -> a
    void hide() -> b
    void pause() -> c
    void resume() -> d
com.badlogic.gdx.assets.AssetDescriptor -> com.badlogic.gdx.a.a:
    java.lang.String fileName -> a
    java.lang.Class type -> b
    com.badlogic.gdx.assets.AssetLoaderParameters params -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.assets.AssetErrorListener -> com.badlogic.gdx.a.b:
com.badlogic.gdx.assets.AssetLoaderParameters -> com.badlogic.gdx.a.c:
    com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback loadedCallback -> a
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback -> com.badlogic.gdx.a.d:
    void finishedLoading$190c2c84(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
com.badlogic.gdx.assets.AssetLoadingTask -> com.badlogic.gdx.a.e:
    com.badlogic.gdx.assets.AssetManager manager -> a
    com.badlogic.gdx.assets.AssetDescriptor assetDesc -> b
    com.badlogic.gdx.assets.loaders.AssetLoader loader -> c
    java.util.concurrent.ExecutorService threadPool -> d
    long startTime -> e
    boolean asyncDone -> f
    boolean dependenciesLoaded -> g
    com.badlogic.gdx.utils.Array dependencies -> h
    java.util.concurrent.Future depsFuture -> i
    java.util.concurrent.Future loadFuture -> j
    java.lang.Object asset -> k
    int ticks -> l
    boolean cancel -> m
    boolean update() -> a
    java.lang.Object getAsset() -> b
    java.lang.Object call() -> call
com.badlogic.gdx.assets.AssetManager -> com.badlogic.gdx.a.f:
    com.badlogic.gdx.utils.ObjectMap assets -> a
    com.badlogic.gdx.utils.ObjectMap assetTypes -> b
    com.badlogic.gdx.utils.ObjectMap assetDependencies -> c
    com.badlogic.gdx.utils.ObjectMap loaders -> d
    com.badlogic.gdx.utils.Array loadQueue -> e
    java.util.concurrent.ExecutorService threadPool -> f
    java.util.Stack tasks -> g
    com.badlogic.gdx.assets.AssetErrorListener listener -> h
    int loaded -> i
    int toLoad -> j
    com.badlogic.gdx.utils.Logger log -> k
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    void unload(java.lang.String) -> a
    java.lang.String getAssetFileName(java.lang.Object) -> a
    boolean isLoaded(java.lang.String) -> b
    void load(java.lang.String,java.lang.Class) -> b
    void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    boolean update() -> a
    void finishLoading() -> b
    void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor) -> a
    void addTask(com.badlogic.gdx.assets.AssetDescriptor) -> a
    void incrementRefCountedDependencies(java.lang.String) -> d
    void handleTaskError(java.lang.Throwable) -> a
    void setLoader(java.lang.Class,com.badlogic.gdx.assets.loaders.AssetLoader) -> a
    int getLoadedAssets() -> c
    int getQueuedAssets() -> d
    void dispose() -> e
    void clear() -> f
    int getReferenceCount(java.lang.String) -> c
    void setReferenceCount(java.lang.String,int) -> a
com.badlogic.gdx.assets.AssetManager$1 -> com.badlogic.gdx.a.g:
    com.badlogic.gdx.assets.AssetManager this$0 -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.badlogic.gdx.assets.RefCountedContainer -> com.badlogic.gdx.a.h:
    java.lang.Object object -> a
    int refCount -> b
    void incRefCount() -> a
com.badlogic.gdx.assets.loaders.AssetLoader -> com.badlogic.gdx.a.a.a:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> a
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> com.badlogic.gdx.a.a.b:
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.BitmapFontLoader -> com.badlogic.gdx.a.a.c:
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter -> com.badlogic.gdx.a.a.d:
    boolean flip -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter minFitler -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter maxFilter -> d
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData bitmapFontData -> e
com.badlogic.gdx.assets.loaders.FileHandleResolver -> com.badlogic.gdx.a.a.e:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.MusicLoader -> com.badlogic.gdx.a.a.f:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.PixmapLoader -> com.badlogic.gdx.a.a.g:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SkinLoader -> com.badlogic.gdx.a.a.h:
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter -> com.badlogic.gdx.a.a.i:
    java.lang.String textureAtlasPath -> b
com.badlogic.gdx.assets.loaders.SoundLoader -> com.badlogic.gdx.a.a.j:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader -> com.badlogic.gdx.a.a.k:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader -> com.badlogic.gdx.a.a.l:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData data -> a
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter -> com.badlogic.gdx.a.a.m:
    boolean flip -> b
com.badlogic.gdx.assets.loaders.TextureLoader -> com.badlogic.gdx.a.a.n:
    com.badlogic.gdx.graphics.TextureData data -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter -> com.badlogic.gdx.a.a.o:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean genMipMaps -> c
    com.badlogic.gdx.graphics.Texture texture -> d
    com.badlogic.gdx.graphics.TextureData textureData -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> i
com.badlogic.gdx.assets.loaders.TileAtlasLoader -> com.badlogic.gdx.a.a.p:
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TileAtlasLoader$TileAtlasParameter -> com.badlogic.gdx.a.a.q:
    java.lang.String tileMapFile -> b
com.badlogic.gdx.assets.loaders.TileMapRendererLoader -> com.badlogic.gdx.a.a.r:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TileMapRendererLoader$TileMapParameter -> com.badlogic.gdx.a.a.s:
    java.lang.String imageDirectory -> b
    int tilesPerBlockX -> c
    int tilesPerBlockY -> d
    float unitsPerTileX -> e
    float unitsPerTileY -> f
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver -> com.badlogic.gdx.a.a.a.a:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.audio.Music -> com.badlogic.gdx.b.a:
    void play() -> a
    void stop() -> b
    void setLooping$1385ff() -> c
    void setVolume(float) -> a
    void dispose() -> e
com.badlogic.gdx.audio.Sound -> com.badlogic.gdx.b.b:
    long play(float) -> a
com.badlogic.gdx.backends.android.AndroidApplication -> com.badlogic.gdx.backends.android.AndroidApplication:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> a
    com.badlogic.gdx.backends.android.AndroidInput input -> b
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    com.badlogic.gdx.backends.android.AndroidFiles files -> d
    com.badlogic.gdx.backends.android.AndroidNet net -> e
    com.badlogic.gdx.ApplicationListener listener -> f
    android.os.Handler handler -> g
    boolean firstResume -> h
    com.badlogic.gdx.utils.Array runnables -> i
    com.badlogic.gdx.utils.Array executedRunnables -> j
    com.badlogic.gdx.utils.Array lifecycleListeners -> k
    android.os.PowerManager$WakeLock wakeLock -> l
    int logLevel -> m
    com.badlogic.gdx.backends.android.AndroidClipboard clipboard -> n
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    com.badlogic.gdx.Graphics getGraphics() -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> a
    com.badlogic.gdx.utils.Clipboard getClipboard() -> c
    void postRunnable(java.lang.Runnable) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void exit() -> d
    void debug(java.lang.String,java.lang.String) -> c
    void log(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Exception) -> a
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
com.badlogic.gdx.backends.android.AndroidApplication$1 -> com.badlogic.gdx.backends.android.a:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> com.badlogic.gdx.backends.android.b:
    boolean useGL20 -> a
    int r -> b
    int g -> c
    int b -> d
    int a -> e
    int depth -> f
    int stencil -> g
    int numSamples -> h
    boolean useAccelerometer -> i
    boolean useCompass -> j
    int touchSleepTime -> k
    boolean useWakelock -> l
    boolean hideStatusBar -> m
    int maxSimultaneousSounds -> n
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> o
    boolean getTouchEventsForLiveWallpaper -> p
com.badlogic.gdx.backends.android.AndroidAudio -> com.badlogic.gdx.backends.android.c:
    android.media.SoundPool soundPool -> b
    android.media.AudioManager manager -> c
    java.util.List musics -> a
    void pause() -> a
    void resume() -> b
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidClipboard -> com.badlogic.gdx.backends.android.d:
    android.content.Context context -> a
    java.lang.String contents -> b
    java.lang.String getContents() -> a
    void setContents(java.lang.String) -> a
com.badlogic.gdx.backends.android.AndroidFileHandle -> com.badlogic.gdx.backends.android.e:
    android.content.res.AssetManager assets -> a
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    java.io.InputStream read() -> b
    boolean exists() -> c
    long length() -> d
com.badlogic.gdx.backends.android.AndroidFiles -> com.badlogic.gdx.backends.android.f:
    java.lang.String sdcard -> a
    java.lang.String localpath -> b
    android.content.res.AssetManager assets -> c
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle external(java.lang.String) -> c
    com.badlogic.gdx.files.FileHandle absolute(java.lang.String) -> d
    java.lang.String getExternalStoragePath() -> a
com.badlogic.gdx.backends.android.AndroidGL10 -> com.badlogic.gdx.backends.android.g:
    javax.microedition.khronos.opengles.GL10 gl -> a
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClientActiveTexture(int) -> a
    void glColorPointer(int,int,int,java.nio.Buffer) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDisableClientState(int) -> b
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableClientState(int) -> c
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glLoadIdentity() -> a
    void glMatrixMode(int) -> d
    void glNormalPointer$4dfa77fc(int,java.nio.Buffer) -> a
    void glPixelStorei(int,int) -> glPixelStorei
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glScissor(int,int,int,int) -> glScissor
    void glTexCoordPointer$5efd7755(int,int,java.nio.Buffer) -> a
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glVertexPointer$5efd7755(int,int,java.nio.Buffer) -> b
    void glLoadMatrixf$49651d03(float[]) -> a
com.badlogic.gdx.backends.android.AndroidGL11 -> com.badlogic.gdx.backends.android.h:
    javax.microedition.khronos.opengles.GL11 gl -> b
    void glBindBuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData$5efd7755(int,int,java.nio.Buffer) -> c
    void glDeleteBuffers$63f29576(java.nio.IntBuffer) -> a
    void glGenBuffers$63f29576(java.nio.IntBuffer) -> b
    void glColorPointer(int,int,int,int) -> a
    void glNormalPointer$4868d30e(int,int) -> b
    void glTexCoordPointer$3b4dfe4b(int,int,int) -> a
    void glVertexPointer$3b4dfe4b(int,int,int) -> b
    void glDrawElements$3b4dfe4b$4868d30e(int) -> e
com.badlogic.gdx.backends.android.AndroidGL20 -> com.badlogic.gdx.backends.android.AndroidGL20:
    void init() -> init
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glCompileShader(int) -> glCompileShader
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteShader(int) -> glDeleteShader
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    java.lang.String glGetString(int) -> glGetString
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glPixelStorei(int,int) -> glPixelStorei
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glScissor(int,int,int,int) -> glScissor
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
com.badlogic.gdx.backends.android.AndroidGLU -> com.badlogic.gdx.backends.android.i:
com.badlogic.gdx.backends.android.AndroidGraphics -> com.badlogic.gdx.backends.android.j:
    android.view.View view -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.backends.android.AndroidApplication app -> d
    com.badlogic.gdx.graphics.GLCommon gl -> e
    com.badlogic.gdx.graphics.GL10 gl10 -> f
    com.badlogic.gdx.graphics.GL11 gl11 -> g
    com.badlogic.gdx.graphics.GL20 gl20 -> h
    com.badlogic.gdx.graphics.GLU glu -> i
    javax.microedition.khronos.egl.EGLContext eglContext -> j
    java.lang.String extensions -> k
    long lastFrameTime -> s
    float deltaTime -> t
    long frameStart -> u
    int frames -> v
    int fps -> w
    com.badlogic.gdx.math.WindowedMean mean -> x
    boolean created -> l
    boolean running -> m
    boolean pause -> n
    boolean resume -> o
    boolean destroy -> p
    float ppiX -> y
    float ppiY -> z
    float ppcX -> A
    float ppcY -> B
    float density -> C
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> D
    com.badlogic.gdx.Graphics$BufferFormat bufferFormat -> E
    boolean isContinuous -> F
    int[] value -> q
    java.lang.Object synch -> r
    void setPreserveContext(android.view.View) -> a
    android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser() -> o
    void updatePpi() -> p
    com.badlogic.gdx.graphics.GL20 getGL20() -> b
    int getHeight() -> d
    int getWidth() -> c
    boolean isGL20Available() -> a
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    int getAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
    void resume() -> i
    void pause() -> j
    void destroy() -> k
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    float getDeltaTime() -> e
    int getFramesPerSecond() -> f
    void clearManagedCaches() -> l
    android.view.View getView() -> m
    com.badlogic.gdx.Graphics$DisplayMode getDesktopDisplayMode() -> g
    boolean supportsExtension(java.lang.String) -> a
    void setContinuousRendering(boolean) -> a
    boolean isContinuousRendering() -> n
    void requestRendering() -> h
com.badlogic.gdx.backends.android.AndroidGraphics$1 -> com.badlogic.gdx.backends.android.k:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy val$resolutionStrategy -> a
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> b
    void onMeasure(int,int) -> onMeasure
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> com.badlogic.gdx.backends.android.l:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> e
com.badlogic.gdx.backends.android.AndroidInput -> com.badlogic.gdx.backends.android.m:
    com.badlogic.gdx.utils.Pool usedKeyEvents -> a
    com.badlogic.gdx.utils.Pool usedTouchEvents -> b
    java.util.ArrayList keyListeners -> c
    java.util.ArrayList keyEvents -> d
    java.util.ArrayList touchEvents -> e
    int[] touchX -> f
    int[] touchY -> g
    int[] deltaX -> h
    int[] deltaY -> i
    boolean[] touched -> j
    int[] realId -> k
    com.badlogic.gdx.utils.IntMap keys -> q
    android.hardware.SensorManager manager -> r
    boolean accelerometerAvailable -> l
    float[] accelerometerValues -> s
    android.os.Handler handle -> t
    com.badlogic.gdx.Application app -> m
    android.content.Context context -> n
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> u
    int sleepTime -> v
    boolean catchBack -> w
    boolean catchMenu -> x
    boolean compassAvailable -> y
    boolean keyboardAvailable -> o
    float[] magneticFieldValues -> z
    boolean justTouched -> A
    com.badlogic.gdx.InputProcessor processor -> B
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> C
    com.badlogic.gdx.Input$Orientation nativeOrientation -> D
    long currentEventTimeStamp -> E
    android.hardware.SensorEventListener accelerometerListener -> F
    android.hardware.SensorEventListener compassListener -> G
    boolean requestFocus -> p
    void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String) -> a
    int getX$134621() -> a
    int getY$134621() -> b
    boolean isTouched$134632() -> c
    boolean isKeyPressed(int) -> b
    boolean isTouched() -> j
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    void processEvents() -> g
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void setOnscreenKeyboardVisible(boolean) -> a
    void setCatchBackKey$1385ff() -> e
    void setCatchMenuKey$1385ff() -> f
    boolean isButtonPressed(int) -> a
    void registerSensorListeners() -> h
    void unregisterSensorListeners() -> i
    long getCurrentEventTime() -> d
com.badlogic.gdx.backends.android.AndroidInput$3 -> com.badlogic.gdx.backends.android.n:
    java.lang.String val$title -> a
    java.lang.String val$text -> b
    com.badlogic.gdx.Input$TextInputListener val$listener -> c
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> d
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$3$1 -> com.badlogic.gdx.backends.android.o:
    android.widget.EditText val$input -> a
    com.badlogic.gdx.backends.android.AndroidInput$3 this$1 -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.badlogic.gdx.backends.android.AndroidInput$3$1$1 -> com.badlogic.gdx.backends.android.p:
    com.badlogic.gdx.backends.android.AndroidInput$3$1 this$2 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$3$2 -> com.badlogic.gdx.backends.android.q:
    com.badlogic.gdx.backends.android.AndroidInput$3 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.badlogic.gdx.backends.android.AndroidInput$3$2$1 -> com.badlogic.gdx.backends.android.r:
    com.badlogic.gdx.backends.android.AndroidInput$3$2 this$2 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$3$3 -> com.badlogic.gdx.backends.android.s:
    com.badlogic.gdx.backends.android.AndroidInput$3 this$1 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.badlogic.gdx.backends.android.AndroidInput$3$3$1 -> com.badlogic.gdx.backends.android.t:
    com.badlogic.gdx.backends.android.AndroidInput$3$3 this$2 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$5 -> com.badlogic.gdx.backends.android.u:
    boolean val$visible -> a
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> b
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent -> com.badlogic.gdx.backends.android.v:
    long timeStamp -> a
    int type -> b
    int keyCode -> c
    char keyChar -> d
com.badlogic.gdx.backends.android.AndroidInput$SensorListener -> com.badlogic.gdx.backends.android.w:
    float[] accelerometerValues -> a
    float[] magneticFieldValues -> b
    com.badlogic.gdx.Input$Orientation nativeOrientation -> c
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> d
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent -> com.badlogic.gdx.backends.android.x:
    long timeStamp -> a
    int type -> b
    int x -> c
    int y -> d
    int pointer -> e
com.badlogic.gdx.backends.android.AndroidInputFactory -> com.badlogic.gdx.backends.android.y:
    com.badlogic.gdx.backends.android.AndroidInput newAndroidInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
com.badlogic.gdx.backends.android.AndroidInputThreePlus -> com.badlogic.gdx.backends.android.z:
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService -> com.badlogic.gdx.backends.android.AndroidLiveWallpaperService:
    java.lang.String TAG -> a
    boolean DEBUG -> b
    int runningEngines -> c
com.badlogic.gdx.backends.android.AndroidMusic -> com.badlogic.gdx.backends.android.aa:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> b
    android.media.MediaPlayer player -> c
    boolean isPrepared -> d
    boolean wasPlaying -> a
    void dispose() -> e
    boolean isPlaying() -> d
    void pause() -> f
    void play() -> a
    void setLooping$1385ff() -> c
    void setVolume(float) -> a
    void stop() -> b
com.badlogic.gdx.backends.android.AndroidNet -> com.badlogic.gdx.backends.android.ab:
    com.badlogic.gdx.backends.android.AndroidApplication app -> a
    com.badlogic.gdx.net.NetJavaImpl netJavaImpl -> b
    com.badlogic.gdx.net.Socket newClientSocket$7347e804(java.lang.String,int) -> a
    void openURI(java.lang.String) -> a
com.badlogic.gdx.backends.android.AndroidNet$1 -> com.badlogic.gdx.backends.android.ac:
    android.net.Uri val$uri -> a
    com.badlogic.gdx.backends.android.AndroidNet this$0 -> b
    void run() -> run
com.badlogic.gdx.backends.android.AndroidPreferences -> com.badlogic.gdx.backends.android.ad:
    android.content.SharedPreferences sharedPrefs -> a
    android.content.SharedPreferences$Editor editor -> b
    void putBoolean(java.lang.String,boolean) -> a
    void putFloat(java.lang.String,float) -> a
    void putString(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> a
    boolean getBoolean(java.lang.String,boolean) -> b
    float getFloat$505d0a6f(java.lang.String) -> b
    void flush() -> a
    void remove(java.lang.String) -> c
    void edit() -> b
com.badlogic.gdx.backends.android.AndroidSocket -> com.badlogic.gdx.backends.android.ae:
    java.net.Socket socket -> a
    java.io.InputStream getInputStream() -> a
    java.io.OutputStream getOutputStream() -> b
    void dispose() -> e
com.badlogic.gdx.backends.android.AndroidSound -> com.badlogic.gdx.backends.android.af:
    android.media.SoundPool soundPool -> a
    android.media.AudioManager manager -> b
    int soundId -> c
    com.badlogic.gdx.utils.IntArray streamIds -> d
    void dispose() -> e
    long play(float) -> a
com.badlogic.gdx.backends.android.AndroidTouchHandler -> com.badlogic.gdx.backends.android.ag:
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.a:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView:
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThreadManager sGLThreadManager -> a
    boolean mSizeChanged -> b
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread mGLThread -> h
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> c
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLContextFactory mEGLContextFactory -> d
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory -> e
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLWrapper mGLWrapper -> f
    int mDebugFlags -> g
    void setDebugFlags(int) -> setDebugFlags
    int getDebugFlags() -> getDebugFlags
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> setRenderer
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> setEGLConfigChooser
    void setEGLConfigChooser(boolean) -> setEGLConfigChooser
    void setEGLConfigChooser(int,int,int,int,int,int) -> setEGLConfigChooser
    void setRenderMode(int) -> setRenderMode
    int getRenderMode() -> getRenderMode
    void requestRender() -> requestRender
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> onPause
    void onResume() -> onResume
    void queueEvent(java.lang.Runnable) -> queueEvent
    void onDetachedFromWindow() -> onDetachedFromWindow
    void checkRenderThreadState() -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$BaseConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.b:
    int[] mConfigSpec -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$ComponentSizeChooser -> com.badlogic.gdx.backends.android.surfaceview.c:
    int[] mValue -> h
    int mRedSize -> b
    int mGreenSize -> c
    int mBlueSize -> d
    int mAlphaSize -> e
    int mDepthSize -> f
    int mStencilSize -> g
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$DefaultContextFactory -> com.badlogic.gdx.backends.android.surfaceview.d:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$DefaultWindowSurfaceFactory -> com.badlogic.gdx.backends.android.surfaceview.e:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLContextFactory -> com.badlogic.gdx.backends.android.surfaceview.f:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLWindowSurfaceFactory -> com.badlogic.gdx.backends.android.surfaceview.g:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EglHelper -> com.badlogic.gdx.backends.android.surfaceview.h:
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView this$0 -> f
    javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder) -> a
    void throwEglException(java.lang.String) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread -> com.badlogic.gdx.backends.android.surfaceview.i:
    boolean mShouldExit -> c
    boolean mExited -> a
    boolean mPaused -> d
    boolean mHasSurface -> e
    boolean mWaitingForSurface -> f
    boolean mHaveEgl -> g
    int mWidth -> h
    int mHeight -> i
    int mRenderMode -> j
    boolean mRequestRender -> k
    boolean mRenderComplete -> l
    java.util.ArrayList mEventQueue -> m
    android.opengl.GLSurfaceView$Renderer mRenderer -> n
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EglHelper mEglHelper -> o
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView this$0 -> b
    void run() -> run
    void stopEglLocked() -> h
    void guardedRun() -> i
    void setRenderMode(int) -> a
    int getRenderMode() -> a
    void requestRender() -> b
    void surfaceCreated() -> c
    void surfaceDestroyed() -> d
    void onPause() -> e
    void onResume() -> f
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> g
    void queueEvent(java.lang.Runnable) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThreadManager -> com.badlogic.gdx.backends.android.surfaceview.j:
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread mEglOwner -> a
    void threadExiting(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread) -> a
    boolean tryAcquireEglSurfaceLocked(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread) -> b
    void releaseEglSurfaceLocked(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread) -> c
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLWrapper -> com.badlogic.gdx.backends.android.surfaceview.k:
    javax.microedition.khronos.opengles.GL wrap$40ce139f() -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$LogWriter -> com.badlogic.gdx.backends.android.surfaceview.l:
    java.lang.StringBuilder mBuilder -> a
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.m:
com.badlogic.gdx.backends.android.surfaceview.GLErrorWrapper -> com.badlogic.gdx.backends.android.surfaceview.n:
    boolean mCheckError -> a
    boolean mCheckThread -> b
    java.lang.Thread mOurThread -> c
    void checkThread() -> a
    void checkError() -> b
    void glActiveTexture(int) -> glActiveTexture
    void glAlphaFunc(int,float) -> glAlphaFunc
    void glAlphaFuncx(int,int) -> glAlphaFuncx
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearColorx(int,int,int,int) -> glClearColorx
    void glClearDepthf(float) -> glClearDepthf
    void glClearDepthx(int) -> glClearDepthx
    void glClearStencil(int) -> glClearStencil
    void glClientActiveTexture(int) -> glClientActiveTexture
    void glColor4f(float,float,float,float) -> glColor4f
    void glColor4x(int,int,int,int) -> glColor4x
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glColorPointer(int,int,int,java.nio.Buffer) -> glColorPointer
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteTextures(int,int[],int) -> glDeleteTextures
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDepthRangex(int,int) -> glDepthRangex
    void glDisable(int) -> glDisable
    void glDisableClientState(int) -> glDisableClientState
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableClientState(int) -> glEnableClientState
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFogf(int,float) -> glFogf
    void glFogfv(int,float[],int) -> glFogfv
    void glFogfv(int,java.nio.FloatBuffer) -> glFogfv
    void glFogx(int,int) -> glFogx
    void glFogxv(int,int[],int) -> glFogxv
    void glFogxv(int,java.nio.IntBuffer) -> glFogxv
    void glFrontFace(int) -> glFrontFace
    void glFrustumf(float,float,float,float,float,float) -> glFrustumf
    void glFrustumx(int,int,int,int,int,int) -> glFrustumx
    void glGenTextures(int,int[],int) -> glGenTextures
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGetError() -> glGetError
    void glGetIntegerv(int,int[],int) -> glGetIntegerv
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glHint(int,int) -> glHint
    void glLightModelf(int,float) -> glLightModelf
    void glLightModelfv(int,float[],int) -> glLightModelfv
    void glLightModelfv(int,java.nio.FloatBuffer) -> glLightModelfv
    void glLightModelx(int,int) -> glLightModelx
    void glLightModelxv(int,int[],int) -> glLightModelxv
    void glLightModelxv(int,java.nio.IntBuffer) -> glLightModelxv
    void glLightf(int,int,float) -> glLightf
    void glLightfv(int,int,float[],int) -> glLightfv
    void glLightfv(int,int,java.nio.FloatBuffer) -> glLightfv
    void glLightx(int,int,int) -> glLightx
    void glLightxv(int,int,int[],int) -> glLightxv
    void glLightxv(int,int,java.nio.IntBuffer) -> glLightxv
    void glLineWidth(float) -> glLineWidth
    void glLineWidthx(int) -> glLineWidthx
    void glLoadIdentity() -> glLoadIdentity
    void glLoadMatrixf(float[],int) -> glLoadMatrixf
    void glLoadMatrixf(java.nio.FloatBuffer) -> glLoadMatrixf
    void glLoadMatrixx(int[],int) -> glLoadMatrixx
    void glLoadMatrixx(java.nio.IntBuffer) -> glLoadMatrixx
    void glLogicOp(int) -> glLogicOp
    void glMaterialf(int,int,float) -> glMaterialf
    void glMaterialfv(int,int,float[],int) -> glMaterialfv
    void glMaterialfv(int,int,java.nio.FloatBuffer) -> glMaterialfv
    void glMaterialx(int,int,int) -> glMaterialx
    void glMaterialxv(int,int,int[],int) -> glMaterialxv
    void glMaterialxv(int,int,java.nio.IntBuffer) -> glMaterialxv
    void glMatrixMode(int) -> glMatrixMode
    void glMultMatrixf(float[],int) -> glMultMatrixf
    void glMultMatrixf(java.nio.FloatBuffer) -> glMultMatrixf
    void glMultMatrixx(int[],int) -> glMultMatrixx
    void glMultMatrixx(java.nio.IntBuffer) -> glMultMatrixx
    void glMultiTexCoord4f(int,float,float,float,float) -> glMultiTexCoord4f
    void glMultiTexCoord4x(int,int,int,int,int) -> glMultiTexCoord4x
    void glNormal3f(float,float,float) -> glNormal3f
    void glNormal3x(int,int,int) -> glNormal3x
    void glNormalPointer(int,int,java.nio.Buffer) -> glNormalPointer
    void glOrthof(float,float,float,float,float,float) -> glOrthof
    void glOrthox(int,int,int,int,int,int) -> glOrthox
    void glPixelStorei(int,int) -> glPixelStorei
    void glPointSize(float) -> glPointSize
    void glPointSizex(int) -> glPointSizex
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glPolygonOffsetx(int,int) -> glPolygonOffsetx
    void glPopMatrix() -> glPopMatrix
    void glPushMatrix() -> glPushMatrix
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glRotatef(float,float,float,float) -> glRotatef
    void glRotatex(int,int,int,int) -> glRotatex
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glSampleCoveragex(int,boolean) -> glSampleCoveragex
    void glScalef(float,float,float) -> glScalef
    void glScalex(int,int,int) -> glScalex
    void glScissor(int,int,int,int) -> glScissor
    void glShadeModel(int) -> glShadeModel
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> glTexCoordPointer
    void glTexEnvf(int,int,float) -> glTexEnvf
    void glTexEnvfv(int,int,float[],int) -> glTexEnvfv
    void glTexEnvfv(int,int,java.nio.FloatBuffer) -> glTexEnvfv
    void glTexEnvx(int,int,int) -> glTexEnvx
    void glTexEnvxv(int,int,int[],int) -> glTexEnvxv
    void glTexEnvxv(int,int,java.nio.IntBuffer) -> glTexEnvxv
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexParameterx(int,int,int) -> glTexParameterx
    void glTexParameteriv(int,int,int[],int) -> glTexParameteriv
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glTranslatef(float,float,float) -> glTranslatef
    void glTranslatex(int,int,int) -> glTranslatex
    void glVertexPointer(int,int,int,java.nio.Buffer) -> glVertexPointer
    void glViewport(int,int,int,int) -> glViewport
    void glClipPlanef(int,float[],int) -> glClipPlanef
    void glClipPlanef(int,java.nio.FloatBuffer) -> glClipPlanef
    void glClipPlanex(int,int[],int) -> glClipPlanex
    void glClipPlanex(int,java.nio.IntBuffer) -> glClipPlanex
    void glDrawTexfOES(float,float,float,float,float) -> glDrawTexfOES
    void glDrawTexfvOES(float[],int) -> glDrawTexfvOES
    void glDrawTexfvOES(java.nio.FloatBuffer) -> glDrawTexfvOES
    void glDrawTexiOES(int,int,int,int,int) -> glDrawTexiOES
    void glDrawTexivOES(int[],int) -> glDrawTexivOES
    void glDrawTexivOES(java.nio.IntBuffer) -> glDrawTexivOES
    void glDrawTexsOES(short,short,short,short,short) -> glDrawTexsOES
    void glDrawTexsvOES(short[],int) -> glDrawTexsvOES
    void glDrawTexsvOES(java.nio.ShortBuffer) -> glDrawTexsvOES
    void glDrawTexxOES(int,int,int,int,int) -> glDrawTexxOES
    void glDrawTexxvOES(int[],int) -> glDrawTexxvOES
    void glDrawTexxvOES(java.nio.IntBuffer) -> glDrawTexxvOES
    int glQueryMatrixxOES(int[],int,int[],int) -> glQueryMatrixxOES
    int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer) -> glQueryMatrixxOES
com.badlogic.gdx.backends.android.surfaceview.GLException -> com.badlogic.gdx.backends.android.surfaceview.o:
    int mError -> a
com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper -> com.badlogic.gdx.backends.android.surfaceview.p:
    java.io.Writer mLog -> k
    boolean mLogArgumentNames -> l
    int mArgCount -> m
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mColorPointer -> n
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mNormalPointer -> o
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mTexCoordPointer -> p
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mVertexPointer -> q
    boolean mColorArrayEnabled -> a
    boolean mNormalArrayEnabled -> b
    boolean mTextureCoordArrayEnabled -> c
    boolean mVertexArrayEnabled -> d
    java.lang.StringBuilder mStringBuilder -> e
    void checkError() -> a
    void log(java.lang.String) -> a
    void begin(java.lang.String) -> b
    void arg(java.lang.String,java.lang.String) -> a
    void end() -> b
    void flush() -> c
    void arg(java.lang.String,boolean) -> a
    void arg(java.lang.String,int) -> a
    void arg(java.lang.String,float) -> a
    void returns(java.lang.String) -> c
    void arg(java.lang.String,int,int[],int) -> a
    void arg(java.lang.String,int,float[],int) -> a
    void formattedAppend(java.lang.StringBuilder,int,int) -> a
    java.lang.String toString(int,int,int[],int) -> a
    java.lang.String toString(int,int,java.nio.IntBuffer) -> a
    void arg(java.lang.String,int,java.nio.FloatBuffer) -> a
    void arg(java.lang.String,int,java.nio.IntBuffer) -> a
    void argPointer(int,int,int,java.nio.Buffer) -> a
    java.lang.String getHex(int) -> a
    java.lang.String getFactor(int) -> b
    java.lang.String getTextureTarget(int) -> c
    java.lang.String getTextureEnvTarget(int) -> d
    java.lang.String getTextureEnvPName(int) -> e
    int getTextureEnvParamCount(int) -> f
    java.lang.String getClientState(int) -> g
    java.lang.String getCap(int) -> h
    java.lang.String getTexturePName(int) -> i
    java.lang.String getFogPName(int) -> j
    int getFogParamCount(int) -> k
    java.lang.String getIntegerStateName(int) -> l
    int getIntegerStateSize(int) -> m
    int getIntegerStateFormat(int) -> n
    java.lang.String getFaceName(int) -> o
    java.lang.String getMaterialPName(int) -> p
    int getMaterialParamCount(int) -> q
    java.lang.String getLightName(int) -> r
    java.lang.String getLightPName(int) -> s
    int getLightParamCount(int) -> t
    java.lang.String getLightModelPName(int) -> u
    int getLightModelParamCount(int) -> v
    java.nio.ByteBuffer toByteBuffer(int,java.nio.Buffer) -> a
    void doArrayElement(java.lang.StringBuilder,boolean,java.lang.String,com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo,int) -> a
    void doElement(java.lang.StringBuilder,int,int) -> b
    void startLogIndices() -> d
    void endLogIndices() -> e
    void glActiveTexture(int) -> glActiveTexture
    void glAlphaFunc(int,float) -> glAlphaFunc
    void glAlphaFuncx(int,int) -> glAlphaFuncx
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearColorx(int,int,int,int) -> glClearColorx
    void glClearDepthf(float) -> glClearDepthf
    void glClearDepthx(int) -> glClearDepthx
    void glClearStencil(int) -> glClearStencil
    void glClientActiveTexture(int) -> glClientActiveTexture
    void glColor4f(float,float,float,float) -> glColor4f
    void glColor4x(int,int,int,int) -> glColor4x
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glColorPointer(int,int,int,java.nio.Buffer) -> glColorPointer
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteTextures(int,int[],int) -> glDeleteTextures
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDepthRangex(int,int) -> glDepthRangex
    void glDisable(int) -> glDisable
    void glDisableClientState(int) -> glDisableClientState
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableClientState(int) -> glEnableClientState
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFogf(int,float) -> glFogf
    void glFogfv(int,float[],int) -> glFogfv
    void glFogfv(int,java.nio.FloatBuffer) -> glFogfv
    void glFogx(int,int) -> glFogx
    void glFogxv(int,int[],int) -> glFogxv
    void glFogxv(int,java.nio.IntBuffer) -> glFogxv
    void glFrontFace(int) -> glFrontFace
    void glFrustumf(float,float,float,float,float,float) -> glFrustumf
    void glFrustumx(int,int,int,int,int,int) -> glFrustumx
    void glGenTextures(int,int[],int) -> glGenTextures
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGetError() -> glGetError
    void glGetIntegerv(int,int[],int) -> glGetIntegerv
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glHint(int,int) -> glHint
    void glLightModelf(int,float) -> glLightModelf
    void glLightModelfv(int,float[],int) -> glLightModelfv
    void glLightModelfv(int,java.nio.FloatBuffer) -> glLightModelfv
    void glLightModelx(int,int) -> glLightModelx
    void glLightModelxv(int,int[],int) -> glLightModelxv
    void glLightModelxv(int,java.nio.IntBuffer) -> glLightModelxv
    void glLightf(int,int,float) -> glLightf
    void glLightfv(int,int,float[],int) -> glLightfv
    void glLightfv(int,int,java.nio.FloatBuffer) -> glLightfv
    void glLightx(int,int,int) -> glLightx
    void glLightxv(int,int,int[],int) -> glLightxv
    void glLightxv(int,int,java.nio.IntBuffer) -> glLightxv
    void glLineWidth(float) -> glLineWidth
    void glLineWidthx(int) -> glLineWidthx
    void glLoadIdentity() -> glLoadIdentity
    void glLoadMatrixf(float[],int) -> glLoadMatrixf
    void glLoadMatrixf(java.nio.FloatBuffer) -> glLoadMatrixf
    void glLoadMatrixx(int[],int) -> glLoadMatrixx
    void glLoadMatrixx(java.nio.IntBuffer) -> glLoadMatrixx
    void glLogicOp(int) -> glLogicOp
    void glMaterialf(int,int,float) -> glMaterialf
    void glMaterialfv(int,int,float[],int) -> glMaterialfv
    void glMaterialfv(int,int,java.nio.FloatBuffer) -> glMaterialfv
    void glMaterialx(int,int,int) -> glMaterialx
    void glMaterialxv(int,int,int[],int) -> glMaterialxv
    void glMaterialxv(int,int,java.nio.IntBuffer) -> glMaterialxv
    void glMatrixMode(int) -> glMatrixMode
    void glMultMatrixf(float[],int) -> glMultMatrixf
    void glMultMatrixf(java.nio.FloatBuffer) -> glMultMatrixf
    void glMultMatrixx(int[],int) -> glMultMatrixx
    void glMultMatrixx(java.nio.IntBuffer) -> glMultMatrixx
    void glMultiTexCoord4f(int,float,float,float,float) -> glMultiTexCoord4f
    void glMultiTexCoord4x(int,int,int,int,int) -> glMultiTexCoord4x
    void glNormal3f(float,float,float) -> glNormal3f
    void glNormal3x(int,int,int) -> glNormal3x
    void glNormalPointer(int,int,java.nio.Buffer) -> glNormalPointer
    void glOrthof(float,float,float,float,float,float) -> glOrthof
    void glOrthox(int,int,int,int,int,int) -> glOrthox
    void glPixelStorei(int,int) -> glPixelStorei
    void glPointSize(float) -> glPointSize
    void glPointSizex(int) -> glPointSizex
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glPolygonOffsetx(int,int) -> glPolygonOffsetx
    void glPopMatrix() -> glPopMatrix
    void glPushMatrix() -> glPushMatrix
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glRotatef(float,float,float,float) -> glRotatef
    void glRotatex(int,int,int,int) -> glRotatex
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glSampleCoveragex(int,boolean) -> glSampleCoveragex
    void glScalef(float,float,float) -> glScalef
    void glScalex(int,int,int) -> glScalex
    void glScissor(int,int,int,int) -> glScissor
    void glShadeModel(int) -> glShadeModel
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> glTexCoordPointer
    void glTexEnvf(int,int,float) -> glTexEnvf
    void glTexEnvfv(int,int,float[],int) -> glTexEnvfv
    void glTexEnvfv(int,int,java.nio.FloatBuffer) -> glTexEnvfv
    void glTexEnvx(int,int,int) -> glTexEnvx
    void glTexEnvxv(int,int,int[],int) -> glTexEnvxv
    void glTexEnvxv(int,int,java.nio.IntBuffer) -> glTexEnvxv
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexParameterx(int,int,int) -> glTexParameterx
    void glTexParameteriv(int,int,int[],int) -> glTexParameteriv
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glTranslatef(float,float,float) -> glTranslatef
    void glTranslatex(int,int,int) -> glTranslatex
    void glVertexPointer(int,int,int,java.nio.Buffer) -> glVertexPointer
    void glViewport(int,int,int,int) -> glViewport
    void glClipPlanef(int,float[],int) -> glClipPlanef
    void glClipPlanef(int,java.nio.FloatBuffer) -> glClipPlanef
    void glClipPlanex(int,int[],int) -> glClipPlanex
    void glClipPlanex(int,java.nio.IntBuffer) -> glClipPlanex
    void glDrawTexfOES(float,float,float,float,float) -> glDrawTexfOES
    void glDrawTexfvOES(float[],int) -> glDrawTexfvOES
    void glDrawTexfvOES(java.nio.FloatBuffer) -> glDrawTexfvOES
    void glDrawTexiOES(int,int,int,int,int) -> glDrawTexiOES
    void glDrawTexivOES(int[],int) -> glDrawTexivOES
    void glDrawTexivOES(java.nio.IntBuffer) -> glDrawTexivOES
    void glDrawTexsOES(short,short,short,short,short) -> glDrawTexsOES
    void glDrawTexsvOES(short[],int) -> glDrawTexsvOES
    void glDrawTexsvOES(java.nio.ShortBuffer) -> glDrawTexsvOES
    void glDrawTexxOES(int,int,int,int,int) -> glDrawTexxOES
    void glDrawTexxvOES(int[],int) -> glDrawTexxvOES
    void glDrawTexxvOES(java.nio.IntBuffer) -> glDrawTexxvOES
    int glQueryMatrixxOES(int[],int,int[],int) -> glQueryMatrixxOES
    int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer) -> glQueryMatrixxOES
    void glBindBuffer(int,int) -> glBindBuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    void glColor4ub(byte,byte,byte,byte) -> glColor4ub
    void glDeleteBuffers(int,int[],int) -> glDeleteBuffers
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glGenBuffers(int,int[],int) -> glGenBuffers
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGetBooleanv(int,boolean[],int) -> glGetBooleanv
    void glGetBooleanv(int,java.nio.IntBuffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,int[],int) -> glGetBufferParameteriv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetClipPlanef(int,float[],int) -> glGetClipPlanef
    void glGetClipPlanef(int,java.nio.FloatBuffer) -> glGetClipPlanef
    void glGetClipPlanex(int,int[],int) -> glGetClipPlanex
    void glGetClipPlanex(int,java.nio.IntBuffer) -> glGetClipPlanex
    void glGetFixedv(int,int[],int) -> glGetFixedv
    void glGetFixedv(int,java.nio.IntBuffer) -> glGetFixedv
    void glGetFloatv(int,float[],int) -> glGetFloatv
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetLightfv(int,int,float[],int) -> glGetLightfv
    void glGetLightfv(int,int,java.nio.FloatBuffer) -> glGetLightfv
    void glGetLightxv(int,int,int[],int) -> glGetLightxv
    void glGetLightxv(int,int,java.nio.IntBuffer) -> glGetLightxv
    void glGetMaterialfv(int,int,float[],int) -> glGetMaterialfv
    void glGetMaterialfv(int,int,java.nio.FloatBuffer) -> glGetMaterialfv
    void glGetMaterialxv(int,int,int[],int) -> glGetMaterialxv
    void glGetMaterialxv(int,int,java.nio.IntBuffer) -> glGetMaterialxv
    void glGetTexEnviv(int,int,int[],int) -> glGetTexEnviv
    void glGetTexEnviv(int,int,java.nio.IntBuffer) -> glGetTexEnviv
    void glGetTexEnvxv(int,int,int[],int) -> glGetTexEnvxv
    void glGetTexEnvxv(int,int,java.nio.IntBuffer) -> glGetTexEnvxv
    void glGetTexParameterfv(int,int,float[],int) -> glGetTexParameterfv
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,int[],int) -> glGetTexParameteriv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetTexParameterxv(int,int,int[],int) -> glGetTexParameterxv
    void glGetTexParameterxv(int,int,java.nio.IntBuffer) -> glGetTexParameterxv
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsTexture(int) -> glIsTexture
    void glPointParameterf(int,float) -> glPointParameterf
    void glPointParameterfv(int,float[],int) -> glPointParameterfv
    void glPointParameterfv(int,java.nio.FloatBuffer) -> glPointParameterfv
    void glPointParameterx(int,int) -> glPointParameterx
    void glPointParameterxv(int,int[],int) -> glPointParameterxv
    void glPointParameterxv(int,java.nio.IntBuffer) -> glPointParameterxv
    void glPointSizePointerOES(int,int,java.nio.Buffer) -> glPointSizePointerOES
    void glTexEnvi(int,int,int) -> glTexEnvi
    void glTexEnviv(int,int,int[],int) -> glTexEnviv
    void glTexEnviv(int,int,java.nio.IntBuffer) -> glTexEnviv
    void glTexParameterfv(int,int,float[],int) -> glTexParameterfv
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameterxv(int,int,int[],int) -> glTexParameterxv
    void glTexParameterxv(int,int,java.nio.IntBuffer) -> glTexParameterxv
com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo -> com.badlogic.gdx.backends.android.surfaceview.q:
    int mSize -> a
    int mType -> b
    int mStride -> c
    java.nio.Buffer mPointer -> d
    java.nio.ByteBuffer mTempByteBuffer -> e
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper this$0 -> f
    int sizeof(int) -> a
    void bindByteBuffer() -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> com.badlogic.gdx.backends.android.surfaceview.r:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> b
    void onMeasure(int,int) -> onMeasure
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.s:
    int EGL_OPENGL_ES2_BIT -> g
    int[] s_configAttribs2 -> h
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> com.badlogic.gdx.backends.android.surfaceview.t:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake -> com.badlogic.gdx.backends.android.surfaceview.u:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> a
    java.lang.Object sEglLock -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLThread mGLThread -> e
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> c
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper mGLWrapper -> d
    int mRenderMode -> f
    android.opengl.GLSurfaceView$Renderer mRenderer -> g
    int mSurfaceWidth -> h
    int mSurfaceHeight -> i
    boolean mHasSurface -> j
    void onMeasure(int,int) -> onMeasure
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> a
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> a
    void setEGLConfigChooser(int,int,int,int,int,int) -> a
    void setRenderMode(int) -> a
    void requestRender() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> b
    void onResume() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$BaseConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.v:
    int[] mConfigSpec -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$ComponentSizeChooser -> com.badlogic.gdx.backends.android.surfaceview.w:
    int[] mValue -> h
    int mRedSize -> b
    int mGreenSize -> c
    int mBlueSize -> d
    int mAlphaSize -> e
    int mDepthSize -> f
    int mStencilSize -> g
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$EglHelper -> com.badlogic.gdx.backends.android.surfaceview.x:
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake this$0 -> f
    void start() -> a
    void finish() -> b
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLThread -> com.badlogic.gdx.backends.android.surfaceview.y:
    boolean mDone -> b
    boolean mPaused -> c
    boolean mHasSurface -> d
    int mWidth -> e
    int mHeight -> f
    int mRenderMode -> g
    boolean mRequestRender -> h
    android.opengl.GLSurfaceView$Renderer mRenderer -> i
    java.util.ArrayList mEventQueue -> j
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$EglHelper mEglHelper -> k
    boolean mSizeChanged -> l
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake this$0 -> a
    void run() -> run
    void setRenderMode(int) -> a
    void requestRender() -> a
    void surfaceCreated() -> b
    void surfaceDestroyed() -> c
    void onPause() -> d
    void onResume() -> e
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> f
    java.lang.Runnable getEvent() -> g
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper -> com.badlogic.gdx.backends.android.surfaceview.z:
    javax.microedition.khronos.opengles.GL wrap$40ce139f() -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.aa:
com.badlogic.gdx.backends.android.surfaceview.GLWrapperBase -> com.badlogic.gdx.backends.android.surfaceview.ab:
    javax.microedition.khronos.opengles.GL10 mgl -> f
    javax.microedition.khronos.opengles.GL10Ext mgl10Ext -> g
    javax.microedition.khronos.opengles.GL11 mgl11 -> h
    javax.microedition.khronos.opengles.GL11Ext mgl11Ext -> i
    javax.microedition.khronos.opengles.GL11ExtensionPack mgl11ExtensionPack -> j
    void glGetPointerv(int,java.nio.Buffer[]) -> glGetPointerv
    void glColorPointer(int,int,int,int) -> glColorPointer
    void glNormalPointer(int,int,int) -> glNormalPointer
    void glTexCoordPointer(int,int,int,int) -> glTexCoordPointer
    void glVertexPointer(int,int,int,int) -> glVertexPointer
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glBindBuffer(int,int) -> glBindBuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    void glColor4ub(byte,byte,byte,byte) -> glColor4ub
    void glDeleteBuffers(int,int[],int) -> glDeleteBuffers
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glGenBuffers(int,int[],int) -> glGenBuffers
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGetBooleanv(int,boolean[],int) -> glGetBooleanv
    void glGetBooleanv(int,java.nio.IntBuffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,int[],int) -> glGetBufferParameteriv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetClipPlanef(int,float[],int) -> glGetClipPlanef
    void glGetClipPlanef(int,java.nio.FloatBuffer) -> glGetClipPlanef
    void glGetClipPlanex(int,int[],int) -> glGetClipPlanex
    void glGetClipPlanex(int,java.nio.IntBuffer) -> glGetClipPlanex
    void glGetFixedv(int,int[],int) -> glGetFixedv
    void glGetFixedv(int,java.nio.IntBuffer) -> glGetFixedv
    void glGetFloatv(int,float[],int) -> glGetFloatv
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetLightfv(int,int,float[],int) -> glGetLightfv
    void glGetLightfv(int,int,java.nio.FloatBuffer) -> glGetLightfv
    void glGetLightxv(int,int,int[],int) -> glGetLightxv
    void glGetLightxv(int,int,java.nio.IntBuffer) -> glGetLightxv
    void glGetMaterialfv(int,int,float[],int) -> glGetMaterialfv
    void glGetMaterialfv(int,int,java.nio.FloatBuffer) -> glGetMaterialfv
    void glGetMaterialxv(int,int,int[],int) -> glGetMaterialxv
    void glGetMaterialxv(int,int,java.nio.IntBuffer) -> glGetMaterialxv
    void glGetTexEnviv(int,int,int[],int) -> glGetTexEnviv
    void glGetTexEnviv(int,int,java.nio.IntBuffer) -> glGetTexEnviv
    void glGetTexEnvxv(int,int,int[],int) -> glGetTexEnvxv
    void glGetTexEnvxv(int,int,java.nio.IntBuffer) -> glGetTexEnvxv
    void glGetTexParameterfv(int,int,float[],int) -> glGetTexParameterfv
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,int[],int) -> glGetTexParameteriv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetTexParameterxv(int,int,int[],int) -> glGetTexParameterxv
    void glGetTexParameterxv(int,int,java.nio.IntBuffer) -> glGetTexParameterxv
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsTexture(int) -> glIsTexture
    void glPointParameterf(int,float) -> glPointParameterf
    void glPointParameterfv(int,float[],int) -> glPointParameterfv
    void glPointParameterfv(int,java.nio.FloatBuffer) -> glPointParameterfv
    void glPointParameterx(int,int) -> glPointParameterx
    void glPointParameterxv(int,int[],int) -> glPointParameterxv
    void glPointParameterxv(int,java.nio.IntBuffer) -> glPointParameterxv
    void glPointSizePointerOES(int,int,java.nio.Buffer) -> glPointSizePointerOES
    void glTexEnvi(int,int,int) -> glTexEnvi
    void glTexEnviv(int,int,int[],int) -> glTexEnviv
    void glTexEnviv(int,int,java.nio.IntBuffer) -> glTexEnviv
    void glTexParameterfv(int,int,float[],int) -> glTexParameterfv
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameterxv(int,int,int[],int) -> glTexParameterxv
    void glTexParameterxv(int,int,java.nio.IntBuffer) -> glTexParameterxv
    void glCurrentPaletteMatrixOES(int) -> glCurrentPaletteMatrixOES
    void glLoadPaletteFromModelViewMatrixOES() -> glLoadPaletteFromModelViewMatrixOES
    void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer) -> glMatrixIndexPointerOES
    void glMatrixIndexPointerOES(int,int,int,int) -> glMatrixIndexPointerOES
    void glWeightPointerOES(int,int,int,java.nio.Buffer) -> glWeightPointerOES
    void glWeightPointerOES(int,int,int,int) -> glWeightPointerOES
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.ac:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int mNumSamples -> g
    boolean mUseGL20 -> h
    int[] mConfigAttribs -> i
    int[] mValue -> j
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.ad:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> com.badlogic.gdx.backends.android.surfaceview.ae:
    int width -> a
    int height -> b
com.badlogic.gdx.files.FileHandle -> com.badlogic.gdx.c.a:
    java.io.File file -> b
    com.badlogic.gdx.Files$FileType type -> c
    java.lang.String path() -> e
    java.lang.String name() -> f
    java.lang.String extension() -> g
    java.lang.String nameWithoutExtension() -> h
    java.lang.String pathWithoutExtension() -> i
    com.badlogic.gdx.Files$FileType type() -> j
    java.io.File file() -> k
    java.io.InputStream read() -> b
    java.lang.String readString() -> l
    java.lang.String readString(java.lang.String) -> b
    byte[] readBytes() -> m
    java.io.OutputStream write$55d208a9() -> o
    void writeBytes$49638b58(byte[]) -> a
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    boolean exists() -> c
    boolean delete() -> n
    long length() -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.files.FileHandle$1 -> com.badlogic.gdx.c.b:
    int[] $SwitchMap$com$badlogic$gdx$Files$FileType -> a
com.badlogic.gdx.graphics.Camera -> com.badlogic.gdx.graphics.a:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    float far -> i
    float viewportWidth -> j
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Matrix4 tmpMat -> o
    com.badlogic.gdx.math.Vector3 tmpVec -> p
    com.badlogic.gdx.math.Vector3 right -> m
    com.badlogic.gdx.math.collision.Ray ray -> n
    void update() -> a
    void unproject(com.badlogic.gdx.math.Vector3) -> a
    void project(com.badlogic.gdx.math.Vector3) -> b
com.badlogic.gdx.graphics.Color -> com.badlogic.gdx.graphics.b:
    com.badlogic.gdx.graphics.Color CLEAR -> a
    com.badlogic.gdx.graphics.Color WHITE -> b
    com.badlogic.gdx.graphics.Color BLACK -> c
    com.badlogic.gdx.graphics.Color RED -> d
    com.badlogic.gdx.graphics.Color GREEN -> e
    com.badlogic.gdx.graphics.Color BLUE -> f
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> g
    com.badlogic.gdx.graphics.Color GRAY -> h
    com.badlogic.gdx.graphics.Color DARK_GRAY -> i
    com.badlogic.gdx.graphics.Color PINK -> j
    com.badlogic.gdx.graphics.Color ORANGE -> k
    com.badlogic.gdx.graphics.Color YELLOW -> l
    com.badlogic.gdx.graphics.Color MAGENTA -> m
    com.badlogic.gdx.graphics.Color CYAN -> n
    com.badlogic.gdx.graphics.Color tmp -> o
    float r -> p
    float g -> q
    float b -> r
    float a -> s
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color mul(com.badlogic.gdx.graphics.Color) -> b
    void clamp() -> b
    void set$4098370b(float,float,float) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    float toFloatBits() -> a
    int toIntBits() -> c
    java.lang.String toString() -> toString
    com.badlogic.gdx.graphics.Color valueOf(java.lang.String) -> a
    float toFloatBits(float,float,float,float) -> a
    int rgba8888(float,float,float,float) -> b
    int rgba8888(com.badlogic.gdx.graphics.Color) -> c
com.badlogic.gdx.graphics.FPSLogger -> com.badlogic.gdx.graphics.c:
    long startTime -> a
com.badlogic.gdx.graphics.GL10 -> com.badlogic.gdx.graphics.d:
    void glClientActiveTexture(int) -> a
    void glColorPointer(int,int,int,java.nio.Buffer) -> a
    void glDisableClientState(int) -> b
    void glEnableClientState(int) -> c
    void glLoadIdentity() -> a
    void glLoadMatrixf$49651d03(float[]) -> a
    void glMatrixMode(int) -> d
    void glNormalPointer$4dfa77fc(int,java.nio.Buffer) -> a
    void glTexCoordPointer$5efd7755(int,int,java.nio.Buffer) -> a
    void glVertexPointer$5efd7755(int,int,java.nio.Buffer) -> b
com.badlogic.gdx.graphics.GL11 -> com.badlogic.gdx.graphics.e:
    void glBindBuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData$5efd7755(int,int,java.nio.Buffer) -> c
    void glDeleteBuffers$63f29576(java.nio.IntBuffer) -> a
    void glGenBuffers$63f29576(java.nio.IntBuffer) -> b
    void glVertexPointer$3b4dfe4b(int,int,int) -> b
    void glColorPointer(int,int,int,int) -> a
    void glNormalPointer$4868d30e(int,int) -> b
    void glTexCoordPointer$3b4dfe4b(int,int,int) -> a
    void glDrawElements$3b4dfe4b$4868d30e(int) -> e
com.badlogic.gdx.graphics.GL20 -> com.badlogic.gdx.graphics.f:
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glCompileShader(int) -> glCompileShader
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteShader(int) -> glDeleteShader
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
com.badlogic.gdx.graphics.GLCommon -> com.badlogic.gdx.graphics.g:
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glPixelStorei(int,int) -> glPixelStorei
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glScissor(int,int,int,int) -> glScissor
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
com.badlogic.gdx.graphics.GLU -> com.badlogic.gdx.graphics.h:
com.badlogic.gdx.graphics.Mesh -> com.badlogic.gdx.graphics.i:
    java.util.Map meshes -> a
    boolean forceVBO -> b
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> c
    com.badlogic.gdx.graphics.glutils.IndexData indices -> d
    boolean autoBind -> e
    boolean isVertexArray -> f
    void setVertices$1cc109a0(float[],int) -> a
    void setIndices(short[]) -> a
    int getNumIndices() -> a
    void setAutoBind$1385ff() -> b
    void render$4868d30e(int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int) -> a
    void render$6e88a955(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int) -> a
    void dispose() -> e
    com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int) -> b
    com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes() -> c
    java.nio.FloatBuffer getVerticesBuffer() -> d
    java.nio.ShortBuffer getIndicesBuffer() -> f
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> a
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> a
    void clearAllMeshes(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
com.badlogic.gdx.graphics.Mesh$VertexDataType -> com.badlogic.gdx.graphics.j:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> a
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> b
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> c
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES -> d
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] values() -> values
    com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.OrthographicCamera -> com.badlogic.gdx.graphics.k:
    float zoom -> o
    com.badlogic.gdx.math.Vector3 tmp -> p
    void update() -> a
com.badlogic.gdx.graphics.Pixmap -> com.badlogic.gdx.graphics.l:
    com.badlogic.gdx.graphics.Pixmap$Blending blending -> c
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> a
    int color -> b
    boolean disposed -> d
    void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending) -> a
    void setFilter(com.badlogic.gdx.graphics.Pixmap$Filter) -> a
    void setColor$13462e() -> a
    void setColor(float,float,float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void drawPixmap$34373841(com.badlogic.gdx.graphics.Pixmap) -> a
    void drawPixmap$23690701$33bcba1(com.badlogic.gdx.graphics.Pixmap,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> a
    void fillCircle(int,int,int) -> a
    int getPixel(int,int) -> a
    int getWidth() -> b
    int getHeight() -> c
    void dispose() -> e
    void drawPixel$4868d30e(int,int) -> b
    int getGLFormat() -> d
    int getGLInternalFormat() -> f
    int getGLType() -> g
    java.nio.ByteBuffer getPixels() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    com.badlogic.gdx.graphics.Pixmap$Blending getBlending() -> j
com.badlogic.gdx.graphics.Pixmap$Blending -> com.badlogic.gdx.graphics.m:
    com.badlogic.gdx.graphics.Pixmap$Blending None -> a
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> b
    com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Blending[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.Pixmap$Filter -> com.badlogic.gdx.graphics.n:
    com.badlogic.gdx.graphics.Pixmap$Filter NearestNeighbour -> a
    com.badlogic.gdx.graphics.Pixmap$Filter BiLinear -> b
    com.badlogic.gdx.graphics.Pixmap$Filter[] $VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Filter[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Filter valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.Pixmap$Format -> com.badlogic.gdx.graphics.o:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> a
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> b
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> c
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> d
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> e
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> g
    com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES -> h
    com.badlogic.gdx.graphics.Pixmap$Format[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String) -> valueOf
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> a
com.badlogic.gdx.graphics.PixmapIO -> com.badlogic.gdx.graphics.p:
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> a
    void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap) -> a
com.badlogic.gdx.graphics.PixmapIO$CIM -> com.badlogic.gdx.graphics.q:
    byte[] writeBuffer -> a
    byte[] readBuffer -> b
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$PNG -> com.badlogic.gdx.graphics.r:
    int[] crcTable -> a
    byte[] write(com.badlogic.gdx.graphics.Pixmap) -> a
    byte[] createDataChunk(com.badlogic.gdx.graphics.Pixmap) -> b
    byte[] toChunk(java.lang.String,byte[]) -> a
    int updateCRC(int,byte[]) -> a
    void writeUncompressedDeflateBlock(java.io.DataOutputStream,boolean,byte[],int,char) -> a
    int calcADLER32(byte[]) -> a
com.badlogic.gdx.graphics.Texture -> com.badlogic.gdx.graphics.s:
    boolean enforcePotImages -> h
    com.badlogic.gdx.assets.AssetManager assetManager -> i
    java.util.Map managedTextures -> a
    java.nio.IntBuffer buffer -> j
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> e
    int glHandle -> f
    com.badlogic.gdx.graphics.TextureData data -> g
    void create(com.badlogic.gdx.graphics.TextureData) -> b
    int createGLHandle() -> h
    void load(com.badlogic.gdx.graphics.TextureData) -> a
    void reload() -> i
    void bind() -> a
    void draw$34373841(com.badlogic.gdx.graphics.Pixmap) -> a
    int getWidth() -> b
    int getHeight() -> c
    com.badlogic.gdx.graphics.TextureData getTextureData() -> d
    int getTextureObjectHandle() -> f
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> a
    void dispose() -> e
    void clearAllTextures(com.badlogic.gdx.Application) -> a
    void invalidateAllTextures(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
com.badlogic.gdx.graphics.Texture$1 -> com.badlogic.gdx.graphics.t:
    int val$refCount -> a
    void finishedLoading$190c2c84(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
com.badlogic.gdx.graphics.Texture$TextureFilter -> com.badlogic.gdx.graphics.u:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> g
    int glEnum -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String) -> valueOf
    boolean isMipMap() -> a
    int getGLEnum() -> b
com.badlogic.gdx.graphics.Texture$TextureWrap -> com.badlogic.gdx.graphics.v:
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> a
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> b
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> c
    int glEnum -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String) -> valueOf
    int getGLEnum() -> a
com.badlogic.gdx.graphics.TextureData -> com.badlogic.gdx.graphics.w:
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    boolean isPrepared() -> b
    void prepare() -> c
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    void consumeCompressedData() -> f
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
com.badlogic.gdx.graphics.TextureData$TextureDataType -> com.badlogic.gdx.graphics.x:
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType Compressed -> b
    com.badlogic.gdx.graphics.TextureData$TextureDataType Float -> c
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES -> d
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] values() -> values
    com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.VertexAttribute -> com.badlogic.gdx.graphics.y:
    int usage -> a
    int numComponents -> b
    int offset -> c
    java.lang.String alias -> d
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.VertexAttributes -> com.badlogic.gdx.graphics.z:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> b
    int vertexSize -> a
    int calculateOffsets() -> b
    void checkValidity() -> c
    int size() -> a
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.a:
    char[] xChars -> a
    char[] capChars -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> d
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> e
    boolean flipped -> f
    boolean integer -> g
    boolean ownsTexture -> h
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.CharSequence,float,float) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.CharSequence,float,float,int,int) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds getBounds(java.lang.CharSequence) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds getBounds(java.lang.CharSequence,int,int) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds getMultiLineBounds(java.lang.CharSequence) -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds getWrappedBounds(java.lang.CharSequence,float) -> a
    void computeGlyphAdvancesAndPositions(java.lang.CharSequence,com.badlogic.gdx.utils.FloatArray,com.badlogic.gdx.utils.FloatArray) -> a
    int computeVisibleGlyphs(java.lang.CharSequence,int,int,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> a
    com.badlogic.gdx.graphics.Color getColor() -> a
    void setScale(float,float) -> a
    float getScaleX() -> b
    float getScaleY() -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> d
    float getCapHeight() -> f
    float getDescent() -> g
    boolean isFlipped() -> h
    void dispose() -> e
    boolean containsCharacter(char) -> a
    boolean usesIntegerPositions() -> i
    int indexOf$4d218b0e(java.lang.CharSequence,int) -> a
    boolean isWhitespace(char) -> b
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.b:
    java.lang.String imagePath -> a
    com.badlogic.gdx.files.FileHandle fontFile -> b
    boolean flipped -> c
    float lineHeight -> d
    float capHeight -> e
    float ascent -> f
    float descent -> g
    float down -> h
    float scaleX -> i
    float scaleY -> j
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> k
    float spaceWidth -> l
    float xHeight -> m
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.c:
    int srcX -> a
    int srcY -> b
    int width -> c
    int height -> d
    float u -> e
    float v -> f
    float u2 -> g
    float v2 -> h
    int xoffset -> i
    int yoffset -> j
    int xadvance -> k
    byte[][] kerning -> l
    int getKerning(char) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment -> com.badlogic.gdx.graphics.g2d.d:
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment LEFT -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment CENTER -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment RIGHT -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment[] $VALUES -> d
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment[] values() -> values
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds -> com.badlogic.gdx.graphics.g2d.e:
    float width -> a
    float height -> b
    void set(com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds) -> a
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.badlogic.gdx.graphics.g2d.f:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    float[] vertices -> b
    int idx -> c
    float x -> d
    float y -> e
    float color -> f
    com.badlogic.gdx.graphics.Color tempColor -> g
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds textBounds -> h
    boolean integer -> i
    boolean fallbackMode -> j
    com.badlogic.gdx.graphics.g2d.BitmapFont fallbackFont -> k
    com.badlogic.gdx.graphics.g2d.harfbuzz.ComplexScriptLayout complexScriptLayout -> l
    void setPosition(float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.badlogic.gdx.graphics.Color getColor() -> a
    void clear() -> b
    void require(int) -> a
    float addToCache(java.lang.CharSequence,float,float,int,int) -> b
    java.util.List getGlyphsAfterShaping(java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    void addGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,float,float,float,float) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds addText(java.lang.CharSequence,float,float,int,int) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds setMultiLineText$30738de0(java.lang.CharSequence) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds setMultiLineText(java.lang.CharSequence,float,float,float,com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds addMultiLineText(java.lang.CharSequence,float,float,float,com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment) -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds setWrappedText(java.lang.CharSequence,float,float,float,com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment) -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds getBounds() -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont getFont() -> d
    void setUseIntegerPositions$1385ff() -> e
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long basePtr -> a
    int width -> b
    int height -> c
    int format -> d
    java.nio.ByteBuffer pixelPtr -> e
    long[] nativeData -> f
    void dispose() -> e
    void clear(int) -> a
    void setPixel$4868d30e(int,int) -> a
    int getPixel(int,int) -> b
    void fillRect(int,int,int,int,int) -> a
    void fillCircle(int,int,int,int) -> a
    void drawPixmap$1d45ff80$63552820(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int) -> a
    java.nio.ByteBuffer getPixels() -> a
    int getHeight() -> b
    int getWidth() -> c
    int getFormat() -> d
    int getGLInternalFormat() -> f
    int getGLFormat() -> g
    int getGLType() -> h
    java.nio.ByteBuffer load(long[],byte[],int,int,int) -> load
    java.nio.ByteBuffer newPixmap(long[],int,int,int) -> newPixmap
    void free(long) -> free
    void clear(long,int) -> clear
    void setPixel(long,int,int,int) -> setPixel
    int getPixel(long,int,int) -> getPixel
    void fillRect(long,int,int,int,int,int) -> fillRect
    void fillCircle(long,int,int,int,int) -> fillCircle
    void drawPixmap(long,long,int,int,int,int,int,int,int,int) -> drawPixmap
    void setBlend(int) -> setBlend
    void setScale(int) -> setScale
    java.lang.String getFailureReason() -> getFailureReason
com.badlogic.gdx.graphics.g2d.NinePatch -> com.badlogic.gdx.graphics.g2d.g:
    com.badlogic.gdx.graphics.Color tempColor -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    int bottomLeft -> c
    int bottomCenter -> d
    int bottomRight -> e
    int middleLeft -> f
    int middleCenter -> g
    int middleRight -> h
    int topLeft -> i
    int topCenter -> j
    int topRight -> k
    float leftWidth -> l
    float rightWidth -> m
    float middleWidth -> n
    float middleHeight -> o
    float topHeight -> p
    float bottomHeight -> q
    float[] vertices -> r
    int idx -> s
    com.badlogic.gdx.graphics.Color color -> t
    int padLeft -> u
    int padRight -> v
    int padTop -> w
    int padBottom -> x
    void load(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> a
    int add(com.badlogic.gdx.graphics.g2d.TextureRegion,float) -> a
    void set(int,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    float getTotalWidth() -> a
    float getTotalHeight() -> b
    void setPadding(int,int,int,int) -> a
    float getPadLeft() -> c
    float getPadRight() -> d
    float getPadTop() -> e
    float getPadBottom() -> f
com.badlogic.gdx.graphics.g2d.Sprite -> com.badlogic.gdx.graphics.g2d.h:
    float[] vertices -> a
    com.badlogic.gdx.graphics.Color color -> d
    float x -> e
    float y -> f
    float width -> b
    float height -> c
    float originX -> g
    float originY -> h
    float rotation -> i
    float scaleX -> j
    float scaleY -> k
    boolean dirty -> s
    void set(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> a
    void translate(float,float) -> b
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor$4098370b() -> a
    void setOrigin(float,float) -> c
    void rotate90(boolean) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    float getX() -> b
    float getY() -> c
    float getWidth() -> d
    float getHeight() -> e
    float getOriginX() -> f
    float getOriginY() -> g
    com.badlogic.gdx.graphics.Color getColor() -> h
    void setRegion(float,float,float,float) -> b
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.i:
    com.badlogic.gdx.graphics.Mesh mesh -> e
    com.badlogic.gdx.graphics.Mesh[] buffers -> f
    com.badlogic.gdx.graphics.Texture lastTexture -> g
    float invTexWidth -> h
    float invTexHeight -> i
    int idx -> j
    int currBufferIdx -> k
    float[] vertices -> l
    com.badlogic.gdx.math.Matrix4 transformMatrix -> m
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> n
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> o
    boolean drawing -> p
    boolean blendingDisabled -> q
    int blendSrcFunc -> r
    int blendDstFunc -> s
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> t
    boolean ownsShader -> u
    float color -> a
    com.badlogic.gdx.graphics.Color tempColor -> v
    int renderCalls -> b
    int totalRenderCalls -> c
    int maxSpritesInBatch -> d
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> w
    void begin() -> a
    void end() -> b
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> a
    com.badlogic.gdx.graphics.Color getColor() -> c
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> a
    void draw$1647d9c(com.badlogic.gdx.graphics.Texture,float[],int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> a
    void flush() -> d
    void renderMesh() -> h
    void dispose() -> e
    com.badlogic.gdx.math.Matrix4 getProjectionMatrix() -> f
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> g
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void setupMatrices() -> i
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> a
com.badlogic.gdx.graphics.g2d.SpriteCache -> com.badlogic.gdx.graphics.g2d.j:
    float[] tempVertices -> a
    com.badlogic.gdx.graphics.Mesh mesh -> b
    com.badlogic.gdx.math.Matrix4 transformMatrix -> c
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> d
    java.util.ArrayList caches -> e
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> f
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> g
    com.badlogic.gdx.graphics.g2d.SpriteCache$Cache currentCache -> h
    java.util.ArrayList textures -> i
    java.util.ArrayList counts -> j
    float color -> k
    com.badlogic.gdx.graphics.Color tempColor -> l
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> m
    void beginCache() -> a
    int endCache() -> b
    void add$1647d9c(com.badlogic.gdx.graphics.Texture,float[],int) -> a
    void add$15780067(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int) -> a
    void dispose() -> e
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache -> com.badlogic.gdx.graphics.g2d.k:
    int id -> a
    int offset -> b
    int maxCount -> c
    int textureCount -> d
    com.badlogic.gdx.graphics.Texture[] textures -> e
    int[] counts -> f
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.badlogic.gdx.graphics.g2d.l:
    java.lang.String[] tuple -> a
    java.util.HashSet textures -> c
    com.badlogic.gdx.utils.Array regions -> d
    java.util.Comparator indexComparator -> b
    void load(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData) -> a
    com.badlogic.gdx.utils.Array getRegions() -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String) -> a
    com.badlogic.gdx.utils.Array findRegions(java.lang.String) -> b
    void dispose() -> e
    java.lang.String readValue(java.io.BufferedReader) -> a
    int readTuple(java.io.BufferedReader) -> b
com.badlogic.gdx.graphics.g2d.TextureAtlas$1 -> com.badlogic.gdx.graphics.g2d.m:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.n:
    int index -> a
    java.lang.String name -> b
    float offsetX -> c
    float offsetY -> d
    int packedWidth -> e
    int packedHeight -> f
    int originalWidth -> g
    int originalHeight -> h
    boolean rotate -> i
    int[] splits -> j
    int[] pads -> k
    void flip(boolean,boolean) -> a
    float getRotatedPackedWidth() -> a
    float getRotatedPackedHeight() -> b
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite -> com.badlogic.gdx.graphics.g2d.o:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion region -> d
    float originalOffsetX -> e
    float originalOffsetY -> f
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> a
    void setOrigin(float,float) -> c
    void flip(boolean,boolean) -> a
    void rotate90(boolean) -> a
    float getX() -> b
    float getY() -> c
    float getOriginX() -> f
    float getOriginY() -> g
    float getWidth() -> d
    float getHeight() -> e
    float getWidthRatio() -> r
    float getHeightRatio() -> s
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.badlogic.gdx.graphics.g2d.p:
    com.badlogic.gdx.utils.Array pages -> a
    com.badlogic.gdx.utils.Array regions -> b
    com.badlogic.gdx.utils.Array getPages() -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page -> com.badlogic.gdx.graphics.g2d.q:
    com.badlogic.gdx.files.FileHandle textureFile -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    boolean useMipMaps -> c
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> h
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.badlogic.gdx.graphics.g2d.r:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page page -> a
    int index -> b
    java.lang.String name -> c
    float offsetX -> d
    float offsetY -> e
    int originalWidth -> f
    int originalHeight -> g
    boolean rotate -> h
    int left -> i
    int top -> j
    int width -> k
    int height -> l
    boolean flip -> m
    int[] splits -> n
    int[] pads -> o
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.s:
    com.badlogic.gdx.graphics.Texture texture -> l
    float u -> m
    float v -> n
    float u2 -> o
    float v2 -> p
    int regionWidth -> q
    int regionHeight -> r
    void setRegion(int,int,int,int) -> a
    void setRegion(float,float,float,float) -> b
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    com.badlogic.gdx.graphics.Texture getTexture() -> i
    float getU() -> j
    float getV() -> k
    float getU2() -> l
    float getV2() -> m
    int getRegionX() -> n
    int getRegionY() -> o
    int getRegionWidth() -> p
    int getRegionHeight() -> q
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g2d.harfbuzz.ComplexScriptLayout -> com.badlogic.gdx.graphics.g2d.harfbuzz.ComplexScriptLayout:
    int[] jniGetGlyphsForText(java.lang.String) -> jniGetGlyphsForText
    int[] getGlyphsAfterShaping(java.lang.CharSequence,int,int) -> a
com.badlogic.gdx.graphics.g2d.tiled.SimpleTileAtlas -> com.badlogic.gdx.graphics.g2d.a.a:
com.badlogic.gdx.graphics.g2d.tiled.TileAtlas -> com.badlogic.gdx.graphics.g2d.a.b:
    com.badlogic.gdx.utils.IntMap regionsMap -> a
    java.util.HashSet textures -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(int) -> a
    void dispose() -> e
    java.lang.String removeExtension(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
com.badlogic.gdx.graphics.g2d.tiled.TileMapRenderer -> com.badlogic.gdx.graphics.g2d.a.c:
    com.badlogic.gdx.graphics.g2d.SpriteCache cache -> d
    int[][][] normalCacheId -> e
    int[][][] blendedCacheId -> f
    com.badlogic.gdx.graphics.g2d.tiled.TileAtlas atlas -> g
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap map -> h
    int mapHeightUnits -> i
    int mapWidthUnits -> j
    int tileWidth -> k
    int tileHeight -> l
    float unitsPerTileX -> m
    float unitsPerTileY -> n
    int tilesPerBlockX -> o
    int tilesPerBlockY -> p
    float unitsPerBlockX -> q
    float unitsPerBlockY -> r
    int[] allLayers -> s
    boolean isSimpleTileAtlas -> t
    com.badlogic.gdx.utils.IntArray blendedTiles -> u
    com.badlogic.gdx.math.Vector3 tmp -> a
    float overdrawX -> b
    float overdrawY -> c
    void init$cda5088(int[][][],com.badlogic.gdx.graphics.g2d.tiled.TileAtlas,int,int,float,float,com.badlogic.gdx.utils.IntArray,int,int) -> a
    int addBlock(int[][],int,int,boolean) -> a
    void dispose() -> e
    com.badlogic.gdx.utils.IntArray createFromCSV(java.lang.String) -> a
com.badlogic.gdx.graphics.g2d.tiled.TileSet -> com.badlogic.gdx.graphics.g2d.a.d:
    int firstgid -> a
    int tileWidth -> b
    int tileHeight -> c
    int margin -> d
    int spacing -> e
    java.lang.String imageName -> f
    java.lang.String name -> g
com.badlogic.gdx.graphics.g2d.tiled.TiledLayer -> com.badlogic.gdx.graphics.g2d.a.e:
    java.lang.String name -> a
    java.util.HashMap properties -> b
    int[][] tiles -> c
com.badlogic.gdx.graphics.g2d.tiled.TiledLoader -> com.badlogic.gdx.graphics.g2d.a.f:
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap createMap(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap createMap$481b2e76(com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1 -> com.badlogic.gdx.graphics.g2d.a.g:
    java.util.Stack currBranch -> a
    boolean awaitingData -> b
    com.badlogic.gdx.graphics.g2d.tiled.TiledLayer currLayer -> c
    int currLayerWidth -> d
    int currLayerHeight -> e
    com.badlogic.gdx.graphics.g2d.tiled.TileSet currTileSet -> f
    com.badlogic.gdx.graphics.g2d.tiled.TiledObjectGroup currObjectGroup -> g
    com.badlogic.gdx.graphics.g2d.tiled.TiledObject currObject -> h
    int currTile -> i
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Polyline polyline -> j
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Polyline polygon -> k
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Property currProperty -> l
    java.lang.String encoding -> m
    java.lang.String dataString -> n
    java.lang.String compression -> o
    byte[] data -> p
    int dataCounter -> q
    int row -> r
    int col -> s
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap val$map -> t
    void open(java.lang.String) -> a
    void attribute(java.lang.String,java.lang.String) -> a
    void text(java.lang.String) -> b
    void close() -> a
    void putPolyLine(com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Polyline) -> a
    void putProperty(com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Property) -> a
    void fromCSV() -> c
    void arrangeData() -> d
    void unZlib() -> e
com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Polyline -> com.badlogic.gdx.graphics.g2d.a.h:
    java.lang.String name -> a
    java.lang.String points -> b
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1 this$0 -> c
com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Property -> com.badlogic.gdx.graphics.g2d.a.i:
    java.lang.String parentType -> a
    java.lang.String name -> b
    java.lang.String value -> c
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1 this$0 -> d
com.badlogic.gdx.graphics.g2d.tiled.TiledMap -> com.badlogic.gdx.graphics.g2d.a.j:
    java.util.ArrayList layers -> a
    java.util.ArrayList objectGroups -> b
    java.util.ArrayList tileSets -> c
    java.util.HashMap properties -> d
    java.util.ArrayList tileProperties -> k
    com.badlogic.gdx.files.FileHandle tmxFile -> e
    java.lang.String orientation -> f
    int width -> g
    int height -> h
    int tileWidth -> i
    int tileHeight -> j
    void setTileProperty(int,java.lang.String,java.lang.String) -> a
com.badlogic.gdx.graphics.g2d.tiled.TiledMap$TileProperty -> com.badlogic.gdx.graphics.g2d.a.k:
    int id -> a
    java.util.HashMap propertyMap -> b
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap this$0 -> c
com.badlogic.gdx.graphics.g2d.tiled.TiledObject -> com.badlogic.gdx.graphics.g2d.a.l:
    java.lang.String name -> a
    java.lang.String type -> b
    int x -> c
    int y -> d
    int width -> e
    int height -> f
    int gid -> g
    java.util.HashMap properties -> h
    java.lang.String polyline -> i
    java.lang.String polygon -> j
com.badlogic.gdx.graphics.g2d.tiled.TiledObjectGroup -> com.badlogic.gdx.graphics.g2d.a.m:
    int width -> a
    int height -> b
    java.lang.String name -> c
    java.util.HashMap properties -> d
    java.util.ArrayList objects -> e
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int PKM_HEADER_SIZE -> a
    int ETC1_RGB8_OES -> b
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> a
    int getWidthPKM(java.nio.ByteBuffer,int) -> getWidthPKM
    int getHeightPKM(java.nio.ByteBuffer,int) -> getHeightPKM
    boolean isValidPKM(java.nio.ByteBuffer,int) -> isValidPKM
    void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> decodeImage
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.a:
    int width -> a
    int height -> b
    java.nio.ByteBuffer compressedData -> c
    int dataOffset -> d
    boolean hasPKMHeader() -> a
    void dispose() -> e
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.b:
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    boolean useMipMaps -> c
    int width -> d
    int height -> e
    boolean isPrepared -> f
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    boolean isPrepared() -> b
    void prepare() -> c
    void consumeCompressedData() -> f
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.badlogic.gdx.graphics.glutils.c:
    boolean copyToPOT -> a
    com.badlogic.gdx.files.FileHandle file -> b
    int width -> c
    int height -> d
    com.badlogic.gdx.graphics.Pixmap$Format format -> e
    com.badlogic.gdx.graphics.Pixmap pixmap -> f
    boolean useMipMaps -> g
    boolean isPrepared -> h
    boolean isPrepared() -> b
    void prepare() -> c
    com.badlogic.gdx.graphics.Pixmap ensurePot(com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    void consumeCompressedData() -> f
com.badlogic.gdx.graphics.glutils.FrameBuffer -> com.badlogic.gdx.graphics.glutils.d:
    java.util.Map buffers -> f
    com.badlogic.gdx.graphics.Texture colorTexture -> a
    int defaultFramebufferHandle -> g
    boolean defaultFramebufferHandleInitialized -> h
    int framebufferHandle -> i
    int depthbufferHandle -> j
    int width -> b
    int height -> c
    boolean hasDepth -> d
    com.badlogic.gdx.graphics.Pixmap$Format format -> e
    void dispose() -> e
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> a
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> a
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> com.badlogic.gdx.graphics.glutils.e:
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void vertex$483d242b(float,float) -> a
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10 -> com.badlogic.gdx.graphics.glutils.f:
    int primitiveType -> a
    float[] positions -> b
    java.nio.FloatBuffer positionsBuffer -> c
    float[] colors -> d
    java.nio.FloatBuffer colorsBuffer -> e
    float[] normals -> f
    java.nio.FloatBuffer normalsBuffer -> g
    float[] texCoords -> h
    java.nio.FloatBuffer texCoordsBuffer -> i
    int idxPos -> j
    int idxCols -> k
    int idxNors -> l
    int idxTexCoords -> m
    boolean hasCols -> n
    boolean hasNors -> o
    boolean hasTexCoords -> p
    int maxVertices -> q
    int numVertices -> r
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void vertex$483d242b(float,float) -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void end() -> a
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> com.badlogic.gdx.graphics.glutils.g:
    int primitiveType -> a
    int vertexIdx -> b
    int numSetTexCoords -> c
    int maxVertices -> d
    int numVertices -> e
    com.badlogic.gdx.graphics.Mesh mesh -> f
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> g
    boolean ownsShader -> h
    int numTexCoords -> i
    int vertexSize -> j
    int normalOffset -> k
    int colorOffset -> l
    int texCoordOffset -> m
    com.badlogic.gdx.math.Matrix4 projModelView -> n
    float[] vertices -> o
    com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes$652c10e4() -> d
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void vertex$483d242b(float,float) -> a
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
com.badlogic.gdx.graphics.glutils.IndexArray -> com.badlogic.gdx.graphics.glutils.h:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices$1c09d813(short[],int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> d
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> e
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.badlogic.gdx.graphics.glutils.i:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isDirty -> f
    boolean isBound -> g
    int usage -> h
    int createBufferObject() -> h
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices$1c09d813(short[],int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> d
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> e
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.j:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isDirty -> f
    boolean isBound -> g
    int usage -> h
    int createBufferObject() -> h
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices$1c09d813(short[],int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> d
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> e
com.badlogic.gdx.graphics.glutils.IndexData -> com.badlogic.gdx.graphics.glutils.k:
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices$1c09d813(short[],int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> d
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> e
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.badlogic.gdx.graphics.glutils.l:
    boolean useHWMipMap -> a
    void generateMipMap(com.badlogic.gdx.graphics.Pixmap,int,int,boolean) -> a
    void generateMipMapCPU(com.badlogic.gdx.graphics.Pixmap,int,int,boolean) -> b
com.badlogic.gdx.graphics.glutils.PixmapTextureData -> com.badlogic.gdx.graphics.glutils.m:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean useMipMaps -> c
    boolean disposePixmap -> d
    boolean disposePixmap() -> e
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    void consumeCompressedData() -> f
    boolean isPrepared() -> b
    void prepare() -> c
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.badlogic.gdx.graphics.glutils.n:
    boolean pedantic -> a
    com.badlogic.gdx.utils.ObjectMap shaders -> e
    java.lang.String log -> f
    boolean isCompiled -> g
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> h
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> i
    java.lang.String[] uniformNames -> j
    com.badlogic.gdx.utils.ObjectIntMap attributes -> k
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> l
    java.lang.String[] attributeNames -> m
    int program -> n
    int vertexShaderHandle -> o
    int fragmentShaderHandle -> p
    java.nio.FloatBuffer matrix -> q
    java.lang.String vertexShaderSource -> r
    java.lang.String fragmentShaderSource -> s
    boolean invalidated -> t
    java.nio.ByteBuffer buffer -> u
    java.nio.FloatBuffer floatBuffer -> v
    java.nio.IntBuffer intBuffer -> w
    int refCount -> x
    java.nio.IntBuffer intbuf -> b
    java.nio.IntBuffer params -> c
    java.nio.IntBuffer type -> d
    void compileShaders(java.lang.String,java.lang.String) -> a
    int loadShader(int,java.lang.String) -> a
    java.lang.String getLog() -> a
    boolean isCompiled() -> b
    int fetchAttributeLocation(java.lang.String) -> c
    int fetchUniformLocation(java.lang.String) -> d
    void setUniformi(java.lang.String,int) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> a
    void setVertexAttribute(java.lang.String,int,int,boolean,int,java.nio.Buffer) -> a
    void setVertexAttribute(java.lang.String,int,int,boolean,int,int) -> a
    void begin() -> c
    void end() -> d
    void dispose() -> e
    void disableVertexAttribute(java.lang.String) -> a
    void enableVertexAttribute(java.lang.String) -> b
    void checkManaged() -> g
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> a
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> f
    void fetchUniforms() -> h
    void fetchAttributes() -> i
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> com.badlogic.gdx.graphics.glutils.o:
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer -> a
    boolean matrixDirty -> b
    com.badlogic.gdx.math.Matrix4 projView -> c
    com.badlogic.gdx.math.Matrix4 transform -> d
    com.badlogic.gdx.math.Matrix4 combined -> e
    com.badlogic.gdx.math.Matrix4 tmp -> f
    com.badlogic.gdx.graphics.Color color -> g
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType currType -> h
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void identity() -> a
    void translate$483d242b(float,float) -> a
    void rotate$4098370b(float) -> a
    void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> a
    void line$4098370b(float,float) -> b
    void rect(float,float,float,float) -> a
    void filledRect(float,float,float,float) -> b
    void filledCircle(float,float,float) -> a
    void filledTriangle$7b59a84b(float,float,float,float,float) -> a
    void checkDirty() -> c
    void checkFlush(int) -> a
    void end() -> b
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> com.badlogic.gdx.graphics.glutils.p:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> b
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Rectangle -> c
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType FilledRectangle -> d
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Box -> e
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Circle -> f
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType FilledCircle -> g
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Triangle -> h
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType FilledTriangle -> i
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Cone -> j
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType FilledCone -> k
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Curve -> l
    int glType -> m
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] $VALUES -> n
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] values() -> values
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType valueOf(java.lang.String) -> valueOf
    int getGlType() -> a
com.badlogic.gdx.graphics.glutils.VertexArray -> com.badlogic.gdx.graphics.glutils.q:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean isBound -> d
    void dispose() -> e
    java.nio.FloatBuffer getBuffer() -> a
    int getNumVertices() -> b
    void setVertices$1cc109a0(float[],int) -> a
    void bind() -> c
    void unbind() -> d
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.badlogic.gdx.graphics.glutils.r:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    int createBufferObject() -> h
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices$1cc109a0(float[],int) -> a
    void bind() -> c
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void unbind() -> d
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    void invalidate() -> g
    void dispose() -> e
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.s:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    boolean isDirect -> f
    boolean isStatic -> g
    int usage -> h
    boolean isDirty -> i
    boolean isBound -> j
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices$1cc109a0(float[],int) -> a
    void bind() -> c
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void unbind() -> d
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    void dispose() -> e
com.badlogic.gdx.graphics.glutils.VertexData -> com.badlogic.gdx.graphics.glutils.t:
    int getNumVertices() -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
    void setVertices$1cc109a0(float[],int) -> a
    java.nio.FloatBuffer getBuffer() -> a
    void bind() -> c
    void unbind() -> d
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    void dispose() -> e
com.badlogic.gdx.input.GestureDetector -> com.badlogic.gdx.d.a:
    com.badlogic.gdx.input.GestureDetector$GestureListener listener -> a
    float tapSquareSize -> d
    long tapCountInterval -> e
    float longPressSeconds -> f
    long maxFlingDelay -> g
    boolean inTapSquare -> h
    int tapCount -> i
    long lastTapTime -> j
    float lastTapX -> k
    float lastTapY -> l
    int lastTapButton -> m
    int lastTapPointer -> n
    boolean longPressFired -> b
    boolean pinching -> o
    boolean panning -> p
    com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker -> q
    float tapSquareCenterX -> r
    float tapSquareCenterY -> s
    long gestureStartTime -> t
    com.badlogic.gdx.math.Vector2 pointer1 -> c
    com.badlogic.gdx.math.Vector2 pointer2 -> u
    com.badlogic.gdx.math.Vector2 initialPointer1 -> v
    com.badlogic.gdx.math.Vector2 initialPointer2 -> w
    com.badlogic.gdx.utils.Timer$Task longPressTask -> x
    boolean touchDown(int,int,int,int) -> a
    boolean touchDown$4096cea7(float,float,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchDragged(float,float,int) -> b
    boolean touchUp(int,int,int,int) -> b
    boolean touchUp(float,float,int,int) -> a
    boolean isPanning() -> a
    boolean isWithinTapSquare(float,float,float,float) -> a
com.badlogic.gdx.input.GestureDetector$1 -> com.badlogic.gdx.d.b:
    com.badlogic.gdx.input.GestureDetector this$0 -> a
    void run() -> run
com.badlogic.gdx.input.GestureDetector$GestureAdapter -> com.badlogic.gdx.d.c:
    boolean tap$4096cea7(float,float) -> a
    boolean longPress(float,float) -> b
    boolean fling$483d2f72(float,float) -> c
    boolean pan(float,float,float,float) -> a
    boolean zoom$2548a39() -> a
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$GestureListener -> com.badlogic.gdx.d.d:
    boolean tap$4096cea7(float,float) -> a
    boolean longPress(float,float) -> b
    boolean fling$483d2f72(float,float) -> c
    boolean pan(float,float,float,float) -> a
    boolean zoom$2548a39() -> a
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$VelocityTracker -> com.badlogic.gdx.d.e:
    int sampleSize -> a
    float lastX -> b
    float lastY -> c
    float deltaX -> d
    float deltaY -> e
    long lastTime -> f
    int numSamples -> g
    float[] meanX -> h
    float[] meanY -> i
    long[] meanTime -> j
    void start(float,float,long) -> a
    void update(float,float,long) -> b
    float getVelocityX() -> a
    float getVelocityY() -> b
    float getAverage(float[],int) -> a
    long getAverage(long[],int) -> a
com.badlogic.gdx.math.Frustum -> com.badlogic.gdx.math.a:
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> a
    float[] clipSpacePlanePointsArray -> b
    com.badlogic.gdx.math.Plane[] planes -> c
    com.badlogic.gdx.math.Vector3[] planePoints -> d
    float[] planePointsArray -> e
    void update(com.badlogic.gdx.math.Matrix4) -> a
com.badlogic.gdx.math.Interpolation -> com.badlogic.gdx.math.b:
    com.badlogic.gdx.math.Interpolation linear -> a
    com.badlogic.gdx.math.Interpolation fade -> b
    com.badlogic.gdx.math.Interpolation$Pow pow2 -> c
    com.badlogic.gdx.math.Interpolation$PowIn pow2In -> d
    com.badlogic.gdx.math.Interpolation$PowOut pow2Out -> e
    com.badlogic.gdx.math.Interpolation$Pow pow3 -> f
    com.badlogic.gdx.math.Interpolation$PowIn pow3In -> g
    com.badlogic.gdx.math.Interpolation$PowOut pow3Out -> h
    com.badlogic.gdx.math.Interpolation$Pow pow4 -> i
    com.badlogic.gdx.math.Interpolation$PowIn pow4In -> j
    com.badlogic.gdx.math.Interpolation$PowOut pow4Out -> k
    com.badlogic.gdx.math.Interpolation$Pow pow5 -> l
    com.badlogic.gdx.math.Interpolation$PowIn pow5In -> m
    com.badlogic.gdx.math.Interpolation$PowOut pow5Out -> n
    com.badlogic.gdx.math.Interpolation sine -> o
    com.badlogic.gdx.math.Interpolation sineIn -> p
    com.badlogic.gdx.math.Interpolation sineOut -> q
    com.badlogic.gdx.math.Interpolation exp10 -> r
    com.badlogic.gdx.math.Interpolation exp10In -> s
    com.badlogic.gdx.math.Interpolation exp10Out -> t
    com.badlogic.gdx.math.Interpolation exp5 -> u
    com.badlogic.gdx.math.Interpolation exp5In -> v
    com.badlogic.gdx.math.Interpolation exp5Out -> w
    com.badlogic.gdx.math.Interpolation circle -> x
    com.badlogic.gdx.math.Interpolation circleIn -> y
    com.badlogic.gdx.math.Interpolation circleOut -> z
    com.badlogic.gdx.math.Interpolation$Elastic elastic -> A
    com.badlogic.gdx.math.Interpolation$Elastic elasticIn -> B
    com.badlogic.gdx.math.Interpolation$Elastic elasticOut -> C
    com.badlogic.gdx.math.Interpolation swing -> D
    com.badlogic.gdx.math.Interpolation swingIn -> E
    com.badlogic.gdx.math.Interpolation swingOut -> F
    com.badlogic.gdx.math.Interpolation bounce -> G
    com.badlogic.gdx.math.Interpolation bounceIn -> H
    com.badlogic.gdx.math.Interpolation bounceOut -> I
    float apply(float) -> a
    float apply(float,float,float) -> a
com.badlogic.gdx.math.Interpolation$1 -> com.badlogic.gdx.math.c:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$2 -> com.badlogic.gdx.math.d:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$3 -> com.badlogic.gdx.math.e:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$4 -> com.badlogic.gdx.math.f:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$5 -> com.badlogic.gdx.math.g:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$6 -> com.badlogic.gdx.math.h:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$7 -> com.badlogic.gdx.math.i:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$8 -> com.badlogic.gdx.math.j:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Bounce -> com.badlogic.gdx.math.k:
    float out(float) -> b
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceIn -> com.badlogic.gdx.math.l:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceOut -> com.badlogic.gdx.math.m:
    float[] widths -> J
    float[] heights -> K
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Elastic -> com.badlogic.gdx.math.n:
    float value -> J
    float power -> K
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticIn -> com.badlogic.gdx.math.o:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticOut -> com.badlogic.gdx.math.p:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Exp -> com.badlogic.gdx.math.q:
    float value -> J
    float power -> K
    float min -> L
    float scale -> M
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpIn -> com.badlogic.gdx.math.r:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpOut -> com.badlogic.gdx.math.s:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Pow -> com.badlogic.gdx.math.t:
    int power -> J
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowIn -> com.badlogic.gdx.math.u:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowOut -> com.badlogic.gdx.math.v:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Swing -> com.badlogic.gdx.math.w:
    float scale -> J
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingIn -> com.badlogic.gdx.math.x:
    float scale -> J
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingOut -> com.badlogic.gdx.math.y:
    float scale -> J
    float apply(float) -> a
com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.math.z:
    int ATAN2_DIM -> a
    float INV_ATAN2_DIM_MINUS_1 -> c
    java.util.Random random -> b
    double BIG_ENOUGH_CEIL -> d
    float sin(float) -> a
    float cos(float) -> b
    float sinDeg(float) -> c
    float cosDeg(float) -> d
    float atan2(float,float) -> a
    int random(int) -> a
    int random(int,int) -> a
    boolean randomBoolean() -> a
    float random() -> b
    float random(float,float) -> b
    int nextPowerOfTwo(int) -> b
    boolean isPowerOfTwo(int) -> c
    float clamp(float,float,float) -> a
    int ceil(float) -> e
com.badlogic.gdx.math.MathUtils$Atan2 -> com.badlogic.gdx.math.aa:
    float[] table -> a
com.badlogic.gdx.math.MathUtils$Cos -> com.badlogic.gdx.math.ab:
    float[] table -> a
com.badlogic.gdx.math.MathUtils$Sin -> com.badlogic.gdx.math.ac:
    float[] table -> a
com.badlogic.gdx.math.Matrix3 -> com.badlogic.gdx.math.ad:
    float[] val -> a
    float[] tmp -> b
    com.badlogic.gdx.math.Matrix3 idt() -> a
    com.badlogic.gdx.math.Matrix3 mul(com.badlogic.gdx.math.Matrix3) -> a
    com.badlogic.gdx.math.Matrix3 setToTranslation(float,float) -> a
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Matrix3 set(com.badlogic.gdx.math.Matrix3) -> b
    com.badlogic.gdx.math.Matrix3 trn(float,float) -> b
    com.badlogic.gdx.math.Matrix3 translate(float,float) -> c
    com.badlogic.gdx.math.Matrix3 rotate(float) -> a
    com.badlogic.gdx.math.Matrix3 scale(float,float) -> d
    void mul(float[],float[]) -> a
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    float[] tmp -> a
    float[] val -> b
    com.badlogic.gdx.math.Quaternion quat -> c
    com.badlogic.gdx.math.Vector3 tmpV -> d
    com.badlogic.gdx.math.Vector3 l_vez -> e
    com.badlogic.gdx.math.Vector3 l_vex -> f
    com.badlogic.gdx.math.Vector3 l_vey -> g
    com.badlogic.gdx.math.Vector3 tmpVec -> h
    com.badlogic.gdx.math.Matrix4 tmpMat -> i
    com.badlogic.gdx.math.Vector3 right -> j
    com.badlogic.gdx.math.Vector3 tmpForward -> k
    com.badlogic.gdx.math.Vector3 tmpUp -> l
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> b
    com.badlogic.gdx.math.Matrix4 idt() -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho2D$7167aba2(float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix3) -> a
    void mul(float[],float[]) -> mul
    void prj(float[],float[],int,int,int) -> prj
    boolean inv(float[]) -> inv
    com.badlogic.gdx.math.Matrix4 translate$230952ec(float,float) -> b
    com.badlogic.gdx.math.Matrix4 rotate$7167aba2(float) -> a
com.badlogic.gdx.math.Plane -> com.badlogic.gdx.math.ae:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Quaternion -> com.badlogic.gdx.math.af:
    com.badlogic.gdx.math.Quaternion tmp1 -> e
    com.badlogic.gdx.math.Quaternion tmp2 -> f
    float x -> a
    float y -> b
    float z -> c
    float w -> d
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> a
    com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Vector3,float) -> a
    java.lang.String toString() -> toString
    void toMatrix(float[]) -> a
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Rectangle -> com.badlogic.gdx.math.ag:
    com.badlogic.gdx.math.Rectangle tmp -> a
    com.badlogic.gdx.math.Rectangle tmp2 -> b
    float x -> c
    float y -> d
    float width -> e
    float height -> f
    void set(float,float,float,float) -> a
    boolean contains(float,float) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.math.ah:
    com.badlogic.gdx.math.Vector2 tmp -> a
    com.badlogic.gdx.math.Vector2 tmp2 -> b
    com.badlogic.gdx.math.Vector2 tmp3 -> c
    com.badlogic.gdx.math.Vector2 X -> d
    com.badlogic.gdx.math.Vector2 Y -> e
    com.badlogic.gdx.math.Vector2 Zero -> f
    float x -> g
    float y -> h
    float len() -> a
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    com.badlogic.gdx.math.Vector2 sub(com.badlogic.gdx.math.Vector2) -> b
    com.badlogic.gdx.math.Vector2 nor() -> b
    com.badlogic.gdx.math.Vector2 add(float,float) -> b
    com.badlogic.gdx.math.Vector2 mul(float) -> a
    float dst(com.badlogic.gdx.math.Vector2) -> c
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Vector2 sub(float,float) -> c
    float angle() -> c
    com.badlogic.gdx.math.Vector2 rotate(float) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Vector3 -> com.badlogic.gdx.math.ai:
    float x -> a
    float y -> b
    float z -> c
    com.badlogic.gdx.math.Vector3 tmp -> d
    com.badlogic.gdx.math.Vector3 tmp2 -> e
    com.badlogic.gdx.math.Vector3 tmp3 -> f
    com.badlogic.gdx.math.Vector3 X -> g
    com.badlogic.gdx.math.Vector3 Y -> h
    com.badlogic.gdx.math.Vector3 Z -> i
    com.badlogic.gdx.math.Vector3 Zero -> j
    com.badlogic.gdx.math.Matrix4 tmpMat -> k
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> a
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector3 cpy() -> a
    com.badlogic.gdx.math.Vector3 tmp() -> b
    com.badlogic.gdx.math.Vector3 tmp2() -> c
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.Vector3 add(float,float,float) -> b
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> c
    com.badlogic.gdx.math.Vector3 mul(float) -> a
    float len() -> d
    com.badlogic.gdx.math.Vector3 nor() -> e
    float dot(com.badlogic.gdx.math.Vector3) -> d
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> e
    com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.WindowedMean -> com.badlogic.gdx.math.aj:
    float[] values -> a
    int added_values -> b
    int last_value -> c
    float mean -> d
    boolean dirty -> e
    void clear() -> a
    void addValue(float) -> a
    float getMean() -> b
com.badlogic.gdx.math.collision.Ray -> com.badlogic.gdx.math.a.a:
    com.badlogic.gdx.math.Vector3 origin -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 tmp -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.net.NetJavaImpl -> com.badlogic.gdx.e.a:
    java.util.concurrent.ExecutorService executorService -> a
com.badlogic.gdx.net.Socket -> com.badlogic.gdx.e.b:
    java.io.InputStream getInputStream() -> a
    java.io.OutputStream getOutputStream() -> b
com.badlogic.gdx.net.SocketHints -> com.badlogic.gdx.e.c:
com.badlogic.gdx.physics.box2d.Body -> com.badlogic.gdx.physics.box2d.Body:
    long addr -> a
    float[] tmp -> g
    com.badlogic.gdx.physics.box2d.World world -> h
    java.util.ArrayList fixtures -> i
    java.util.ArrayList joints -> b
    java.lang.Object userData -> j
    com.badlogic.gdx.physics.box2d.Transform transform -> k
    com.badlogic.gdx.math.Vector2 position -> l
    com.badlogic.gdx.math.Vector2 worldCenter -> m
    com.badlogic.gdx.math.Vector2 localCenter -> n
    com.badlogic.gdx.math.Vector2 linearVelocity -> o
    com.badlogic.gdx.physics.box2d.MassData massData -> p
    com.badlogic.gdx.math.Vector2 localPoint -> q
    com.badlogic.gdx.math.Vector2 worldVector -> r
    com.badlogic.gdx.math.Vector2 localPoint2 -> c
    com.badlogic.gdx.math.Vector2 localVector -> d
    com.badlogic.gdx.math.Vector2 linVelWorld -> e
    com.badlogic.gdx.math.Vector2 linVelLoc -> f
    void reset(long) -> a
    com.badlogic.gdx.physics.box2d.Fixture createFixture(com.badlogic.gdx.physics.box2d.FixtureDef) -> a
    long jniCreateFixture(long,long,float,float,float,boolean,short,short,short) -> jniCreateFixture
    void setTransform(com.badlogic.gdx.math.Vector2,float) -> a
    void jniSetTransform(long,float,float,float) -> jniSetTransform
    com.badlogic.gdx.math.Vector2 getPosition() -> a
    void jniGetPosition(long,float[]) -> jniGetPosition
    float getAngle() -> b
    float jniGetAngle(long) -> jniGetAngle
    com.badlogic.gdx.math.Vector2 getWorldCenter() -> c
    void jniGetWorldCenter(long,float[]) -> jniGetWorldCenter
    void setLinearVelocity(com.badlogic.gdx.math.Vector2) -> a
    void setLinearVelocity$2548a35() -> d
    void jniSetLinearVelocity(long,float,float) -> jniSetLinearVelocity
    com.badlogic.gdx.math.Vector2 getLinearVelocity() -> e
    void jniGetLinearVelocity(long,float[]) -> jniGetLinearVelocity
    void setAngularVelocity(float) -> a
    void jniSetAngularVelocity(long,float) -> jniSetAngularVelocity
    float getAngularVelocity() -> f
    float jniGetAngularVelocity(long) -> jniGetAngularVelocity
    void applyForce(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    void jniApplyForce(long,float,float,float,float) -> jniApplyForce
    com.badlogic.gdx.math.Vector2 getWorldPoint(com.badlogic.gdx.math.Vector2) -> b
    void jniGetWorldPoint(long,float,float,float[]) -> jniGetWorldPoint
    com.badlogic.gdx.math.Vector2 getLocalPoint(com.badlogic.gdx.math.Vector2) -> c
    void jniGetLocalPoint(long,float,float,float[]) -> jniGetLocalPoint
    void setAngularDamping(float) -> b
    void jniSetAngularDamping(long,float) -> jniSetAngularDamping
    void setType(com.badlogic.gdx.physics.box2d.BodyDef$BodyType) -> a
    void jniSetType(long,int) -> jniSetType
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType getType() -> g
    int jniGetType(long) -> jniGetType
    void setActive(boolean) -> a
    void jniSetActive(long,boolean) -> jniSetActive
    boolean isActive() -> h
    boolean jniIsActive(long) -> jniIsActive
com.badlogic.gdx.physics.box2d.BodyDef -> com.badlogic.gdx.physics.box2d.a:
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType type -> a
    com.badlogic.gdx.math.Vector2 position -> b
    float angle -> c
    com.badlogic.gdx.math.Vector2 linearVelocity -> d
    float angularVelocity -> e
    float linearDamping -> f
    float angularDamping -> g
    boolean allowSleep -> h
    boolean awake -> i
    boolean fixedRotation -> j
    boolean bullet -> k
    boolean active -> l
    float gravityScale -> m
com.badlogic.gdx.physics.box2d.BodyDef$BodyType -> com.badlogic.gdx.physics.box2d.b:
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType StaticBody -> a
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType KinematicBody -> b
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType DynamicBody -> c
    int value -> d
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType[] $VALUES -> e
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType[] values() -> values
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType valueOf(java.lang.String) -> valueOf
    int getValue() -> a
com.badlogic.gdx.physics.box2d.CircleShape -> com.badlogic.gdx.physics.box2d.CircleShape:
    float[] tmp -> b
    com.badlogic.gdx.math.Vector2 position -> c
    long newCircleShape() -> newCircleShape
com.badlogic.gdx.physics.box2d.Contact -> com.badlogic.gdx.physics.box2d.c:
    long addr -> a
    com.badlogic.gdx.physics.box2d.World world -> b
    com.badlogic.gdx.physics.box2d.WorldManifold worldManifold -> c
    float[] tmp -> d
com.badlogic.gdx.physics.box2d.ContactFilter -> com.badlogic.gdx.physics.box2d.d:
com.badlogic.gdx.physics.box2d.ContactImpulse -> com.badlogic.gdx.physics.box2d.e:
    com.badlogic.gdx.physics.box2d.World world -> a
    long addr -> b
    float[] tmp -> c
    float[] normalImpulses -> d
    float[] tangentImpulses -> e
com.badlogic.gdx.physics.box2d.ContactListener -> com.badlogic.gdx.physics.box2d.f:
com.badlogic.gdx.physics.box2d.Filter -> com.badlogic.gdx.physics.box2d.g:
    short categoryBits -> a
    short maskBits -> b
    short groupIndex -> c
com.badlogic.gdx.physics.box2d.Fixture -> com.badlogic.gdx.physics.box2d.h:
    com.badlogic.gdx.physics.box2d.Body body -> d
    long addr -> a
    com.badlogic.gdx.physics.box2d.Shape shape -> b
    java.lang.Object userData -> c
    short[] tmp -> e
    com.badlogic.gdx.physics.box2d.Filter filter -> f
    void reset(com.badlogic.gdx.physics.box2d.Body,long) -> a
com.badlogic.gdx.physics.box2d.FixtureDef -> com.badlogic.gdx.physics.box2d.i:
    com.badlogic.gdx.physics.box2d.Shape shape -> a
    float friction -> b
    float restitution -> c
    float density -> d
    boolean isSensor -> e
    com.badlogic.gdx.physics.box2d.Filter filter -> f
com.badlogic.gdx.physics.box2d.Joint -> com.badlogic.gdx.physics.box2d.j:
    long addr -> a
    com.badlogic.gdx.physics.box2d.World world -> d
    float[] tmp -> e
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeA -> b
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeB -> c
    com.badlogic.gdx.math.Vector2 anchorA -> f
    com.badlogic.gdx.math.Vector2 anchorB -> g
    com.badlogic.gdx.math.Vector2 reactionForce -> h
com.badlogic.gdx.physics.box2d.JointDef -> com.badlogic.gdx.physics.box2d.k:
    com.badlogic.gdx.physics.box2d.JointDef$JointType type -> a
    com.badlogic.gdx.physics.box2d.Body bodyA -> b
    com.badlogic.gdx.physics.box2d.Body bodyB -> c
    boolean collideConnected -> d
com.badlogic.gdx.physics.box2d.JointDef$JointType -> com.badlogic.gdx.physics.box2d.l:
    com.badlogic.gdx.physics.box2d.JointDef$JointType Unknown -> a
    com.badlogic.gdx.physics.box2d.JointDef$JointType RevoluteJoint -> b
    com.badlogic.gdx.physics.box2d.JointDef$JointType PrismaticJoint -> c
    com.badlogic.gdx.physics.box2d.JointDef$JointType DistanceJoint -> d
    com.badlogic.gdx.physics.box2d.JointDef$JointType PulleyJoint -> e
    com.badlogic.gdx.physics.box2d.JointDef$JointType MouseJoint -> f
    com.badlogic.gdx.physics.box2d.JointDef$JointType GearJoint -> g
    com.badlogic.gdx.physics.box2d.JointDef$JointType WheelJoint -> h
    com.badlogic.gdx.physics.box2d.JointDef$JointType WeldJoint -> i
    com.badlogic.gdx.physics.box2d.JointDef$JointType FrictionJoint -> j
    com.badlogic.gdx.physics.box2d.JointDef$JointType RopeJoint -> k
    com.badlogic.gdx.physics.box2d.JointDef$JointType[] valueTypes -> l
    int value -> m
    com.badlogic.gdx.physics.box2d.JointDef$JointType[] $VALUES -> n
    com.badlogic.gdx.physics.box2d.JointDef$JointType[] values() -> values
    com.badlogic.gdx.physics.box2d.JointDef$JointType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.physics.box2d.JointEdge -> com.badlogic.gdx.physics.box2d.m:
    com.badlogic.gdx.physics.box2d.Body other -> a
    com.badlogic.gdx.physics.box2d.Joint joint -> b
com.badlogic.gdx.physics.box2d.Manifold -> com.badlogic.gdx.physics.box2d.n:
    long addr -> a
    com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint[] points -> b
    com.badlogic.gdx.math.Vector2 localNormal -> c
    com.badlogic.gdx.math.Vector2 localPoint -> d
    int[] tmpInt -> e
    float[] tmpFloat -> f
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint -> com.badlogic.gdx.physics.box2d.o:
    com.badlogic.gdx.math.Vector2 localPoint -> a
    float normalImpulse -> b
    float tangentImpulse -> c
    int contactID -> d
    com.badlogic.gdx.physics.box2d.Manifold this$0 -> e
    java.lang.String toString() -> toString
com.badlogic.gdx.physics.box2d.MassData -> com.badlogic.gdx.physics.box2d.p:
    com.badlogic.gdx.math.Vector2 center -> a
com.badlogic.gdx.physics.box2d.PolygonShape -> com.badlogic.gdx.physics.box2d.PolygonShape:
    float[] verts -> b
    long newPolygonShape() -> newPolygonShape
    void setAsBox(float,float) -> a
    void jniSetAsBox(long,float,float) -> jniSetAsBox
    void setAsBox$5190f958(float,float,com.badlogic.gdx.math.Vector2) -> a
    void jniSetAsBox(long,float,float,float,float,float) -> jniSetAsBox
com.badlogic.gdx.physics.box2d.QueryCallback -> com.badlogic.gdx.physics.box2d.q:
com.badlogic.gdx.physics.box2d.RayCastCallback -> com.badlogic.gdx.physics.box2d.r:
com.badlogic.gdx.physics.box2d.Shape -> com.badlogic.gdx.physics.box2d.Shape:
    long addr -> a
    void setRadius(float) -> a
    void jniSetRadius(long,float) -> jniSetRadius
    void dispose() -> a
    void jniDispose(long) -> jniDispose
com.badlogic.gdx.physics.box2d.Transform -> com.badlogic.gdx.physics.box2d.s:
    float[] vals -> a
    com.badlogic.gdx.math.Vector2 position -> b
com.badlogic.gdx.physics.box2d.World -> com.badlogic.gdx.physics.box2d.World:
    com.badlogic.gdx.utils.Pool freeBodies -> a
    com.badlogic.gdx.utils.Pool freeFixtures -> b
    long addr -> j
    com.badlogic.gdx.utils.LongMap bodies -> c
    com.badlogic.gdx.utils.LongMap fixtures -> d
    com.badlogic.gdx.utils.LongMap joints -> e
    com.badlogic.gdx.physics.box2d.ContactFilter contactFilter -> f
    com.badlogic.gdx.physics.box2d.ContactListener contactListener -> g
    float[] tmpGravity -> h
    com.badlogic.gdx.math.Vector2 gravity -> i
    com.badlogic.gdx.physics.box2d.QueryCallback queryCallback -> k
    long[] contactAddrs -> l
    java.util.ArrayList contacts -> m
    java.util.ArrayList freeContacts -> n
    com.badlogic.gdx.physics.box2d.Contact contact -> o
    com.badlogic.gdx.physics.box2d.Manifold manifold -> p
    com.badlogic.gdx.physics.box2d.ContactImpulse impulse -> q
    com.badlogic.gdx.physics.box2d.RayCastCallback rayCastCallback -> r
    com.badlogic.gdx.math.Vector2 rayPoint -> s
    com.badlogic.gdx.math.Vector2 rayNormal -> t
    long newWorld(float,float,boolean) -> newWorld
    com.badlogic.gdx.physics.box2d.Body createBody(com.badlogic.gdx.physics.box2d.BodyDef) -> a
    long jniCreateBody(long,int,float,float,float,float,float,float,float,float,boolean,boolean,boolean,boolean,boolean,float) -> jniCreateBody
    com.badlogic.gdx.physics.box2d.Joint createJoint(com.badlogic.gdx.physics.box2d.JointDef) -> a
    long jniCreateWheelJoint(long,long,long,boolean,float,float,float,float,float,float,boolean,float,float,float,float) -> jniCreateWheelJoint
    long jniCreateRopeJoint(long,long,long,boolean,float,float,float,float,float) -> jniCreateRopeJoint
    long jniCreateDistanceJoint(long,long,long,boolean,float,float,float,float,float,float,float) -> jniCreateDistanceJoint
    long jniCreateFrictionJoint(long,long,long,boolean,float,float,float,float,float,float) -> jniCreateFrictionJoint
    long jniCreateGearJoint(long,long,long,boolean,long,long,float) -> jniCreateGearJoint
    long jniCreateMouseJoint(long,long,long,boolean,float,float,float,float,float) -> jniCreateMouseJoint
    long jniCreatePrismaticJoint(long,long,long,boolean,float,float,float,float,float,float,float,boolean,float,float,boolean,float,float) -> jniCreatePrismaticJoint
    long jniCreatePulleyJoint(long,long,long,boolean,float,float,float,float,float,float,float,float,float,float,float) -> jniCreatePulleyJoint
    long jniCreateRevoluteJoint(long,long,long,boolean,float,float,float,float,float,boolean,float,float,boolean,float,float) -> jniCreateRevoluteJoint
    long jniCreateWeldJoint(long,long,long,boolean,float,float,float,float,float) -> jniCreateWeldJoint
    void destroyJoint(com.badlogic.gdx.physics.box2d.Joint) -> a
    void jniDestroyJoint(long,long) -> jniDestroyJoint
    void step$483e8c8b(float) -> a
    void jniStep(long,float,int,int) -> jniStep
    void dispose() -> e
    void jniDispose(long) -> jniDispose
com.badlogic.gdx.physics.box2d.World$1 -> com.badlogic.gdx.physics.box2d.t:
    com.badlogic.gdx.physics.box2d.World this$0 -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.World$2 -> com.badlogic.gdx.physics.box2d.u:
    com.badlogic.gdx.physics.box2d.World this$0 -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.WorldManifold -> com.badlogic.gdx.physics.box2d.v:
    com.badlogic.gdx.math.Vector2 normal -> a
    com.badlogic.gdx.math.Vector2[] points -> b
com.badlogic.gdx.physics.box2d.joints.DistanceJoint -> com.badlogic.gdx.physics.box2d.a.a:
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef -> com.badlogic.gdx.physics.box2d.a.b:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float length -> g
    float frequencyHz -> h
    float dampingRatio -> i
com.badlogic.gdx.physics.box2d.joints.FrictionJoint -> com.badlogic.gdx.physics.box2d.a.c:
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef -> com.badlogic.gdx.physics.box2d.a.d:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float maxForce -> g
    float maxTorque -> h
com.badlogic.gdx.physics.box2d.joints.GearJoint -> com.badlogic.gdx.physics.box2d.a.e:
com.badlogic.gdx.physics.box2d.joints.GearJointDef -> com.badlogic.gdx.physics.box2d.a.f:
    com.badlogic.gdx.physics.box2d.Joint joint1 -> e
    com.badlogic.gdx.physics.box2d.Joint joint2 -> f
    float ratio -> g
com.badlogic.gdx.physics.box2d.joints.MouseJoint -> com.badlogic.gdx.physics.box2d.a.g:
    float[] tmp -> d
    com.badlogic.gdx.math.Vector2 target -> e
com.badlogic.gdx.physics.box2d.joints.MouseJointDef -> com.badlogic.gdx.physics.box2d.a.h:
    com.badlogic.gdx.math.Vector2 target -> e
    float maxForce -> f
    float frequencyHz -> g
    float dampingRatio -> h
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint -> com.badlogic.gdx.physics.box2d.a.i:
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef -> com.badlogic.gdx.physics.box2d.a.j:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    com.badlogic.gdx.math.Vector2 localAxisA -> g
    float referenceAngle -> h
    boolean enableLimit -> i
    float lowerTranslation -> j
    float upperTranslation -> k
    boolean enableMotor -> l
    float maxMotorForce -> m
    float motorSpeed -> n
com.badlogic.gdx.physics.box2d.joints.PulleyJoint -> com.badlogic.gdx.physics.box2d.a.k:
    float[] tmp -> d
    com.badlogic.gdx.math.Vector2 groundAnchorA -> e
    com.badlogic.gdx.math.Vector2 groundAnchorB -> f
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef -> com.badlogic.gdx.physics.box2d.a.l:
    com.badlogic.gdx.math.Vector2 groundAnchorA -> e
    com.badlogic.gdx.math.Vector2 groundAnchorB -> f
    com.badlogic.gdx.math.Vector2 localAnchorA -> g
    com.badlogic.gdx.math.Vector2 localAnchorB -> h
    float lengthA -> i
    float lengthB -> j
    float ratio -> k
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint -> com.badlogic.gdx.physics.box2d.a.m:
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef -> com.badlogic.gdx.physics.box2d.a.n:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float referenceAngle -> g
    boolean enableLimit -> h
    float lowerAngle -> i
    float upperAngle -> j
    boolean enableMotor -> k
    float motorSpeed -> l
    float maxMotorTorque -> m
com.badlogic.gdx.physics.box2d.joints.RopeJoint -> com.badlogic.gdx.physics.box2d.a.o:
com.badlogic.gdx.physics.box2d.joints.RopeJointDef -> com.badlogic.gdx.physics.box2d.a.p:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float maxLength -> g
com.badlogic.gdx.physics.box2d.joints.WeldJoint -> com.badlogic.gdx.physics.box2d.a.q:
com.badlogic.gdx.physics.box2d.joints.WeldJointDef -> com.badlogic.gdx.physics.box2d.a.r:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float referenceAngle -> g
com.badlogic.gdx.physics.box2d.joints.WheelJoint -> com.badlogic.gdx.physics.box2d.a.s:
com.badlogic.gdx.physics.box2d.joints.WheelJointDef -> com.badlogic.gdx.physics.box2d.a.t:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    com.badlogic.gdx.math.Vector2 localAxisA -> g
    boolean enableMotor -> h
    float maxMotorTorque -> i
    float motorSpeed -> j
    float frequencyHz -> k
    float dampingRatio -> l
com.badlogic.gdx.scenes.scene2d.Action -> com.badlogic.gdx.f.a.a:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> a
    com.badlogic.gdx.utils.Pool pool -> b
    boolean act(float) -> a
    void restart() -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void reset() -> b
    void setPool(com.badlogic.gdx.utils.Pool) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Actor -> com.badlogic.gdx.f.a.b:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.scenes.scene2d.Group parent -> b
    com.badlogic.gdx.utils.DelayedRemovalArray listeners -> c
    com.badlogic.gdx.utils.DelayedRemovalArray captureListeners -> d
    com.badlogic.gdx.utils.Array actions -> e
    java.lang.String name -> f
    com.badlogic.gdx.scenes.scene2d.Touchable touchable -> g
    boolean visible -> h
    float x -> i
    float y -> j
    float width -> k
    float height -> l
    float originX -> m
    float originY -> n
    float scaleX -> o
    float scaleY -> p
    float rotation -> q
    com.badlogic.gdx.graphics.Color color -> r
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void act(float) -> a
    boolean fire(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean notify(com.badlogic.gdx.scenes.scene2d.Event,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean remove() -> k_
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    boolean removeListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> b
    com.badlogic.gdx.utils.Array getListeners() -> b
    boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> c
    boolean removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> d
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    void clearActions() -> c
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> d
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    com.badlogic.gdx.scenes.scene2d.Group getParent() -> e
    void setParent(com.badlogic.gdx.scenes.scene2d.Group) -> a
    com.badlogic.gdx.scenes.scene2d.Touchable getTouchable() -> f_
    void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable) -> a
    boolean isVisible() -> g
    void setVisible(boolean) -> a
    float getX() -> h
    void setX(float) -> b
    float getY() -> i
    void setY(float) -> c
    void setPosition(float,float) -> a
    void translate(float,float) -> b
    float getWidth() -> j
    void setWidth(float) -> d
    float getHeight() -> k
    void setHeight(float) -> e
    float getTop() -> l
    float getRight() -> m
    void setSize(float,float) -> c
    void setBounds$4098370b(float,float) -> d
    float getOriginX() -> n
    void setOriginX(float) -> f
    float getOriginY() -> o
    void setOriginY(float) -> g
    void setOrigin(float,float) -> e
    float getScaleX() -> p
    float getScaleY() -> q
    float getRotation() -> r
    void setRotation(float) -> h
    void rotate(float) -> i
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor$4098370b(float,float,float) -> a
    com.badlogic.gdx.graphics.Color getColor() -> s
    java.lang.String getName() -> t
    void setName(java.lang.String) -> a
    void toFront() -> u
    boolean clipBegin(float,float,float,float) -> a
    com.badlogic.gdx.math.Vector2 stageToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 localToStageCoordinates(com.badlogic.gdx.math.Vector2) -> b
    com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Event -> com.badlogic.gdx.f.a.c:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.scenes.scene2d.Actor targetActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> c
    boolean capture -> d
    boolean bubbles -> e
    boolean handled -> f
    boolean stopped -> g
    boolean cancelled -> h
    void handle() -> a
    void cancel() -> c
    void stop() -> d
    void reset() -> b
    com.badlogic.gdx.scenes.scene2d.Actor getTarget() -> e
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.scenes.scene2d.Actor getListenerActor() -> f
    void setListenerActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean getBubbles() -> g
    boolean isHandled() -> h
    boolean isStopped() -> i
    boolean isCancelled() -> j
    void setCapture(boolean) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> k
com.badlogic.gdx.scenes.scene2d.EventListener -> com.badlogic.gdx.f.a.d:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.Group -> com.badlogic.gdx.f.a.e:
    com.badlogic.gdx.utils.SnapshotArray children -> a
    com.badlogic.gdx.math.Matrix3 localTransform -> b
    com.badlogic.gdx.math.Matrix3 worldTransform -> c
    com.badlogic.gdx.math.Matrix4 batchTransform -> d
    com.badlogic.gdx.math.Matrix4 oldBatchTransform -> e
    boolean transform -> f
    com.badlogic.gdx.math.Rectangle cullingArea -> g
    com.badlogic.gdx.math.Vector2 point -> h
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void drawChildren(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> b
    void applyTransform(com.badlogic.gdx.graphics.g2d.SpriteBatch,com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Matrix4 computeTransform() -> v
    void resetTransform(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void childrenChanged() -> w
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    void clear() -> x
    com.badlogic.gdx.scenes.scene2d.Actor findActor(java.lang.String) -> b
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.utils.SnapshotArray getChildren() -> y
    void setTransform(boolean) -> b
    boolean isTransform() -> z
com.badlogic.gdx.scenes.scene2d.InputEvent -> com.badlogic.gdx.f.a.f:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type type -> a
    float stageX -> b
    float stageY -> c
    int pointer -> d
    int button -> e
    int keyCode -> f
    int scrollAmount -> g
    char character -> h
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> i
    void reset() -> b
    float getStageX() -> l
    void setStageX(float) -> a
    float getStageY() -> m
    void setStageY(float) -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type getType() -> n
    void setType(com.badlogic.gdx.scenes.scene2d.InputEvent$Type) -> a
    int getPointer() -> o
    void setPointer(int) -> a
    int getButton() -> p
    void setButton(int) -> b
    int getKeyCode() -> q
    void setKeyCode(int) -> c
    char getCharacter() -> r
    void setCharacter(char) -> a
    int getScrollAmount() -> s
    com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor() -> t
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.InputEvent$Type -> com.badlogic.gdx.f.a.g:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDown -> a
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchUp -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDragged -> c
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type mouseMoved -> d
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type enter -> e
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type exit -> f
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type scrolled -> g
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyDown -> h
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyUp -> i
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyTyped -> j
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] $VALUES -> k
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] values() -> values
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.scenes.scene2d.InputListener -> com.badlogic.gdx.f.a.h:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385() -> a
    void enter$6049651d(int) -> a
    void exit$6049651d(int) -> b
    boolean scrolled$1dcb6a90(int) -> c
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> a
    boolean keyUp$3bf7ec50() -> b
    boolean keyTyped$3bf802d6(char) -> a
com.badlogic.gdx.scenes.scene2d.InputListener$1 -> com.badlogic.gdx.f.a.i:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.Stage -> com.badlogic.gdx.f.a.j:
    float width -> a
    float height -> b
    float gutterWidth -> c
    float gutterHeight -> d
    float centerX -> e
    float centerY -> f
    com.badlogic.gdx.graphics.Camera camera -> g
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> h
    boolean ownsBatch -> i
    com.badlogic.gdx.scenes.scene2d.Group root -> j
    com.badlogic.gdx.math.Vector2 stageCoords -> k
    com.badlogic.gdx.scenes.scene2d.Actor[] pointerOverActors -> l
    boolean[] pointerTouched -> m
    int[] pointerScreenX -> n
    int[] pointerScreenY -> o
    int mouseScreenX -> p
    int mouseScreenY -> q
    com.badlogic.gdx.scenes.scene2d.Actor mouseOverActor -> r
    com.badlogic.gdx.scenes.scene2d.Actor keyboardFocus -> s
    com.badlogic.gdx.scenes.scene2d.Actor scrollFocus -> t
    com.badlogic.gdx.utils.SnapshotArray touchFocuses -> u
    void initialize$483d6f3f(float,float) -> c
    void setViewport$483d6f3f(float,float) -> a
    void draw() -> a
    void act(float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor fireEnterAndExit(com.badlogic.gdx.scenes.scene2d.Actor,int,int,int) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    void addTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int) -> a
    void cancelTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.utils.Array getActors() -> b
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> b
    boolean removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> c
    void unfocus(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    void setKeyboardFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    com.badlogic.gdx.scenes.scene2d.Actor getKeyboardFocus() -> c
    void setScrollFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    com.badlogic.gdx.scenes.scene2d.Actor getScrollFocus() -> d
    float getWidth() -> f
    float getHeight() -> g
    com.badlogic.gdx.graphics.g2d.SpriteBatch getSpriteBatch() -> h
    com.badlogic.gdx.graphics.Camera getCamera() -> i
    void setCamera(com.badlogic.gdx.graphics.Camera) -> a
    com.badlogic.gdx.scenes.scene2d.Group getRoot() -> j
    com.badlogic.gdx.scenes.scene2d.Actor hit$72f4a4b8(float,float) -> b
    com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4) -> a
    void dispose() -> e
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus -> com.badlogic.gdx.f.a.k:
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> a
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor target -> c
    int pointer -> d
    int button -> e
    void reset() -> b
com.badlogic.gdx.scenes.scene2d.Touchable -> com.badlogic.gdx.f.a.l:
    com.badlogic.gdx.scenes.scene2d.Touchable enabled -> a
    com.badlogic.gdx.scenes.scene2d.Touchable disabled -> b
    com.badlogic.gdx.scenes.scene2d.Touchable childrenOnly -> c
    com.badlogic.gdx.scenes.scene2d.Touchable[] $VALUES -> d
    com.badlogic.gdx.scenes.scene2d.Touchable[] values() -> values
    com.badlogic.gdx.scenes.scene2d.Touchable valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.scenes.scene2d.actions.Actions -> com.badlogic.gdx.f.a.a.a:
    com.badlogic.gdx.scenes.scene2d.Action action(java.lang.Class) -> a
    com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo$c42c229(float,float,float) -> a
    com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy$6a46cf85(float,float,float) -> b
    com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float,float) -> a
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha$33a9621f(float,float) -> b
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeOut(float,com.badlogic.gdx.math.Interpolation) -> a
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeIn(float,com.badlogic.gdx.math.Interpolation) -> b
    com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction removeActor() -> a
    com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> b
    com.badlogic.gdx.scenes.scene2d.actions.RepeatAction repeat(int,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.RepeatAction forever(com.badlogic.gdx.scenes.scene2d.Action) -> a
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction -> com.badlogic.gdx.f.a.a.b:
    float start -> b
    float end -> c
    com.badlogic.gdx.graphics.Color color -> d
    void begin() -> c
    void update(float) -> b
    void reset() -> b
    void setAlpha(float) -> c
com.badlogic.gdx.scenes.scene2d.actions.DelayAction -> com.badlogic.gdx.f.a.a.c:
    float duration -> c
    float time -> d
    boolean act(float) -> a
    void restart() -> a
    void setDuration(float) -> b
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction -> com.badlogic.gdx.f.a.a.d:
    com.badlogic.gdx.scenes.scene2d.Action action -> b
    void setAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    void restart() -> a
    void reset() -> b
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction -> com.badlogic.gdx.f.a.a.e:
    float amountX -> b
    float amountY -> c
    void updateRelative(float) -> c
    void setAmount(float,float) -> a
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction -> com.badlogic.gdx.f.a.a.f:
    float startX -> b
    float startY -> c
    float endX -> d
    float endY -> e
    void begin() -> c
    void update(float) -> b
    void setPosition(float,float) -> a
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction -> com.badlogic.gdx.f.a.a.g:
    com.badlogic.gdx.utils.Array actions -> b
    boolean complete -> c
    boolean act(float) -> a
    void restart() -> a
    void reset() -> b
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction -> com.badlogic.gdx.f.a.a.h:
    float lastPercent -> b
    void begin() -> c
    void update(float) -> b
    void updateRelative(float) -> c
com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction -> com.badlogic.gdx.f.a.a.i:
    com.badlogic.gdx.scenes.scene2d.Actor removeActor -> b
    boolean removed -> c
    boolean act(float) -> a
    void restart() -> a
    void reset() -> b
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction -> com.badlogic.gdx.f.a.a.j:
    int repeatCount -> c
    int executedCount -> d
    boolean finished -> e
    boolean act(float) -> a
    void restart() -> a
    void setCount(int) -> a
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction -> com.badlogic.gdx.f.a.a.k:
    float amount -> b
    void updateRelative(float) -> c
    void setAmount(float) -> d
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction -> com.badlogic.gdx.f.a.a.l:
    int index -> c
    boolean act(float) -> a
    void restart() -> a
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction -> com.badlogic.gdx.f.a.a.m:
    float startWidth -> b
    float startHeight -> c
    float endWidth -> d
    float endHeight -> e
    void begin() -> c
    void update(float) -> b
    void setSize(float,float) -> a
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction -> com.badlogic.gdx.f.a.a.n:
    float duration -> b
    float time -> c
    com.badlogic.gdx.math.Interpolation interpolation -> d
    boolean reverse -> e
    boolean complete -> f
    boolean act(float) -> a
    void begin() -> c
    void update(float) -> b
    void restart() -> a
    void reset() -> b
    void setDuration(float) -> e
    void setInterpolation(com.badlogic.gdx.math.Interpolation) -> a
com.badlogic.gdx.scenes.scene2d.ui.Button -> com.badlogic.gdx.f.a.b.a:
    com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle style -> d
    boolean isChecked -> a
    boolean isDisabled -> b
    com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup buttonGroup -> c
    com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener -> e
    void setChecked(boolean) -> c
    boolean isChecked() -> A
    boolean isPressed() -> B
    boolean isOver() -> C
    boolean isDisabled() -> D
    void setDisabled(boolean) -> d
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void drawBackground(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> c
    float getPrefWidth() -> E
    float getPrefHeight() -> F
    float getMinWidth() -> G
    float getMinHeight() -> H
com.badlogic.gdx.scenes.scene2d.ui.Button$1 -> com.badlogic.gdx.f.a.b.b:
    com.badlogic.gdx.scenes.scene2d.ui.Button this$0 -> a
    void clicked$43069389(com.badlogic.gdx.scenes.scene2d.InputEvent) -> a
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle -> com.badlogic.gdx.f.a.b.c:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable up -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable down -> b
    com.badlogic.gdx.scenes.scene2d.utils.Drawable over -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checked -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedOver -> e
    com.badlogic.gdx.scenes.scene2d.utils.Drawable disabled -> f
    float pressedOffsetX -> g
    float pressedOffsetY -> h
    float unpressedOffsetX -> i
    float unpressedOffsetY -> j
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup -> com.badlogic.gdx.f.a.b.d:
    com.badlogic.gdx.utils.Array buttons -> a
    com.badlogic.gdx.utils.Array checkedButtons -> b
    int minCheckCount -> c
    int maxCheckCount -> d
    boolean uncheckLast -> e
    com.badlogic.gdx.scenes.scene2d.ui.Button lastChecked -> f
    void add(com.badlogic.gdx.scenes.scene2d.ui.Button) -> a
    boolean canCheck(com.badlogic.gdx.scenes.scene2d.ui.Button,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Button getChecked() -> a
    com.badlogic.gdx.utils.Array getButtons() -> b
    void setMinCheckCount(int) -> a
    void setMaxCheckCount(int) -> b
com.badlogic.gdx.scenes.scene2d.ui.CheckBox -> com.badlogic.gdx.f.a.b.e:
    com.badlogic.gdx.scenes.scene2d.ui.Image image -> d
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle style -> e
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image getImage() -> I
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle -> com.badlogic.gdx.f.a.b.f:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOn -> k
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOff -> l
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOver -> m
com.badlogic.gdx.scenes.scene2d.ui.Dialog -> com.badlogic.gdx.f.a.b.g:
    float fadeDuration -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table contentTable -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table buttonTable -> c
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> m
    com.badlogic.gdx.utils.ObjectMap values -> d
    boolean cancelHide -> e
    com.badlogic.gdx.scenes.scene2d.Actor previousKeyboardFocus -> f
    com.badlogic.gdx.scenes.scene2d.Actor previousScrollFocus -> g
    void initialize() -> S
    com.badlogic.gdx.scenes.scene2d.ui.Table getContentTable() -> A
    com.badlogic.gdx.scenes.scene2d.ui.Table getButtonTable() -> B
    com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String) -> c
    com.badlogic.gdx.scenes.scene2d.ui.Dialog button(com.badlogic.gdx.scenes.scene2d.ui.Button) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Dialog button$63685283(com.badlogic.gdx.scenes.scene2d.ui.Button) -> b
    com.badlogic.gdx.scenes.scene2d.ui.Dialog show(com.badlogic.gdx.scenes.scene2d.Stage) -> b
    void hide() -> C
    void setParent(com.badlogic.gdx.scenes.scene2d.Group) -> a
    void result$5d527811() -> D
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1 -> com.badlogic.gdx.f.a.b.h:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> a
    void changed$d8a80ea(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Dialog$2 -> com.badlogic.gdx.f.a.b.i:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> a
    void keyboardFocusChanged$5cca10c6(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,boolean) -> a
    void scrollFocusChanged$5cca10c6(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,boolean) -> b
    void focusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent) -> a
com.badlogic.gdx.scenes.scene2d.ui.Image -> com.badlogic.gdx.f.a.b.j:
    com.badlogic.gdx.utils.Scaling scaling -> a
    int align -> b
    float imageX -> c
    float imageY -> d
    float imageWidth -> e
    float imageHeight -> f
    com.badlogic.gdx.scenes.scene2d.utils.Drawable drawable -> g
    void layout() -> v
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void setDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable() -> w
    float getMinWidth() -> G
    float getMinHeight() -> H
    float getPrefWidth() -> E
    float getPrefHeight() -> F
com.badlogic.gdx.scenes.scene2d.ui.Label -> com.badlogic.gdx.f.a.b.k:
    com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle style -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds bounds -> b
    com.badlogic.gdx.utils.StringBuilder text -> c
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> d
    int labelAlign -> e
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment lineAlign -> f
    boolean wrap -> g
    float lastPrefHeight -> h
    boolean sizeInvalid -> i
    float fontScaleX -> j
    float fontScaleY -> k
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle getStyle() -> w
    void setText(java.lang.CharSequence) -> a
    java.lang.CharSequence getText() -> x
    void invalidate() -> a_
    void computeSize() -> B
    void layout() -> v
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    float getPrefWidth() -> E
    float getPrefHeight() -> F
    void setWrap$1385ff() -> z
    void setAlignment(int) -> a
    void setAlignment(int,int) -> a
    void setFontScale$133aeb() -> A
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle -> com.badlogic.gdx.f.a.b.l:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    com.badlogic.gdx.graphics.Color fontColor -> b
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> c
com.badlogic.gdx.scenes.scene2d.ui.List -> com.badlogic.gdx.f.a.b.m:
    com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle style -> a
    java.lang.String[] items -> b
    int selectedIndex -> c
    com.badlogic.gdx.math.Rectangle cullingArea -> d
    float prefWidth -> e
    float prefHeight -> f
    float itemHeight -> g
    float textOffsetX -> h
    float textOffsetY -> i
    void touchDown(float) -> j
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    java.lang.String getSelection() -> w
    int setSelection(java.lang.String) -> b
    void setItems(java.lang.Object[]) -> a
    float getPrefWidth() -> E
    float getPrefHeight() -> F
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.scenes.scene2d.ui.List$1 -> com.badlogic.gdx.f.a.b.n:
    com.badlogic.gdx.scenes.scene2d.ui.List this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle -> com.badlogic.gdx.f.a.b.o:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    com.badlogic.gdx.graphics.Color fontColorSelected -> b
    com.badlogic.gdx.graphics.Color fontColorUnselected -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable selection -> d
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane -> com.badlogic.gdx.f.a.b.p:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle style -> C
    com.badlogic.gdx.scenes.scene2d.Actor widget -> D
    com.badlogic.gdx.math.Rectangle hScrollBounds -> a
    com.badlogic.gdx.math.Rectangle vScrollBounds -> b
    com.badlogic.gdx.math.Rectangle hKnobBounds -> c
    com.badlogic.gdx.math.Rectangle vKnobBounds -> d
    com.badlogic.gdx.math.Rectangle widgetAreaBounds -> E
    com.badlogic.gdx.math.Rectangle widgetCullingArea -> F
    com.badlogic.gdx.math.Rectangle scissorBounds -> G
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener flickScrollListener -> H
    boolean scrollX -> e
    boolean scrollY -> f
    float amountX -> g
    float amountY -> h
    float visualAmountX -> i
    float visualAmountY -> j
    float maxX -> k
    float maxY -> l
    boolean touchScrollH -> m
    boolean touchScrollV -> n
    com.badlogic.gdx.math.Vector2 lastPoint -> o
    float areaWidth -> p
    float areaHeight -> q
    boolean fadeScrollBars -> I
    boolean smoothScrolling -> J
    float fadeAlpha -> r
    float fadeAlphaSeconds -> s
    float fadeDelay -> t
    float fadeDelaySeconds -> u
    boolean cancelTouchFocus -> v
    boolean flickScroll -> w
    float velocityX -> x
    float velocityY -> y
    float flingTimer -> z
    boolean overscrollX -> K
    boolean overscrollY -> L
    float flingTime -> A
    float overscrollDistance -> M
    float overscrollSpeedMin -> N
    float overscrollSpeedMax -> O
    boolean forceOverscrollX -> P
    boolean forceOverscrollY -> Q
    boolean disableX -> R
    boolean disableY -> S
    boolean clamp -> T
    boolean scrollbarsOnTop -> U
    int draggingPointer -> B
    void resetFade() -> A
    void cancelTouchFocusedChild$2f9d2637() -> B
    void clamp() -> C
    void act(float) -> a
    void layout() -> b_
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    float getPrefWidth() -> E
    float getPrefHeight() -> F
    float getMinWidth() -> G
    float getMinHeight() -> H
    void setWidget(com.badlogic.gdx.scenes.scene2d.Actor) -> e
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void setScrollX(float) -> j
    void setScrollY(float) -> k
    float getScrollPercentX() -> K
    void setScrollPercentX(float) -> l
    float getScrollPercentY() -> L
    void setScrollPercentY(float) -> m
    void setFlickScroll$1385ff() -> I
    void setScrollingDisabled(boolean,boolean) -> a
    void setFadeScrollBars$1385ff() -> J
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1 -> com.badlogic.gdx.f.a.b.q:
    float handlePosition -> b
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385() -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2 -> com.badlogic.gdx.f.a.b.r:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
    void pan$645d22b7$43069389(float,float) -> a
    void fling$1dcb6a94$43069389(float,float) -> b
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3 -> com.badlogic.gdx.f.a.b.s:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
    boolean scrolled$1dcb6a90(int) -> c
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle -> com.badlogic.gdx.f.a.b.t:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable corner -> b
    com.badlogic.gdx.scenes.scene2d.utils.Drawable hScroll -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable hScrollKnob -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable vScroll -> e
    com.badlogic.gdx.scenes.scene2d.utils.Drawable vScrollKnob -> f
com.badlogic.gdx.scenes.scene2d.ui.SelectBox -> com.badlogic.gdx.f.a.b.u:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle style -> a
    java.lang.String[] items -> b
    int selectedIndex -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds bounds -> f
    com.badlogic.gdx.math.Vector2 screenCoords -> d
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList list -> e
    float prefWidth -> g
    float prefHeight -> h
    com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener -> i
    void setItems(java.lang.Object[]) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void setSelection(java.lang.String) -> b
    java.lang.String getSelection() -> w
    float getPrefWidth() -> E
    float getPrefHeight() -> F
    void hideList() -> x
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1 -> com.badlogic.gdx.f.a.b.v:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle -> com.badlogic.gdx.f.a.b.w:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundOver -> b
    com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundOpen -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable listBackground -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable listSelection -> e
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> f
    com.badlogic.gdx.graphics.Color fontColor -> g
    float itemSpacing -> h
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList -> com.badlogic.gdx.f.a.b.x:
    com.badlogic.gdx.math.Vector2 oldScreenCoords -> a
    float itemHeight -> b
    float textOffsetX -> c
    float textOffsetY -> d
    int listSelectedIndex -> e
    com.badlogic.gdx.scenes.scene2d.InputListener stageListener -> f
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox this$0 -> g
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void act(float) -> a
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList$1 -> com.badlogic.gdx.f.a.b.y:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList this$1 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    boolean mouseMoved$43069385() -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin -> com.badlogic.gdx.f.a.b.z:
    com.badlogic.gdx.utils.ObjectMap resources -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> b
    void addRegions(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> a
    void add(java.lang.String,java.lang.Object) -> a
    void add(java.lang.String,java.lang.Object,java.lang.Class) -> a
    java.lang.Object get(java.lang.Class) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    java.lang.Object optional(java.lang.String,java.lang.Class) -> b
    com.badlogic.gdx.utils.ObjectMap getAll(java.lang.Class) -> b
    com.badlogic.gdx.graphics.Color getColor(java.lang.String) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont getFont(java.lang.String) -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(java.lang.String) -> c
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch(java.lang.String) -> d
    com.badlogic.gdx.graphics.g2d.Sprite getSprite(java.lang.String) -> e
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable(java.lang.String) -> f
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,com.badlogic.gdx.graphics.Color) -> a
    void dispose() -> e
com.badlogic.gdx.scenes.scene2d.ui.Skin$1 -> com.badlogic.gdx.f.a.b.aa:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$2 -> com.badlogic.gdx.f.a.b.ab:
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin read$28ddaaad(com.badlogic.gdx.utils.Json,java.lang.Object) -> b
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$3 -> com.badlogic.gdx.f.a.b.ac:
    com.badlogic.gdx.files.FileHandle val$skinFile -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont read$251bbf52(com.badlogic.gdx.utils.Json,java.lang.Object) -> b
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$4 -> com.badlogic.gdx.f.a.b.ad:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$5 -> com.badlogic.gdx.f.a.b.ae:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable -> com.badlogic.gdx.f.a.b.af:
com.badlogic.gdx.scenes.scene2d.ui.Slider -> com.badlogic.gdx.f.a.b.ag:
    com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle style -> b
    float min -> c
    float max -> d
    float stepSize -> e
    float value -> f
    float animateFromValue -> g
    float sliderPos -> h
    boolean vertical -> i
    int draggingPointer -> a
    float animateDuration -> j
    float animateTime -> k
    com.badlogic.gdx.math.Interpolation animateInterpolation -> l
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void calculatePositionAndValue(float,float) -> f
    float getValue() -> w
    float getVisualValue() -> x
    void setValue(float) -> j
    float getPrefWidth() -> E
    float getPrefHeight() -> F
com.badlogic.gdx.scenes.scene2d.ui.Slider$1 -> com.badlogic.gdx.f.a.b.ah:
    com.badlogic.gdx.scenes.scene2d.ui.Slider this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle -> com.badlogic.gdx.f.a.b.ai:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable knob -> b
    com.badlogic.gdx.scenes.scene2d.utils.Drawable knobBefore -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable knobAfter -> d
com.badlogic.gdx.scenes.scene2d.ui.Table -> com.badlogic.gdx.f.a.b.aj:
    com.badlogic.gdx.scenes.scene2d.ui.TableLayout layout -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> b
    boolean clip -> c
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> d
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void drawBackground(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> c
    void invalidate() -> a_
    float getPrefWidth() -> E
    float getPrefHeight() -> F
    float getMinWidth() -> G
    float getMinHeight() -> H
    void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getBackground() -> J
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void setClip$1385ff() -> K
    void clear() -> x
    com.esotericsoftware.tablelayout.Cell add(java.lang.String) -> d
    com.esotericsoftware.tablelayout.Cell add(com.badlogic.gdx.scenes.scene2d.Actor) -> e
    com.esotericsoftware.tablelayout.Cell row() -> L
    com.esotericsoftware.tablelayout.Cell columnDefaults$b468e46() -> M
    com.esotericsoftware.tablelayout.Cell defaults() -> N
    void layout() -> b_
    com.esotericsoftware.tablelayout.Cell getCell(com.badlogic.gdx.scenes.scene2d.Actor) -> f
    com.badlogic.gdx.scenes.scene2d.ui.Table padTop(float) -> j
    com.badlogic.gdx.scenes.scene2d.ui.Table padLeft(float) -> k
    com.badlogic.gdx.scenes.scene2d.ui.Table padBottom(float) -> l
    com.badlogic.gdx.scenes.scene2d.ui.Table padRight(float) -> m
    com.badlogic.gdx.scenes.scene2d.ui.Table debug() -> O
    float getPadTop() -> P
    float getPadLeft() -> Q
    float getPadRight() -> R
    void setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> a
    void drawDebug(com.badlogic.gdx.scenes.scene2d.Stage) -> c
    void drawDebug(com.badlogic.gdx.utils.Array,com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
com.badlogic.gdx.scenes.scene2d.ui.TableLayout -> com.badlogic.gdx.f.a.b.ak:
    com.badlogic.gdx.utils.Array debugRects -> a
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer debugRenderer -> k
    boolean round -> b
    void layout() -> a
    void drawDebug(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
com.badlogic.gdx.scenes.scene2d.ui.TableToolkit -> com.badlogic.gdx.f.a.b.al:
    boolean drawDebug -> a
    void addDebugRectangle(com.esotericsoftware.tablelayout.BaseTableLayout,com.esotericsoftware.tablelayout.BaseTableLayout$Debug,float,float,float,float) -> a
    void clearDebugRectangles(com.esotericsoftware.tablelayout.BaseTableLayout) -> a
    float getPrefHeight(java.lang.Object) -> a
    float getPrefWidth(java.lang.Object) -> b
    float getMinHeight(java.lang.Object) -> c
    float getMinWidth(java.lang.Object) -> d
    void removeChild(java.lang.Object,java.lang.Object) -> a
    void addChild(java.lang.Object,java.lang.Object) -> b
com.badlogic.gdx.scenes.scene2d.ui.TableToolkit$DebugRect -> com.badlogic.gdx.f.a.b.am:
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug type -> g
com.badlogic.gdx.scenes.scene2d.ui.TextButton -> com.badlogic.gdx.f.a.b.an:
    com.badlogic.gdx.scenes.scene2d.ui.Label label -> d
    com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle style -> e
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Label getLabel() -> S
    void setText(java.lang.String) -> c
    java.lang.CharSequence getText() -> T
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle -> com.badlogic.gdx.f.a.b.ao:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> n
    com.badlogic.gdx.graphics.Color fontColor -> o
    com.badlogic.gdx.graphics.Color downFontColor -> p
    com.badlogic.gdx.graphics.Color overFontColor -> q
    com.badlogic.gdx.graphics.Color checkedFontColor -> r
    com.badlogic.gdx.graphics.Color checkedOverFontColor -> s
    com.badlogic.gdx.graphics.Color disabledFontColor -> t
com.badlogic.gdx.scenes.scene2d.ui.TextField -> com.badlogic.gdx.f.a.b.ap:
    com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle style -> a
    java.lang.String text -> b
    java.lang.String messageText -> c
    java.lang.CharSequence displayText -> w
    int cursor -> d
    com.badlogic.gdx.utils.Clipboard clipboard -> x
    com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener listener -> e
    com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter filter -> f
    com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard keyboard -> g
    boolean focusTraversal -> h
    boolean disabled -> i
    boolean passwordMode -> y
    java.lang.StringBuilder passwordBuffer -> z
    com.badlogic.gdx.math.Rectangle fieldBounds -> A
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds textBounds -> B
    com.badlogic.gdx.math.Rectangle scissor -> C
    float renderOffset -> j
    float textOffset -> k
    int visibleTextStart -> D
    int visibleTextEnd -> E
    com.badlogic.gdx.utils.FloatArray glyphAdvances -> F
    com.badlogic.gdx.utils.FloatArray glyphPositions -> l
    boolean cursorOn -> m
    float blinkTime -> G
    long lastBlink -> n
    boolean hasSelection -> o
    int selectionStart -> p
    float selectionX -> H
    float selectionWidth -> I
    char passwordCharacter -> J
    com.badlogic.gdx.scenes.scene2d.InputListener inputListener -> q
    com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask keyRepeatTask -> r
    float keyRepeatInitialTime -> s
    float keyRepeatTime -> t
    boolean rightAligned -> u
    int maxLength -> v
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void updateDisplayText() -> w
    void copy() -> x
    void cut() -> z
    void paste() -> A
    void delete() -> B
    void next(boolean) -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextField findNextTextField(com.badlogic.gdx.utils.Array,com.badlogic.gdx.scenes.scene2d.ui.TextField,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,boolean) -> a
    void setText(java.lang.String) -> b
    java.lang.String getText() -> C
    void setSelection$255f295(int) -> a
    void clearSelection() -> D
    float getPrefWidth() -> E
    float getPrefHeight() -> F
    void setDisabled(boolean) -> c
com.badlogic.gdx.scenes.scene2d.ui.TextField$1 -> com.badlogic.gdx.f.a.b.aq:
    com.badlogic.gdx.scenes.scene2d.ui.TextField this$0 -> a
    void clicked$43069389(com.badlogic.gdx.scenes.scene2d.InputEvent) -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void setCursorPosition(float) -> a
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> a
    boolean keyUp$3bf7ec50() -> b
    boolean keyTyped$3bf802d6(char) -> a
com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard -> com.badlogic.gdx.f.a.b.ar:
    void show$1385ff() -> a
com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask -> com.badlogic.gdx.f.a.b.as:
    int keycode -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextField this$0 -> b
    void run() -> run
com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard -> com.badlogic.gdx.f.a.b.at:
    void show$1385ff() -> a
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter -> com.badlogic.gdx.f.a.b.au:
    boolean acceptChar$5b6ffccc() -> a
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener -> com.badlogic.gdx.f.a.b.av:
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle -> com.badlogic.gdx.f.a.b.aw:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    com.badlogic.gdx.graphics.Color fontColor -> b
    com.badlogic.gdx.graphics.Color disabledFontColor -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable cursor -> e
    com.badlogic.gdx.scenes.scene2d.utils.Drawable selection -> f
    com.badlogic.gdx.graphics.g2d.BitmapFont messageFont -> g
    com.badlogic.gdx.graphics.Color messageFontColor -> h
com.badlogic.gdx.scenes.scene2d.ui.Widget -> com.badlogic.gdx.f.a.b.ax:
    boolean needsLayout -> a
    boolean fillParent -> b
    boolean layoutEnabled -> c
    float getMinWidth() -> G
    float getMinHeight() -> H
    float getPrefWidth() -> E
    float getPrefHeight() -> F
    void validate() -> d_
    void invalidate() -> a_
    void invalidateHierarchy() -> c_
    void setFillParent$1385ff() -> K
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void layout() -> v
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup -> com.badlogic.gdx.f.a.b.ay:
    boolean needsLayout -> a
    boolean fillParent -> b
    boolean layoutEnabled -> c
    float getMinWidth() -> G
    float getMinHeight() -> H
    float getPrefWidth() -> E
    float getPrefHeight() -> F
    void validate() -> d_
    void invalidate() -> a_
    void invalidateHierarchy() -> c_
    void childrenChanged() -> w
    void pack() -> U
    void setFillParent(boolean) -> e
    void layout() -> b_
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.badlogic.gdx.scenes.scene2d.ui.Window -> com.badlogic.gdx.f.a.b.az:
    com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle style -> a
    java.lang.String title -> b
    com.badlogic.gdx.graphics.g2d.BitmapFontCache titleCache -> c
    boolean isMovable -> h
    boolean isModal -> i
    com.badlogic.gdx.math.Vector2 dragOffset -> j
    boolean dragging -> k
    int titleAlignment -> d
    boolean keepWithinStage -> l
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void drawBackground(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> c
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void setTitle(java.lang.String) -> e
    float getPrefWidth() -> E
com.badlogic.gdx.scenes.scene2d.ui.Window$1 -> com.badlogic.gdx.f.a.b.ba:
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.Window$2 -> com.badlogic.gdx.f.a.b.bb:
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385() -> a
    boolean scrolled$1dcb6a90(int) -> c
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> a
    boolean keyUp$3bf7ec50() -> b
    boolean keyTyped$3bf802d6(char) -> a
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle -> com.badlogic.gdx.f.a.b.bc:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont titleFont -> b
    com.badlogic.gdx.graphics.Color titleFontColor -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable stageBackground -> d
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener -> com.badlogic.gdx.f.a.c.a:
    com.badlogic.gdx.input.GestureDetector detector -> a
    com.badlogic.gdx.scenes.scene2d.InputEvent event -> b
    com.badlogic.gdx.scenes.scene2d.Actor actor -> c
    com.badlogic.gdx.scenes.scene2d.Actor touchDownTarget -> d
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    void fling$1dcb6a94$43069389(float,float) -> b
    void pan$645d22b7$43069389(float,float) -> a
    com.badlogic.gdx.input.GestureDetector getGestureDetector() -> a
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1 -> com.badlogic.gdx.f.a.c.b:
    com.badlogic.gdx.math.Vector2 initialPointer1 -> b
    com.badlogic.gdx.math.Vector2 initialPointer2 -> c
    com.badlogic.gdx.math.Vector2 pointer1 -> d
    com.badlogic.gdx.math.Vector2 pointer2 -> e
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener this$0 -> a
    boolean tap$4096cea7(float,float) -> a
    boolean longPress(float,float) -> b
    boolean fling$483d2f72(float,float) -> c
    boolean pan(float,float,float,float) -> a
    boolean zoom$2548a39() -> a
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2 -> com.badlogic.gdx.f.a.c.c:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable -> com.badlogic.gdx.f.a.c.d:
    float leftWidth -> a
    float rightWidth -> b
    float topHeight -> c
    float bottomHeight -> d
    float minWidth -> e
    float minHeight -> f
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    float getLeftWidth() -> a
    void setLeftWidth(float) -> a
    float getRightWidth() -> b
    void setRightWidth(float) -> b
    float getTopHeight() -> c
    void setTopHeight(float) -> c
    float getBottomHeight() -> d
    void setBottomHeight(float) -> d
    float getMinWidth() -> e
    void setMinWidth(float) -> e
    float getMinHeight() -> f
    void setMinHeight(float) -> f
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener -> com.badlogic.gdx.f.a.c.e:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    void changed$d8a80ea(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent -> com.badlogic.gdx.f.a.c.f:
com.badlogic.gdx.scenes.scene2d.utils.ClickListener -> com.badlogic.gdx.f.a.c.g:
    float tapSquareSize -> a
    float touchDownX -> b
    float touchDownY -> c
    int pressedPointer -> d
    int button -> e
    boolean pressed -> f
    boolean over -> g
    boolean cancelled -> h
    long tapCountInterval -> i
    int tapCount -> j
    long lastTapTime -> k
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void enter$6049651d(int) -> a
    void exit$6049651d(int) -> b
    void clicked$43069389(com.badlogic.gdx.scenes.scene2d.InputEvent) -> a
    boolean isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float) -> a
    boolean isPressed() -> c
    boolean isOver() -> d
    int getTapCount() -> e
com.badlogic.gdx.scenes.scene2d.utils.Cullable -> com.badlogic.gdx.f.a.c.h:
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.scenes.scene2d.utils.DragListener -> com.badlogic.gdx.f.a.c.i:
    float tapSquareSize -> a
    float touchDownX -> b
    float touchDownY -> c
    int pressedPointer -> d
    int button -> e
    boolean dragging -> f
    float deltaX -> g
    float deltaY -> h
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void drag$1dcb6a94(com.badlogic.gdx.scenes.scene2d.InputEvent) -> a
    void dragStop$1dcb6a94() -> c
    float getTouchDownX() -> d
    float getTouchDownY() -> e
    float getDeltaX() -> f
    float getDeltaY() -> g
com.badlogic.gdx.scenes.scene2d.utils.Drawable -> com.badlogic.gdx.f.a.c.j:
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    float getLeftWidth() -> a
    float getRightWidth() -> b
    float getTopHeight() -> c
    float getBottomHeight() -> d
    float getMinWidth() -> e
    float getMinHeight() -> f
com.badlogic.gdx.scenes.scene2d.utils.FocusListener -> com.badlogic.gdx.f.a.c.k:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    void keyboardFocusChanged$5cca10c6(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,boolean) -> a
    void scrollFocusChanged$5cca10c6(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,boolean) -> b
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1 -> com.badlogic.gdx.f.a.c.l:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$utils$FocusListener$FocusEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent -> com.badlogic.gdx.f.a.c.m:
    boolean focused -> a
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type type -> b
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> c
    void reset() -> b
    boolean isFocused() -> l
    void setFocused(boolean) -> b
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type getType() -> m
    void setType(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type) -> a
    com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor() -> n
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type -> com.badlogic.gdx.f.a.c.n:
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type keyboard -> a
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type scroll -> b
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] $VALUES -> c
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] values() -> values
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.scenes.scene2d.utils.Layout -> com.badlogic.gdx.f.a.c.o:
    void invalidate() -> a_
    void invalidateHierarchy() -> c_
    void validate() -> d_
    float getMinWidth() -> G
    float getMinHeight() -> H
    float getPrefWidth() -> E
    float getPrefHeight() -> F
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable -> com.badlogic.gdx.f.a.c.p:
    com.badlogic.gdx.graphics.g2d.NinePatch patch -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    void setPatch(com.badlogic.gdx.graphics.g2d.NinePatch) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch() -> g
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack -> com.badlogic.gdx.f.a.c.q:
    com.badlogic.gdx.utils.Array scissors -> c
    com.badlogic.gdx.math.Vector3 tmp -> a
    com.badlogic.gdx.math.Rectangle viewport -> b
    boolean pushScissors(com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.math.Rectangle popScissors() -> a
    void calculateScissors(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    void toWindowCoordinates(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable -> com.badlogic.gdx.f.a.c.r:
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    void setSprite(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    com.badlogic.gdx.graphics.g2d.Sprite getSprite() -> g
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable -> com.badlogic.gdx.f.a.c.s:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> g
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable -> com.badlogic.gdx.f.a.c.t:
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.a:
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    com.badlogic.gdx.utils.Array$ArrayIterator iterator -> d
    void add(java.lang.Object) -> a
    void addAll(com.badlogic.gdx.utils.Array) -> a
    java.lang.Object get(int) -> a
    void insert(int,java.lang.Object) -> a
    boolean contains$4cfd3ce7(java.lang.Object) -> b
    int indexOf(java.lang.Object,boolean) -> a
    boolean removeValue(java.lang.Object,boolean) -> b
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    java.lang.Object peek() -> b
    void clear() -> c
    java.lang.Object[] ensureCapacity(int) -> c
    java.lang.Object[] resize(int) -> d
    void sort(java.util.Comparator) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> d
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.b:
    com.badlogic.gdx.utils.Array array -> b
    int index -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.ArrayMap -> com.badlogic.gdx.utils.c:
    java.lang.Object[] keys -> a
    java.lang.Object[] values -> b
    int size -> c
    boolean ordered -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Base64Coder -> com.badlogic.gdx.utils.d:
    char[] map1 -> a
    byte[] map2 -> b
    java.lang.String encodeString(java.lang.String) -> a
    char[] encode(byte[]) -> a
    java.lang.String decodeString(java.lang.String) -> b
    byte[] decode(java.lang.String) -> c
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy$154271e7(float[],java.nio.Buffer,int) -> a
    java.nio.FloatBuffer newFloatBuffer(int) -> a
    java.nio.ByteBuffer newByteBuffer(int) -> b
    java.nio.IntBuffer newIntBuffer$ba72910() -> a
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> c
    void freeMemory(java.nio.ByteBuffer) -> freeMemory
    java.nio.ByteBuffer newDisposableByteBuffer(int) -> newDisposableByteBuffer
    void copyJni(float[],java.nio.Buffer,int,int) -> copyJni
com.badlogic.gdx.utils.Clipboard -> com.badlogic.gdx.utils.e:
    java.lang.String getContents() -> a
    void setContents(java.lang.String) -> a
com.badlogic.gdx.utils.DelayedRemovalArray -> com.badlogic.gdx.utils.f:
    boolean iterating -> d
    com.badlogic.gdx.utils.IntArray remove -> e
    void begin() -> e
    void end() -> f
    void remove(int) -> e
    boolean removeValue(java.lang.Object,boolean) -> b
    java.lang.Object removeIndex(int) -> b
    void insert(int,java.lang.Object) -> a
    java.lang.Object pop() -> a
    void clear() -> c
    void sort(java.util.Comparator) -> a
com.badlogic.gdx.utils.Disposable -> com.badlogic.gdx.utils.g:
    void dispose() -> e
com.badlogic.gdx.utils.FloatArray -> com.badlogic.gdx.utils.h:
    float[] items -> a
    int size -> b
    boolean ordered -> c
    void add(float) -> a
    float get(int) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.GdxNativesLoader -> com.badlogic.gdx.utils.i:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    void load() -> a
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.j:
com.badlogic.gdx.utils.IntArray -> com.badlogic.gdx.utils.k:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    void add(int) -> a
    void insert(int,int) -> a
    int pop() -> a
    void shrink() -> b
    int[] resize(int) -> b
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntMap -> com.badlogic.gdx.utils.l:
    int size -> a
    int[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    float loadFactor -> h
    int hashShift -> i
    int mask -> j
    int threshold -> k
    int stashCapacity -> l
    int pushIterations -> m
    java.lang.Object put(int,java.lang.Object) -> a
    void push(int,java.lang.Object,int,int,int,int,int,int) -> a
    java.lang.Object get(int) -> a
    java.lang.Object remove(int) -> b
    boolean containsKey(int) -> c
    void resize(int) -> d
    int hash2(int) -> e
    int hash3(int) -> f
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Json -> com.badlogic.gdx.utils.m:
    com.badlogic.gdx.utils.JsonWriter writer -> a
    java.lang.String typeName -> b
    boolean usePrototypes -> c
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> d
    com.badlogic.gdx.utils.ObjectMap typeToFields -> e
    com.badlogic.gdx.utils.ObjectMap tagToClass -> f
    com.badlogic.gdx.utils.ObjectMap classToTag -> g
    com.badlogic.gdx.utils.ObjectMap classToSerializer -> h
    com.badlogic.gdx.utils.ObjectMap classToDefaultValues -> i
    boolean ignoreUnknownFields -> j
    void setTypeName$552c4e01() -> a
    void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$Serializer) -> a
    void setUsePrototypes$1385ff() -> b
    com.badlogic.gdx.utils.ObjectMap cacheFields(java.lang.Class) -> a
    java.lang.String toJson(java.lang.Object) -> a
    void writeFields(java.lang.Object) -> b
    java.lang.Object[] getDefaultValues(java.lang.Class) -> b
    void writeValue(java.lang.String,java.lang.Object) -> a
    void writeValue(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Class) -> a
    void writeValue(java.lang.Object,java.lang.Class,java.lang.Class) -> a
    void writeObjectStart(java.lang.String) -> a
    void writeObjectStart(java.lang.Class,java.lang.Class) -> a
    void writeObjectEnd() -> c
    void writeArrayStart() -> d
    void writeArrayEnd() -> e
    java.lang.Object fromJson(java.lang.Class,com.badlogic.gdx.files.FileHandle) -> a
    java.lang.Object fromJson(java.lang.Class,java.lang.String) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Object) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object) -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object) -> a
    java.lang.String convertToString(java.lang.Object) -> c
    java.lang.Object newInstance(java.lang.Class) -> c
com.badlogic.gdx.utils.Json$FieldMetadata -> com.badlogic.gdx.utils.n:
    java.lang.reflect.Field field -> a
    java.lang.Class elementType -> b
com.badlogic.gdx.utils.Json$ReadOnlySerializer -> com.badlogic.gdx.utils.o:
com.badlogic.gdx.utils.Json$Serializable -> com.badlogic.gdx.utils.p:
    void write(com.badlogic.gdx.utils.Json) -> a
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.OrderedMap) -> a
com.badlogic.gdx.utils.Json$Serializer -> com.badlogic.gdx.utils.q:
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.utils.JsonReader -> com.badlogic.gdx.utils.r:
    byte[] _json_actions -> a
    short[] _json_key_offsets -> b
    char[] _json_trans_keys -> c
    byte[] _json_single_lengths -> d
    byte[] _json_range_lengths -> e
    short[] _json_index_offsets -> f
    byte[] _json_trans_targs -> g
    byte[] _json_trans_actions -> h
    byte[] _json_eof_actions -> i
    com.badlogic.gdx.utils.Array elements -> j
    java.lang.Object root -> k
    java.lang.Object current -> l
    java.lang.Object parse(java.lang.String) -> a
    java.lang.Object parse(java.io.Reader) -> a
    java.lang.Object parse(java.io.InputStream) -> a
    java.lang.Object parse(com.badlogic.gdx.files.FileHandle) -> a
    java.lang.Object parse$1699830b(char[],int) -> a
    short[] init__json_index_offsets_0() -> a
    byte[] init__json_trans_targs_0() -> b
    byte[] init__json_trans_actions_0() -> c
    void set(java.lang.String,java.lang.Object) -> a
    void pop() -> d
    void number(java.lang.String,float) -> a
    void bool(java.lang.String,boolean) -> a
    java.lang.String unescape(java.lang.String) -> b
com.badlogic.gdx.utils.JsonWriter -> com.badlogic.gdx.utils.s:
    java.io.Writer writer -> a
    com.badlogic.gdx.utils.Array stack -> b
    com.badlogic.gdx.utils.JsonWriter$JsonObject current -> c
    boolean named -> d
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> e
    void setOutputType(com.badlogic.gdx.utils.JsonWriter$OutputType) -> a
    com.badlogic.gdx.utils.JsonWriter name(java.lang.String) -> a
    com.badlogic.gdx.utils.JsonWriter object() -> a
    com.badlogic.gdx.utils.JsonWriter array() -> b
    com.badlogic.gdx.utils.JsonWriter value(java.lang.Object) -> a
    com.badlogic.gdx.utils.JsonWriter array(java.lang.String) -> b
    com.badlogic.gdx.utils.JsonWriter set(java.lang.String,java.lang.Object) -> a
    com.badlogic.gdx.utils.JsonWriter pop() -> c
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.badlogic.gdx.utils.JsonWriter$1 -> com.badlogic.gdx.utils.t:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonWriter$OutputType -> a
com.badlogic.gdx.utils.JsonWriter$JsonObject -> com.badlogic.gdx.utils.u:
    boolean array -> a
    boolean needsComma -> b
    com.badlogic.gdx.utils.JsonWriter this$0 -> c
com.badlogic.gdx.utils.JsonWriter$OutputType -> com.badlogic.gdx.utils.v:
    com.badlogic.gdx.utils.JsonWriter$OutputType json -> a
    com.badlogic.gdx.utils.JsonWriter$OutputType javascript -> b
    com.badlogic.gdx.utils.JsonWriter$OutputType minimal -> c
    java.util.regex.Pattern javascriptPattern -> d
    java.util.regex.Pattern minimalValuePattern -> e
    java.util.regex.Pattern minimalNamePattern -> f
    com.badlogic.gdx.utils.JsonWriter$OutputType[] $VALUES -> g
    com.badlogic.gdx.utils.JsonWriter$OutputType[] values() -> values
    com.badlogic.gdx.utils.JsonWriter$OutputType valueOf(java.lang.String) -> valueOf
    java.lang.String quoteValue(java.lang.Object) -> a
    java.lang.String quoteName(java.lang.String) -> a
com.badlogic.gdx.utils.Logger -> com.badlogic.gdx.utils.w:
    java.lang.String tag -> a
    int level -> b
    void debug(java.lang.String) -> a
    void info(java.lang.String) -> b
    void error(java.lang.String,java.lang.Throwable) -> a
    int getLevel() -> a
com.badlogic.gdx.utils.LongMap -> com.badlogic.gdx.utils.x:
    int size -> a
    long[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    float loadFactor -> h
    int hashShift -> i
    int mask -> j
    int threshold -> k
    int stashCapacity -> l
    int pushIterations -> m
    java.lang.Object put(long,java.lang.Object) -> a
    void push(long,java.lang.Object,int,long,int,long,int,long) -> a
    java.lang.Object remove(long) -> a
    void resize(int) -> a
    int hash2(long) -> b
    int hash3(long) -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectIntMap -> com.badlogic.gdx.utils.y:
    int size -> a
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    void put(java.lang.Object,int) -> a
    void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    int get(java.lang.Object,int) -> b
    void clear() -> a
    void resize(int) -> a
    int hash2(int) -> b
    int hash3(int) -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap -> com.badlogic.gdx.utils.z:
    int size -> a
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectMap$Entries entries -> l
    com.badlogic.gdx.utils.ObjectMap$Values values -> m
    com.badlogic.gdx.utils.ObjectMap$Keys keys -> n
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object put_internal(java.lang.Object,java.lang.Object) -> b
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean containsKey(java.lang.Object) -> c
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    com.badlogic.gdx.utils.ObjectMap$Values values() -> c
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> d
com.badlogic.gdx.utils.ObjectMap$Entries -> com.badlogic.gdx.utils.aa:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> a
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> b
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectMap$Entry -> com.badlogic.gdx.utils.ab:
    java.lang.Object key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> com.badlogic.gdx.utils.ac:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> a
    void remove() -> remove
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.badlogic.gdx.utils.ad:
    boolean hasNext -> b
    com.badlogic.gdx.utils.ObjectMap map -> c
    int nextIndex -> d
    int currentIndex -> e
    void reset() -> b
    void advance() -> c
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap$Values -> com.badlogic.gdx.utils.ae:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> b
com.badlogic.gdx.utils.OrderedMap -> com.badlogic.gdx.utils.af:
    com.badlogic.gdx.utils.Array keys -> f
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void clear() -> a
    com.badlogic.gdx.utils.Array orderedKeys() -> e
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> d
    com.badlogic.gdx.utils.ObjectMap$Values values() -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.OrderedMap$1 -> com.badlogic.gdx.utils.ag:
    com.badlogic.gdx.utils.OrderedMap this$0 -> f
    void advance() -> c
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.OrderedMap$2 -> com.badlogic.gdx.utils.ah:
    com.badlogic.gdx.utils.OrderedMap this$0 -> a
    void advance() -> c
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.OrderedMap$3 -> com.badlogic.gdx.utils.ai:
    com.badlogic.gdx.utils.OrderedMap this$0 -> a
    void advance() -> c
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.aj:
    int max -> b
    com.badlogic.gdx.utils.Array freeObjects -> a
    java.lang.Object newObject() -> a
    java.lang.Object obtain() -> b
    void free(java.lang.Object) -> a
com.badlogic.gdx.utils.Pool$Poolable -> com.badlogic.gdx.utils.ak:
    void reset() -> b
com.badlogic.gdx.utils.Pools -> com.badlogic.gdx.utils.al:
    com.badlogic.gdx.utils.ObjectMap typePools -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class) -> a
    java.lang.Object obtain(java.lang.Class) -> b
    void free(java.lang.Object) -> a
com.badlogic.gdx.utils.ReflectionPool -> com.badlogic.gdx.utils.am:
    java.lang.Class type -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.utils.Scaling -> com.badlogic.gdx.utils.an:
    com.badlogic.gdx.utils.Scaling fit -> a
    com.badlogic.gdx.utils.Scaling fill -> b
    com.badlogic.gdx.utils.Scaling fillX -> c
    com.badlogic.gdx.utils.Scaling fillY -> d
    com.badlogic.gdx.utils.Scaling stretch -> e
    com.badlogic.gdx.utils.Scaling stretchX -> f
    com.badlogic.gdx.utils.Scaling stretchY -> g
    com.badlogic.gdx.utils.Scaling none -> h
    com.badlogic.gdx.math.Vector2 temp -> i
    com.badlogic.gdx.utils.Scaling[] $VALUES -> j
    com.badlogic.gdx.utils.Scaling[] values() -> values
    com.badlogic.gdx.utils.Scaling valueOf(java.lang.String) -> valueOf
    com.badlogic.gdx.math.Vector2 apply(float,float,float,float) -> a
com.badlogic.gdx.utils.Scaling$1 -> com.badlogic.gdx.utils.ao:
    int[] $SwitchMap$com$badlogic$gdx$utils$Scaling -> a
com.badlogic.gdx.utils.SerializationException -> com.badlogic.gdx.utils.ap:
    java.lang.StringBuffer trace -> a
    java.lang.String getMessage() -> getMessage
    void addTrace(java.lang.String) -> a
com.badlogic.gdx.utils.SharedLibraryLoader -> com.badlogic.gdx.utils.aq:
    boolean isWindows -> a
    boolean isLinux -> b
    boolean isMac -> c
    boolean isAndroid -> d
    boolean is64Bit -> e
    java.util.HashSet loadedLibraries -> f
    java.lang.String nativesJar -> g
    java.lang.String crc(java.io.InputStream) -> a
    void load(java.lang.String) -> a
    java.io.InputStream readFile(java.lang.String) -> b
    java.io.File extractFile$7a2fde5c(java.lang.String) -> c
com.badlogic.gdx.utils.SnapshotArray -> com.badlogic.gdx.utils.ar:
    java.lang.Object[] snapshot -> d
    java.lang.Object[] recycled -> e
    int snapshots -> f
    java.lang.Object[] begin() -> e
    void end() -> f
    void modified() -> g
    void insert(int,java.lang.Object) -> a
    boolean removeValue(java.lang.Object,boolean) -> b
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    void clear() -> c
    void sort(java.util.Comparator) -> a
com.badlogic.gdx.utils.Sort -> com.badlogic.gdx.utils.as:
    com.badlogic.gdx.utils.Sort instance -> a
    com.badlogic.gdx.utils.TimSort timSort -> b
    void sort$6fa18035(java.lang.Object[],java.util.Comparator,int) -> a
    com.badlogic.gdx.utils.Sort instance() -> a
com.badlogic.gdx.utils.StringBuilder -> com.badlogic.gdx.utils.at:
    char[] chars -> a
    int length -> b
    char[] digits -> c
    void enlargeBuffer(int) -> b
    void appendNull() -> b
    void append0(char[],int,int) -> b
    void append0(char) -> b
    void append0(java.lang.String) -> b
    char charAt(int) -> charAt
    int length() -> length
    void setLength$13462e() -> a
    java.lang.String toString() -> toString
    java.lang.CharSequence subSequence(int,int) -> subSequence
    com.badlogic.gdx.utils.StringBuilder append(char) -> a
    com.badlogic.gdx.utils.StringBuilder append(int) -> a
    com.badlogic.gdx.utils.StringBuilder append(long) -> a
    com.badlogic.gdx.utils.StringBuilder append(float) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> a
    com.badlogic.gdx.utils.StringBuilder append(char[]) -> a
    com.badlogic.gdx.utils.StringBuilder append(char[],int,int) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence) -> a
    com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.badlogic.gdx.utils.TimSort -> com.badlogic.gdx.utils.au:
    java.lang.Object[] a -> a
    java.util.Comparator c -> b
    int minGallop -> c
    java.lang.Object[] tmp -> d
    int tmpCount -> e
    int stackSize -> f
    int[] runBase -> g
    int[] runLen -> h
    void doSort(java.lang.Object[],java.util.Comparator,int,int) -> a
    void binarySort(java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator) -> a
    int minRunLength(int) -> a
    void mergeCollapse() -> a
    void mergeForceCollapse() -> b
    void mergeAt(int) -> b
    int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> b
    void mergeHi(int,int,int,int) -> a
    java.lang.Object[] ensureCapacity(int) -> c
com.badlogic.gdx.utils.Timer -> com.badlogic.gdx.utils.av:
    com.badlogic.gdx.utils.Array instances -> a
    com.badlogic.gdx.utils.Timer instance -> b
    com.badlogic.gdx.utils.Array tasks -> c
    void scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float,int) -> a
    float update(float) -> a
    void wake() -> a
    void schedule(com.badlogic.gdx.utils.Timer$Task,float) -> a
    void schedule(com.badlogic.gdx.utils.Timer$Task,float,float) -> a
com.badlogic.gdx.utils.Timer$1 -> com.badlogic.gdx.utils.aw:
    void run() -> run
com.badlogic.gdx.utils.Timer$Task -> com.badlogic.gdx.utils.ax:
    float executeTime -> c
    float intervalSeconds -> d
    int repeatCount -> e
    void cancel() -> a
    boolean isScheduled() -> b
com.badlogic.gdx.utils.XmlReader -> com.badlogic.gdx.utils.ay:
    com.badlogic.gdx.utils.Array elements -> a
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    com.badlogic.gdx.utils.XmlReader$Element current -> c
    com.badlogic.gdx.utils.StringBuilder textBuffer -> d
    byte[] _xml_actions -> e
    byte[] _xml_key_offsets -> f
    char[] _xml_trans_keys -> g
    byte[] _xml_single_lengths -> h
    byte[] _xml_range_lengths -> i
    short[] _xml_index_offsets -> j
    byte[] _xml_indicies -> k
    byte[] _xml_trans_targs -> l
    byte[] _xml_trans_actions -> m
    com.badlogic.gdx.utils.XmlReader$Element parse$676b1f72() -> b
    com.badlogic.gdx.utils.XmlReader$Element parse(java.io.Reader) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse$17989470(char[],int) -> a
    void open(java.lang.String) -> a
    void attribute(java.lang.String,java.lang.String) -> a
    void text(java.lang.String) -> b
    void close() -> a
com.badlogic.gdx.utils.XmlReader$Element -> com.badlogic.gdx.utils.az:
    java.lang.String name -> a
    com.badlogic.gdx.utils.ObjectMap attributes -> b
    com.badlogic.gdx.utils.Array children -> c
    java.lang.String text -> d
    com.badlogic.gdx.utils.XmlReader$Element parent -> e
    java.lang.String getName() -> a
    void setAttribute(java.lang.String,java.lang.String) -> a
    void addChild(com.badlogic.gdx.utils.XmlReader$Element) -> a
    java.lang.String getText() -> b
    void setText(java.lang.String) -> a
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> b
com.esotericsoftware.tablelayout.BaseTableLayout -> com.b.a.a:
    com.esotericsoftware.tablelayout.Toolkit toolkit -> c
    java.lang.Object table -> d
    int columns -> a
    int rows -> b
    java.util.ArrayList cells -> k
    com.esotericsoftware.tablelayout.Cell cellDefaults -> l
    java.util.ArrayList columnDefaults -> m
    com.esotericsoftware.tablelayout.Cell rowDefaults -> n
    boolean sizeInvalid -> o
    float[] columnMinWidth -> p
    float[] rowMinHeight -> q
    float[] columnPrefWidth -> r
    float[] rowPrefHeight -> s
    float tableMinWidth -> t
    float tableMinHeight -> u
    float tablePrefWidth -> v
    float tablePrefHeight -> w
    float[] columnWidth -> x
    float[] rowHeight -> y
    float[] expandWidth -> z
    float[] expandHeight -> A
    float[] columnWeightedWidth -> B
    float[] rowWeightedHeight -> C
    com.esotericsoftware.tablelayout.Value padTop -> e
    com.esotericsoftware.tablelayout.Value padLeft -> f
    com.esotericsoftware.tablelayout.Value padBottom -> g
    com.esotericsoftware.tablelayout.Value padRight -> h
    int align -> i
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug debug -> j
    void invalidate() -> b
    com.esotericsoftware.tablelayout.Cell add(java.lang.Object) -> a
    com.esotericsoftware.tablelayout.Cell row() -> c
    void endRow() -> a
    com.esotericsoftware.tablelayout.Cell columnDefaults$b468e46() -> d
    void clear() -> e
    com.esotericsoftware.tablelayout.Cell getCell(java.lang.Object) -> b
    java.util.List getCells() -> f
    java.lang.Object getTable() -> g
    void setTable(java.lang.Object) -> c
    float getMinWidth() -> h
    float getMinHeight() -> i
    float getPrefWidth() -> j
    float getPrefHeight() -> k
    com.esotericsoftware.tablelayout.Cell defaults() -> l
    com.esotericsoftware.tablelayout.BaseTableLayout pad$7ec84e0b() -> m
    com.esotericsoftware.tablelayout.BaseTableLayout padTop(float) -> a
    com.esotericsoftware.tablelayout.BaseTableLayout padLeft(float) -> b
    com.esotericsoftware.tablelayout.BaseTableLayout padBottom(float) -> c
    com.esotericsoftware.tablelayout.BaseTableLayout padRight(float) -> d
    com.esotericsoftware.tablelayout.BaseTableLayout debug() -> n
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug getDebug() -> o
    float getPadTop() -> p
    float getPadLeft() -> q
    float getPadBottom() -> r
    float getPadRight() -> s
    float[] ensureSize(float[],int) -> a
    float w(com.esotericsoftware.tablelayout.Value) -> a
    float h(com.esotericsoftware.tablelayout.Value) -> b
    float w(com.esotericsoftware.tablelayout.Value,com.esotericsoftware.tablelayout.Cell) -> a
    float h(com.esotericsoftware.tablelayout.Value,com.esotericsoftware.tablelayout.Cell) -> b
    void computeSize() -> t
    void layout$4098370b(float,float) -> a
com.esotericsoftware.tablelayout.BaseTableLayout$Debug -> com.b.a.b:
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug none -> a
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug all -> b
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug table -> c
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug cell -> d
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug widget -> e
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug[] $VALUES -> f
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug[] values() -> values
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug valueOf(java.lang.String) -> valueOf
com.esotericsoftware.tablelayout.Cell -> com.b.a.c:
    com.esotericsoftware.tablelayout.Value minWidth -> a
    com.esotericsoftware.tablelayout.Value minHeight -> b
    com.esotericsoftware.tablelayout.Value prefWidth -> c
    com.esotericsoftware.tablelayout.Value prefHeight -> d
    com.esotericsoftware.tablelayout.Value maxWidth -> e
    com.esotericsoftware.tablelayout.Value maxHeight -> f
    com.esotericsoftware.tablelayout.Value spaceTop -> g
    com.esotericsoftware.tablelayout.Value spaceLeft -> h
    com.esotericsoftware.tablelayout.Value spaceBottom -> i
    com.esotericsoftware.tablelayout.Value spaceRight -> j
    com.esotericsoftware.tablelayout.Value padTop -> k
    com.esotericsoftware.tablelayout.Value padLeft -> l
    com.esotericsoftware.tablelayout.Value padBottom -> m
    com.esotericsoftware.tablelayout.Value padRight -> n
    java.lang.Float fillX -> o
    java.lang.Float fillY -> p
    java.lang.Integer align -> q
    java.lang.Integer expandX -> r
    java.lang.Integer expandY -> s
    java.lang.Boolean ignore -> t
    java.lang.Integer colspan -> u
    java.lang.Boolean uniformX -> v
    java.lang.Boolean uniformY -> w
    java.lang.Object widget -> x
    float widgetX -> y
    float widgetY -> z
    float widgetWidth -> A
    float widgetHeight -> B
    com.esotericsoftware.tablelayout.BaseTableLayout layout -> K
    boolean endRow -> C
    int column -> D
    int row -> E
    int cellAboveIndex -> F
    float computedPadTop -> G
    float computedPadLeft -> H
    float computedPadBottom -> I
    float computedPadRight -> J
    void merge(com.esotericsoftware.tablelayout.Cell) -> a
    com.esotericsoftware.tablelayout.Cell setWidget(java.lang.Object) -> a
    java.lang.Object getWidget() -> a
    com.esotericsoftware.tablelayout.Cell width(float) -> a
    com.esotericsoftware.tablelayout.Cell height(float) -> b
    com.esotericsoftware.tablelayout.Cell space$65660d43() -> b
    com.esotericsoftware.tablelayout.Cell spaceTop$65660d43() -> c
    com.esotericsoftware.tablelayout.Cell spaceLeft$65660d43() -> d
    com.esotericsoftware.tablelayout.Cell spaceBottom(float) -> c
    com.esotericsoftware.tablelayout.Cell spaceRight$65660d43() -> e
    com.esotericsoftware.tablelayout.Cell pad(float) -> d
    com.esotericsoftware.tablelayout.Cell pad(float,float,float,float) -> a
    com.esotericsoftware.tablelayout.Cell padTop(float) -> e
    com.esotericsoftware.tablelayout.Cell padLeft(float) -> f
    com.esotericsoftware.tablelayout.Cell padBottom(float) -> g
    com.esotericsoftware.tablelayout.Cell padRight(float) -> h
    com.esotericsoftware.tablelayout.Cell fill() -> f
    com.esotericsoftware.tablelayout.Cell fillX() -> g
    com.esotericsoftware.tablelayout.Cell fillY() -> h
    com.esotericsoftware.tablelayout.Cell center() -> i
    com.esotericsoftware.tablelayout.Cell top() -> j
    com.esotericsoftware.tablelayout.Cell left() -> k
    com.esotericsoftware.tablelayout.Cell right() -> l
    com.esotericsoftware.tablelayout.Cell expand() -> m
    boolean getIgnore() -> n
    com.esotericsoftware.tablelayout.Cell colspan(java.lang.Integer) -> a
    com.esotericsoftware.tablelayout.Cell uniformX() -> o
    float getWidgetX() -> p
    void setWidgetX(float) -> i
    float getWidgetY() -> q
    void setWidgetY(float) -> j
    float getWidgetWidth() -> r
    void setWidgetWidth(float) -> k
    float getWidgetHeight() -> s
    void setWidgetHeight(float) -> l
com.esotericsoftware.tablelayout.Toolkit -> com.b.a.d:
    com.esotericsoftware.tablelayout.Toolkit instance -> b
    void addChild(java.lang.Object,java.lang.Object) -> b
    void removeChild(java.lang.Object,java.lang.Object) -> a
    float getMinWidth(java.lang.Object) -> d
    float getMinHeight(java.lang.Object) -> c
    float getPrefWidth(java.lang.Object) -> b
    float getPrefHeight(java.lang.Object) -> a
    void clearDebugRectangles(com.esotericsoftware.tablelayout.BaseTableLayout) -> a
    void addDebugRectangle(com.esotericsoftware.tablelayout.BaseTableLayout,com.esotericsoftware.tablelayout.BaseTableLayout$Debug,float,float,float,float) -> a
com.esotericsoftware.tablelayout.Value -> com.b.a.e:
    com.esotericsoftware.tablelayout.Value zero -> a
    com.esotericsoftware.tablelayout.Value minWidth -> b
    com.esotericsoftware.tablelayout.Value minHeight -> c
    com.esotericsoftware.tablelayout.Value prefWidth -> d
    com.esotericsoftware.tablelayout.Value prefHeight -> e
    com.esotericsoftware.tablelayout.Value maxWidth -> f
    com.esotericsoftware.tablelayout.Value maxHeight -> g
    float get$5d527801() -> a
    float get(com.esotericsoftware.tablelayout.Cell) -> a
    float width$5d527801() -> b
    float height$5d527801() -> c
    float width(com.esotericsoftware.tablelayout.Cell) -> b
    float height(com.esotericsoftware.tablelayout.Cell) -> c
com.esotericsoftware.tablelayout.Value$1 -> com.b.a.f:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
    float get$5d527801() -> a
com.esotericsoftware.tablelayout.Value$2 -> com.b.a.g:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$3 -> com.b.a.h:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$4 -> com.b.a.i:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$5 -> com.b.a.j:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$6 -> com.b.a.k:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$7 -> com.b.a.l:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$CellValue -> com.b.a.m:
    float get$5d527801() -> a
com.esotericsoftware.tablelayout.Value$FixedValue -> com.b.a.n:
    float value -> h
    float get$5d527801() -> a
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.mazalearn.scienceengine.AbstractPlatformAdapter -> com.mazalearn.scienceengine.a:
    com.mazalearn.scienceengine.app.services.IMessage messages -> a
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform platform -> b
    void browseURL(java.lang.String) -> a
    boolean playVideo(java.io.File) -> a
    com.badlogic.gdx.scenes.scene2d.Stage createLevelEditor(com.mazalearn.scienceengine.core.controller.IScience2DController,com.mazalearn.scienceengine.app.screens.AbstractScreen) -> a
    com.mazalearn.scienceengine.app.services.IMessage getMsg() -> a
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform getPlatform() -> b
    boolean supportsLanguage() -> c
    void takeSnapshot(com.badlogic.gdx.scenes.scene2d.Stage,com.mazalearn.scienceengine.Topic,com.mazalearn.scienceengine.Topic,int,int,int,int) -> a
    void launchPurchaseFlow(java.lang.String,com.mazalearn.scienceengine.billing.IBilling) -> a
    void queryInventory(java.util.List,com.mazalearn.scienceengine.billing.IBilling) -> a
    boolean supportsSpeech() -> d
    void provisionSpeech() -> e
    void speak(java.lang.String,boolean) -> a
com.mazalearn.scienceengine.AbstractPlatformAdapter$1 -> com.mazalearn.scienceengine.b:
    com.mazalearn.scienceengine.AbstractPlatformAdapter this$0 -> a
    com.mazalearn.scienceengine.billing.IBilling val$billing -> b
    java.lang.String val$productId -> c
    void run() -> run
com.mazalearn.scienceengine.AbstractPlatformAdapter$2 -> com.mazalearn.scienceengine.c:
    com.mazalearn.scienceengine.AbstractPlatformAdapter this$0 -> a
    com.mazalearn.scienceengine.billing.IBilling val$billing -> b
    com.mazalearn.scienceengine.billing.Inventory val$inventory -> c
    void run() -> run
com.mazalearn.scienceengine.AndroidPlatformAdapter -> com.mazalearn.scienceengine.d:
    com.badlogic.gdx.backends.android.AndroidApplication application -> b
    com.mazalearn.scienceengine.billing.IabHelper iabHelper -> c
    android.speech.tts.TextToSpeech textToSpeech -> d
    java.lang.String deviceId -> e
    java.lang.String getDeviceId() -> f
    com.mazalearn.scienceengine.app.services.IMessage getMsg() -> a
    void browseURL(java.lang.String) -> a
    void launchPurchaseFlow(java.lang.String,com.mazalearn.scienceengine.billing.IBilling) -> a
    void queryInventory(java.util.List,com.mazalearn.scienceengine.billing.IBilling) -> a
    boolean verifyDeveloperPayload(com.mazalearn.scienceengine.billing.Purchase,java.lang.String) -> a
    boolean playVideo(java.io.File) -> a
    boolean supportsLanguage() -> c
    boolean supportsSpeech() -> d
    void speak(java.lang.String,boolean) -> a
    void provisionSpeech() -> e
    void setTts(android.speech.tts.TextToSpeech) -> a
    com.mazalearn.scienceengine.billing.IabHelper access$0(com.mazalearn.scienceengine.AndroidPlatformAdapter) -> a
com.mazalearn.scienceengine.AndroidPlatformAdapter$1 -> com.mazalearn.scienceengine.e:
    com.mazalearn.scienceengine.AndroidPlatformAdapter this$0 -> a
    com.mazalearn.scienceengine.billing.IBilling val$billing -> b
    java.lang.String val$productId -> c
    void onIabPurchaseFinished(com.mazalearn.scienceengine.billing.IabResult,com.mazalearn.scienceengine.billing.Purchase) -> a
com.mazalearn.scienceengine.AndroidPlatformAdapter$2 -> com.mazalearn.scienceengine.f:
    com.mazalearn.scienceengine.AndroidPlatformAdapter this$0 -> a
    java.util.List val$productList -> b
    com.mazalearn.scienceengine.billing.IBilling val$billing -> c
    void run() -> run
com.mazalearn.scienceengine.AndroidPlatformAdapter$2$1 -> com.mazalearn.scienceengine.g:
    com.mazalearn.scienceengine.AndroidPlatformAdapter$2 this$1 -> a
    com.mazalearn.scienceengine.billing.IBilling val$billing -> b
    void onQueryInventoryFinished(com.mazalearn.scienceengine.billing.IabResult,com.mazalearn.scienceengine.billing.Inventory) -> a
com.mazalearn.scienceengine.BasicMessages -> com.mazalearn.scienceengine.h:
    java.util.Map i18nMap -> a
    java.lang.String getString(java.lang.String) -> a
    java.lang.String getLanguage() -> a
    void setLanguage(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> a
    void setFont(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> a
com.mazalearn.scienceengine.DevMode -> com.mazalearn.scienceengine.i:
    int DEBUG -> a
    int DESIGN -> b
    int BILLING_DUMMY -> c
    int DEV_MODE -> d
    boolean isCheckMode(int) -> a
    void setMode$2563266(int) -> b
    void setDebug$1385ff() -> a
    void setDesign$1385ff() -> b
    void setDummyBilling$1385ff() -> c
    boolean isDebug() -> d
    boolean isDummyBilling() -> e
    boolean isDesign() -> f
com.mazalearn.scienceengine.Device -> com.mazalearn.scienceengine.j:
    com.mazalearn.scienceengine.Device Android -> a
    com.mazalearn.scienceengine.Device Nexus7 -> b
    com.mazalearn.scienceengine.Device IPad -> c
    com.mazalearn.scienceengine.Device IPhone -> d
    com.mazalearn.scienceengine.Device IPhone4 -> e
    com.mazalearn.scienceengine.Device IPhone5 -> f
    com.mazalearn.scienceengine.Device Desktop -> g
    com.mazalearn.scienceengine.Device GalaxyY -> h
    com.mazalearn.scienceengine.Device GalaxyS3 -> i
    com.mazalearn.scienceengine.Device GalaxyS4 -> j
    int height -> k
    int width -> l
    com.mazalearn.scienceengine.Device[] ENUM$VALUES -> m
    com.mazalearn.scienceengine.Device[] values() -> values
    com.mazalearn.scienceengine.Device valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.Installation -> com.mazalearn.scienceengine.k:
    java.lang.String sID -> a
    java.lang.String id(java.lang.String,java.lang.String) -> a
com.mazalearn.scienceengine.MainActivity -> com.mazalearn.scienceengine.MainActivity:
    com.mazalearn.scienceengine.billing.IabHelper iabHelper -> o
    com.mazalearn.scienceengine.AndroidPlatformAdapter platformAdapter -> p
    android.speech.tts.TextToSpeech mTts -> q
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void exit() -> d
    void onDestroy() -> onDestroy
    void syncPurchaseItems() -> e
    android.speech.tts.TextToSpeech access$0(com.mazalearn.scienceengine.MainActivity) -> a
    com.mazalearn.scienceengine.AndroidPlatformAdapter access$1(com.mazalearn.scienceengine.MainActivity) -> b
    void access$2$7da5458f(com.mazalearn.scienceengine.MainActivity) -> c
com.mazalearn.scienceengine.MainActivity$1 -> com.mazalearn.scienceengine.l:
    com.mazalearn.scienceengine.MainActivity this$0 -> a
    void onIabSetupFinished(com.mazalearn.scienceengine.billing.IabResult) -> a
com.mazalearn.scienceengine.MainActivity$2 -> com.mazalearn.scienceengine.m:
    com.mazalearn.scienceengine.MainActivity this$0 -> a
    void onInit(int) -> onInit
com.mazalearn.scienceengine.MainActivity$3 -> com.mazalearn.scienceengine.n:
    com.mazalearn.scienceengine.MainActivity this$0 -> a
    void onQueryInventoryFinished(com.mazalearn.scienceengine.billing.IabResult,com.mazalearn.scienceengine.billing.Inventory) -> a
com.mazalearn.scienceengine.Messages -> com.mazalearn.scienceengine.o:
    java.util.Locale locale -> a
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform platform -> b
    java.util.ResourceBundle resourceBundle -> c
    java.lang.String getString(java.lang.String) -> a
    java.lang.String getLanguage() -> a
    void setLanguage(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> a
    void setFont(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> a
com.mazalearn.scienceengine.NonWebPlatformAdapter -> com.mazalearn.scienceengine.p:
    byte[] responseBytes -> b
    com.badlogic.gdx.scenes.scene2d.Stage createLevelEditor(com.mazalearn.scienceengine.core.controller.IScience2DController,com.mazalearn.scienceengine.app.screens.AbstractScreen) -> a
    void getBytes(com.badlogic.gdx.graphics.Pixmap,byte[]) -> a
    void putBytes(com.badlogic.gdx.graphics.Pixmap,byte[]) -> b
    byte[] pixmap2Bytes(com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.graphics.Pixmap bytes2Pixmap(byte[]) -> a
    java.lang.String httpPost(java.lang.String,java.lang.String,java.util.Map,byte[]) -> a
    java.lang.String httpGet(java.lang.String) -> b
    java.lang.String getResponseBody(java.io.InputStream) -> a
    java.lang.String makeHeaderString(java.lang.String,java.lang.String,java.util.Map,int,java.lang.String) -> a
    void takeSnapshot(com.badlogic.gdx.scenes.scene2d.Stage,com.mazalearn.scienceengine.Topic,com.mazalearn.scienceengine.Topic,int,int,int,int) -> a
    java.lang.String getInstallationId() -> g
    java.lang.String getDeviceId() -> f
    void executeAsync(java.lang.Runnable) -> a
com.mazalearn.scienceengine.ScienceEngine -> com.mazalearn.scienceengine.q:
    java.lang.String LOG -> a
    com.mazalearn.scienceengine.DevMode DEV_MODE -> b
    com.mazalearn.scienceengine.ScienceEngine SCIENCE_ENGINE -> c
    com.badlogic.gdx.graphics.FPSLogger fpsLogger -> d
    java.lang.String SKIN_BASE -> e
    com.mazalearn.scienceengine.app.services.PreferencesManager preferencesManager -> f
    com.mazalearn.scienceengine.app.services.MusicManager musicManager -> g
    com.mazalearn.scienceengine.app.services.SoundManager soundManager -> h
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter platformAdapter -> i
    com.badlogic.gdx.assets.AssetManager assetManager -> j
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> k
    java.lang.String uri -> l
    java.util.Map atlasMap -> m
    com.mazalearn.scienceengine.core.model.Science2DBody selectedBody -> n
    boolean isProbeMode -> o
    com.mazalearn.scienceengine.app.services.EventLog eventLog -> p
    float time -> q
    java.util.Set pinnedBodies -> r
    long logicalTime -> s
    com.mazalearn.scienceengine.Device device -> t
    com.mazalearn.scienceengine.app.services.PreferencesManager getPreferencesManager() -> g
    com.mazalearn.scienceengine.app.services.MusicManager getMusicManager() -> h
    com.mazalearn.scienceengine.app.services.SoundManager getSoundManager() -> i
    com.badlogic.gdx.scenes.scene2d.ui.Skin getSkin() -> j
    void setPlatformAdapter(com.mazalearn.scienceengine.app.utils.IPlatformAdapter) -> a
    void create() -> a
    void resize(int,int) -> a
    com.mazalearn.scienceengine.Topic findSupportedTopic(java.lang.String) -> d
    void render() -> b
    void dispose() -> e
    void pause() -> c
    void resume() -> d
    void setScreen(com.badlogic.gdx.Screen) -> a
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter getPlatformAdapter() -> k
    com.mazalearn.scienceengine.app.services.IMessage getMsg() -> l
    com.mazalearn.scienceengine.core.model.Science2DBody getSelectedBody() -> m
    void selectBody(com.mazalearn.scienceengine.core.model.Science2DBody,com.mazalearn.scienceengine.core.view.IScience2DView) -> a
    void selectParameter(com.mazalearn.scienceengine.core.model.Science2DBody,com.mazalearn.scienceengine.core.model.IParameter,float,com.mazalearn.scienceengine.core.view.IScience2DView) -> a
    void selectParameter(com.mazalearn.scienceengine.core.model.Science2DBody,com.mazalearn.scienceengine.core.model.IParameter,boolean,com.mazalearn.scienceengine.core.view.IScience2DView) -> a
    void selectParameter$34529b6d(com.mazalearn.scienceengine.core.model.Science2DBody,com.mazalearn.scienceengine.core.model.IParameter,com.mazalearn.scienceengine.core.view.IScience2DView) -> a
    com.mazalearn.scienceengine.app.services.EventLog getEventLog() -> n
    void displayEntityStatus(com.mazalearn.scienceengine.core.model.Science2DBody,java.lang.String,com.mazalearn.scienceengine.core.view.IScience2DView) -> a
    void displayStatusMessage(com.badlogic.gdx.scenes.scene2d.Stage,com.mazalearn.scienceengine.StatusType,java.lang.String) -> a
    void setProbeMode(boolean) -> a
    boolean isProbeMode() -> o
    void addTimeElapsed(float) -> a
    float getTime() -> p
    boolean isPinned(com.mazalearn.scienceengine.core.model.Science2DBody) -> a
    void pin(com.mazalearn.scienceengine.core.model.Science2DBody,boolean) -> a
    void clearPins() -> q
    java.lang.String getUserName() -> r
    java.lang.String getHostPort() -> s
    long getLogicalTime() -> t
    void loadAtlas(java.lang.String) -> a
    void unloadAtlas(java.lang.String) -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion(java.lang.String) -> c
    com.badlogic.gdx.assets.AssetManager getAssetManager() -> u
com.mazalearn.scienceengine.ScreenComponent -> com.mazalearn.scienceengine.r:
    com.mazalearn.scienceengine.ScreenComponent TopBar -> a
    com.mazalearn.scienceengine.ScreenComponent BottomBar -> b
    com.mazalearn.scienceengine.ScreenComponent Title -> c
    com.mazalearn.scienceengine.ScreenComponent Status -> d
    com.mazalearn.scienceengine.ScreenComponent User -> e
    com.mazalearn.scienceengine.ScreenComponent Back -> f
    com.mazalearn.scienceengine.ScreenComponent Help -> g
    com.mazalearn.scienceengine.ScreenComponent ViewControls -> h
    com.mazalearn.scienceengine.ScreenComponent ModelControls -> i
    com.mazalearn.scienceengine.ScreenComponent Logo -> j
    com.mazalearn.scienceengine.ScreenComponent Scoreboard -> k
    com.mazalearn.scienceengine.ScreenComponent Idea -> l
    com.mazalearn.scienceengine.ScreenComponent NextButton -> m
    com.mazalearn.scienceengine.ScreenComponent ImageMessageBox -> n
    com.mazalearn.scienceengine.ScreenComponent Goal -> o
    com.mazalearn.scienceengine.ScreenComponent McqOption -> p
    com.mazalearn.scienceengine.ScreenComponent TimeTracker -> q
    com.mazalearn.scienceengine.ScreenComponent McqProgressInfo -> r
    com.mazalearn.scienceengine.ScreenComponent Hint -> s
    int xOffset -> x
    int yOffset -> y
    com.badlogic.gdx.graphics.Color color -> z
    boolean inAllScreens -> A
    boolean helpTour -> B
    com.mazalearn.scienceengine.ScreenComponent$XAlign xAlign -> C
    com.mazalearn.scienceengine.ScreenComponent$YAlign yAlign -> D
    int canonicalWidth -> E
    int canonicalHeight -> F
    float x -> G
    float y -> H
    float width -> I
    float height -> J
    int zIndex -> K
    float X_SCALE -> t
    float Y_SCALE -> u
    int VIEWPORT_HEIGHT -> v
    int VIEWPORT_WIDTH -> w
    int FontSize -> L
    int[] AVAILABLE_FONT_SIZES -> M
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$ScreenComponent$XAlign -> N
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$ScreenComponent$YAlign -> O
    com.mazalearn.scienceengine.ScreenComponent[] ENUM$VALUES -> P
    float getWidth() -> j
    float getHeight() -> k
    float getX() -> h
    float getY() -> i
    float getX(float) -> a
    float getY(float) -> b
    com.badlogic.gdx.graphics.Color getColor() -> a
    java.lang.String getLocalizedName() -> e_
    boolean isInAllScreens() -> c
    boolean showInHelpTour() -> d
    float getScaledX(float) -> c
    float getScaledY(float) -> d
    void scaleSize(com.badlogic.gdx.scenes.scene2d.Actor,float,float) -> a
    void scalePosition(com.badlogic.gdx.scenes.scene2d.Actor,float,float) -> b
    void scalePositionAndSize(com.badlogic.gdx.scenes.scene2d.Actor,float,float,float,float) -> a
    void setSize(int,int) -> a
    int selectFontSize(int) -> a
    int getFontSize() -> e
    java.lang.String getFont(float) -> e
    java.lang.String getComponentType() -> f
    int getZIndex() -> g
    void showHelp(com.badlogic.gdx.scenes.scene2d.Stage,boolean) -> a
    com.mazalearn.scienceengine.ScreenComponent[] values() -> values
    com.mazalearn.scienceengine.ScreenComponent valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$ScreenComponent$XAlign() -> l
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$ScreenComponent$YAlign() -> m
com.mazalearn.scienceengine.ScreenComponent$XAlign -> com.mazalearn.scienceengine.s:
    com.mazalearn.scienceengine.ScreenComponent$XAlign LEFT -> a
    com.mazalearn.scienceengine.ScreenComponent$XAlign CENTER -> b
    com.mazalearn.scienceengine.ScreenComponent$XAlign RIGHT -> c
    int base -> d
    com.mazalearn.scienceengine.ScreenComponent$XAlign[] ENUM$VALUES -> e
    float getValue(int) -> a
    com.mazalearn.scienceengine.ScreenComponent$XAlign[] values() -> values
    com.mazalearn.scienceengine.ScreenComponent$XAlign valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.ScreenComponent$YAlign -> com.mazalearn.scienceengine.t:
    com.mazalearn.scienceengine.ScreenComponent$YAlign BOTTOM -> a
    com.mazalearn.scienceengine.ScreenComponent$YAlign MIDDLE -> b
    com.mazalearn.scienceengine.ScreenComponent$YAlign TOP -> c
    int base -> d
    com.mazalearn.scienceengine.ScreenComponent$YAlign[] ENUM$VALUES -> e
    float getValue(int) -> a
    com.mazalearn.scienceengine.ScreenComponent$YAlign[] values() -> values
    com.mazalearn.scienceengine.ScreenComponent$YAlign valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.StatusType -> com.mazalearn.scienceengine.u:
    com.mazalearn.scienceengine.StatusType INFO -> a
    com.mazalearn.scienceengine.StatusType WARNING -> b
    com.mazalearn.scienceengine.StatusType ERROR -> c
    com.mazalearn.scienceengine.StatusType FATAL -> d
    com.badlogic.gdx.graphics.Color color -> e
    com.mazalearn.scienceengine.StatusType[] ENUM$VALUES -> f
    com.mazalearn.scienceengine.StatusType[] values() -> values
    com.mazalearn.scienceengine.StatusType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.Topic -> com.mazalearn.scienceengine.v:
    com.mazalearn.scienceengine.Topic BarMagnet -> a
    com.mazalearn.scienceengine.Topic Field -> b
    com.mazalearn.scienceengine.Topic TwoWires -> c
    com.mazalearn.scienceengine.Topic ElectroMagnet -> d
    com.mazalearn.scienceengine.Topic BarMagnetInduction -> e
    com.mazalearn.scienceengine.Topic ElectroMagnetInduction -> f
    com.mazalearn.scienceengine.Topic DCMotor -> g
    com.mazalearn.scienceengine.Topic ElectromagnetismScienceTrain -> h
    com.mazalearn.scienceengine.Topic ElectromagnetismReview -> i
    com.mazalearn.scienceengine.Topic Electromagnetism -> j
    com.mazalearn.scienceengine.Topic SOM -> k
    com.mazalearn.scienceengine.Topic StatesOfMatterReview -> l
    com.mazalearn.scienceengine.Topic StatesOfMatter -> m
    com.mazalearn.scienceengine.Topic W -> n
    com.mazalearn.scienceengine.Topic WavesReview -> o
    com.mazalearn.scienceengine.Topic Waves -> p
    com.mazalearn.scienceengine.Topic[] childTopics -> q
    com.mazalearn.scienceengine.Topic canonicalChild -> r
    int topicId -> s
    java.lang.String description -> t
    boolean isFree -> u
    java.util.Map idToTopicMap -> v
    com.mazalearn.scienceengine.Topic[] ENUM$VALUES -> w
    com.mazalearn.scienceengine.Topic getCanonicalChild() -> a
    com.mazalearn.scienceengine.Topic[] getChildren() -> b
    int getTopicId() -> c
    java.lang.String getDescription() -> d
    boolean isFree() -> e
    com.mazalearn.scienceengine.Topic fromProductId(java.lang.String) -> a
    java.lang.String toProductId() -> f
    com.mazalearn.scienceengine.Topic[] values() -> values
    com.mazalearn.scienceengine.Topic valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.VideoPlayer -> com.mazalearn.scienceengine.VideoPlayer:
    android.widget.VideoView mVideoView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.mazalearn.scienceengine.WebViewActivity -> com.mazalearn.scienceengine.WebViewActivity:
    android.webkit.WebView myWebView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.mazalearn.scienceengine.app.dialogs.AboutDialog -> com.mazalearn.scienceengine.a.a.a:
com.mazalearn.scienceengine.app.dialogs.AboutDialog$1 -> com.mazalearn.scienceengine.a.a.b:
    com.mazalearn.scienceengine.app.dialogs.AboutDialog this$0 -> a
    com.mazalearn.scienceengine.app.dialogs.AboutDialog$Copyright val$copyright -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.AboutDialog$2 -> com.mazalearn.scienceengine.a.a.c:
    com.mazalearn.scienceengine.app.dialogs.AboutDialog this$0 -> a
    com.mazalearn.scienceengine.app.dialogs.AboutDialog$Copyright val$copyright -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.AboutDialog$3 -> com.mazalearn.scienceengine.a.a.d:
    com.mazalearn.scienceengine.app.dialogs.AboutDialog this$0 -> a
    com.mazalearn.scienceengine.app.dialogs.AboutDialog$Copyright val$copyright -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.AboutDialog$Copyright -> com.mazalearn.scienceengine.a.a.e:
    java.lang.String name -> a
    java.lang.String home -> b
    java.lang.String license -> c
    java.lang.String attribution -> d
    java.lang.String platform -> e
com.mazalearn.scienceengine.app.dialogs.AppRater -> com.mazalearn.scienceengine.a.a.f:
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$app$utils$IPlatformAdapter$Platform -> a
    void showRaterDialog(com.badlogic.gdx.scenes.scene2d.Stage,com.badlogic.gdx.scenes.scene2d.ui.Skin,com.mazalearn.scienceengine.app.services.Profile,boolean) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$app$utils$IPlatformAdapter$Platform() -> a
com.mazalearn.scienceengine.app.dialogs.AppRater$1 -> com.mazalearn.scienceengine.a.a.g:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog val$dialog -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.AppRater$2 -> com.mazalearn.scienceengine.a.a.h:
    com.mazalearn.scienceengine.app.services.Profile val$profile -> a
    com.badlogic.gdx.scenes.scene2d.ui.Dialog val$dialog -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.AppRater$3 -> com.mazalearn.scienceengine.a.a.i:
    com.mazalearn.scienceengine.app.services.Profile val$profile -> a
    com.badlogic.gdx.scenes.scene2d.ui.Dialog val$dialog -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.ChangeFaceDialog -> com.mazalearn.scienceengine.a.a.j:
    com.mazalearn.scienceengine.app.services.Profile profile -> m
    com.mazalearn.scienceengine.app.dialogs.UserHomeDialog parentDialog -> n
    void result$5d527811() -> D
    com.mazalearn.scienceengine.app.services.Profile access$0(com.mazalearn.scienceengine.app.dialogs.ChangeFaceDialog) -> a
com.mazalearn.scienceengine.app.dialogs.ChangeFaceDialog$1 -> com.mazalearn.scienceengine.a.a.k:
    com.mazalearn.scienceengine.app.dialogs.ChangeFaceDialog this$0 -> a
    com.mazalearn.scienceengine.core.view.DrawingActor val$face -> b
    com.badlogic.gdx.scenes.scene2d.ui.Image val$userImage -> c
    com.mazalearn.scienceengine.app.dialogs.UserHomeDialog val$parentDialog -> d
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog -> com.mazalearn.scienceengine.a.a.l:
    com.mazalearn.scienceengine.app.services.Profile profile -> m
    com.mazalearn.scienceengine.app.services.loaders.Trivia trivia -> n
    com.badlogic.gdx.scenes.scene2d.ui.Dialog parentDialog -> o
    com.mazalearn.scienceengine.app.services.ProfileData$Social$Message gift -> p
    com.badlogic.gdx.scenes.scene2d.ui.Button sendButton -> q
    com.badlogic.gdx.scenes.scene2d.ui.TextButton makeGift -> r
    void result$5d527811() -> D
    com.badlogic.gdx.scenes.scene2d.ui.TextButton access$0(com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog) -> a
    com.mazalearn.scienceengine.app.services.ProfileData$Social$Message access$1(com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog) -> b
    com.mazalearn.scienceengine.app.services.loaders.Trivia access$2(com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog) -> c
    void access$3(com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog,com.mazalearn.scienceengine.app.services.ProfileData$Social$Message) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Button access$4(com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog) -> d
    com.mazalearn.scienceengine.app.services.Profile access$5(com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog) -> e
com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog$1 -> com.mazalearn.scienceengine.a.a.m:
    com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image val$giftImage -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog$2 -> com.mazalearn.scienceengine.a.a.n:
    com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.scenes.scene2d.ui.Image val$giftImage -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog$3 -> com.mazalearn.scienceengine.a.a.o:
    com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog$4 -> com.mazalearn.scienceengine.a.a.p:
    com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.List val$pointsList -> b
    com.badlogic.gdx.scenes.scene2d.ui.Dialog val$parentDialog -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog$5 -> com.mazalearn.scienceengine.a.a.q:
    com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.List val$friendsList -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog$5$1 -> com.mazalearn.scienceengine.a.a.r:
    com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog$5 this$1 -> a
    com.badlogic.gdx.scenes.scene2d.ui.List val$friendsList -> b
    void input(java.lang.String) -> a
    void canceled() -> a
com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog$6 -> com.mazalearn.scienceengine.a.a.s:
    com.mazalearn.scienceengine.app.dialogs.GiveGiftDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.List val$friendsList -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.MessageDialog -> com.mazalearn.scienceengine.a.a.t:
com.mazalearn.scienceengine.app.dialogs.OptionsDialog -> com.mazalearn.scienceengine.a.a.u:
    com.badlogic.gdx.scenes.scene2d.ui.Label volumeValue -> m
    java.lang.String getMsg(java.lang.String) -> f
    void updateVolumeLabel() -> S
    void access$0(com.mazalearn.scienceengine.app.dialogs.OptionsDialog) -> a
com.mazalearn.scienceengine.app.dialogs.OptionsDialog$1 -> com.mazalearn.scienceengine.a.a.v:
    com.mazalearn.scienceengine.app.dialogs.OptionsDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$languageSelect -> c
    void changed$d8a80ea(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.mazalearn.scienceengine.app.dialogs.OptionsDialog$2 -> com.mazalearn.scienceengine.a.a.w:
    com.mazalearn.scienceengine.app.dialogs.OptionsDialog this$0 -> a
    com.mazalearn.scienceengine.app.services.PreferencesManager val$preferencesManager -> b
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$syncSelect -> c
    void changed$d8a80ea(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.mazalearn.scienceengine.app.dialogs.OptionsDialog$3 -> com.mazalearn.scienceengine.a.a.x:
    com.mazalearn.scienceengine.app.dialogs.OptionsDialog this$0 -> a
    com.mazalearn.scienceengine.app.services.PreferencesManager val$preferencesManager -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.OptionsDialog$4 -> com.mazalearn.scienceengine.a.a.y:
    com.mazalearn.scienceengine.app.dialogs.OptionsDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$soundEffectsCheckbox -> b
    com.mazalearn.scienceengine.app.services.PreferencesManager val$preferencesManager -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.OptionsDialog$5 -> com.mazalearn.scienceengine.a.a.z:
    com.mazalearn.scienceengine.app.dialogs.OptionsDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$musicCheckbox -> b
    com.mazalearn.scienceengine.app.services.PreferencesManager val$preferencesManager -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.OptionsDialog$6 -> com.mazalearn.scienceengine.a.a.aa:
    com.mazalearn.scienceengine.app.dialogs.OptionsDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$speechCheckbox -> b
    com.mazalearn.scienceengine.app.services.PreferencesManager val$preferencesManager -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.OptionsDialog$7 -> com.mazalearn.scienceengine.a.a.ab:
    com.mazalearn.scienceengine.app.dialogs.OptionsDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Slider val$volumeSlider -> b
    com.mazalearn.scienceengine.app.services.PreferencesManager val$preferencesManager -> c
    void changed$d8a80ea(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.mazalearn.scienceengine.app.dialogs.OptionsDialog$8 -> com.mazalearn.scienceengine.a.a.ac:
    com.mazalearn.scienceengine.app.dialogs.OptionsDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.scenes.scene2d.Stage val$stage -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.PurchaseDialog -> com.mazalearn.scienceengine.a.a.ad:
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> m
    java.util.List productList -> n
    com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup purchasableItems -> o
    com.mazalearn.scienceengine.ScienceEngine scienceEngine -> p
    com.mazalearn.scienceengine.Topic topic -> q
    com.mazalearn.scienceengine.billing.IBilling billing -> r
    com.badlogic.gdx.scenes.scene2d.ui.Table waitActor -> s
    java.lang.Boolean purchaseDone -> t
    long timeStart -> u
    float[] stats -> v
    com.mazalearn.scienceengine.app.services.Profile profile -> w
    java.lang.String purchaseFlowId -> x
    com.badlogic.gdx.scenes.scene2d.Stage stage -> y
    void log(com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State) -> a
    void act(float) -> a
    void access$0(com.mazalearn.scienceengine.app.dialogs.PurchaseDialog,com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State) -> a
    void access$1(com.mazalearn.scienceengine.app.dialogs.PurchaseDialog,java.lang.Boolean) -> a
    void access$2(com.mazalearn.scienceengine.app.dialogs.PurchaseDialog,com.mazalearn.scienceengine.billing.Inventory) -> a
    com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup access$3(com.mazalearn.scienceengine.app.dialogs.PurchaseDialog) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table access$4(com.mazalearn.scienceengine.app.dialogs.PurchaseDialog) -> b
    com.badlogic.gdx.scenes.scene2d.Stage access$5(com.mazalearn.scienceengine.app.dialogs.PurchaseDialog) -> c
    com.mazalearn.scienceengine.billing.IBilling access$6(com.mazalearn.scienceengine.app.dialogs.PurchaseDialog) -> d
com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$1 -> com.mazalearn.scienceengine.a.a.ae:
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog this$0 -> a
    com.mazalearn.scienceengine.app.services.InstallProfile val$installProfile -> b
    com.badlogic.gdx.scenes.scene2d.Stage val$stage -> c
    void purchaseCallback(java.lang.String) -> a
    void inventoryCallback(com.mazalearn.scienceengine.billing.Inventory) -> a
com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$2 -> com.mazalearn.scienceengine.a.a.af:
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$3 -> com.mazalearn.scienceengine.a.a.ag:
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$4 -> com.mazalearn.scienceengine.a.a.ah:
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$purchaseButton -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table val$buttonTable -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State -> com.mazalearn.scienceengine.a.a.ai:
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State Initiated -> a
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State InventoryQuery -> b
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State InventoryFailure -> c
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State InventoryDisplay -> d
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State PurchaseRequest -> e
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State PurchaseFailure -> f
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State PurchaseDone -> g
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State PurchaseCanceled -> h
    int index -> i
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State[] ENUM$VALUES -> j
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State[] values() -> values
    com.mazalearn.scienceengine.app.dialogs.PurchaseDialog$State valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.app.dialogs.ShowGiftDialog -> com.mazalearn.scienceengine.a.a.aj:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog parentDialog -> m
    void result$5d527811() -> D
com.mazalearn.scienceengine.app.dialogs.ShowGiftDialog$1 -> com.mazalearn.scienceengine.a.a.ak:
    com.mazalearn.scienceengine.app.dialogs.ShowGiftDialog this$0 -> a
    com.mazalearn.scienceengine.app.services.ProfileData$Social$Message val$gift -> b
    com.badlogic.gdx.scenes.scene2d.Actor val$giftItem -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.TutoringEndDialog -> com.mazalearn.scienceengine.a.a.al:
com.mazalearn.scienceengine.app.dialogs.UserHomeDialog -> com.mazalearn.scienceengine.a.a.am:
    com.mazalearn.scienceengine.app.services.Profile profile -> m
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> n
    com.badlogic.gdx.scenes.scene2d.ui.TextButton myUserImage -> o
    void setUserImage(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> b
    com.badlogic.gdx.scenes.scene2d.Actor createWaitingGiftsPane$36b91362(com.badlogic.gdx.scenes.scene2d.ui.Dialog,java.util.List,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> a
    com.badlogic.gdx.scenes.scene2d.Actor createImagesPane(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.util.List) -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton createItem(com.badlogic.gdx.scenes.scene2d.ui.Skin,int,int,java.lang.String) -> a
    com.mazalearn.scienceengine.app.services.Profile access$0(com.mazalearn.scienceengine.app.dialogs.UserHomeDialog) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin access$1(com.mazalearn.scienceengine.app.dialogs.UserHomeDialog) -> b
com.mazalearn.scienceengine.app.dialogs.UserHomeDialog$1 -> com.mazalearn.scienceengine.a.a.an:
    com.mazalearn.scienceengine.app.dialogs.UserHomeDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.UserHomeDialog$2 -> com.mazalearn.scienceengine.a.a.ao:
    com.mazalearn.scienceengine.app.dialogs.UserHomeDialog this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image val$userImage -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.UserHomeDialog$3 -> com.mazalearn.scienceengine.a.a.ap:
    com.mazalearn.scienceengine.app.dialogs.UserHomeDialog this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.UserHomeDialog$4 -> com.mazalearn.scienceengine.a.a.aq:
    com.mazalearn.scienceengine.app.dialogs.UserHomeDialog this$0 -> a
    java.lang.String val$itemName -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.UserHomeDialog$5 -> com.mazalearn.scienceengine.a.a.ar:
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> a
    com.mazalearn.scienceengine.app.services.ProfileData$Social$Message val$gift -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$item -> c
    boolean val$allowAccept -> d
    com.badlogic.gdx.scenes.scene2d.ui.Dialog val$parentDialog -> e
    void doCommand() -> f
com.mazalearn.scienceengine.app.dialogs.UserHomeDialog$6 -> com.mazalearn.scienceengine.a.a.as:
    com.mazalearn.scienceengine.app.dialogs.UserHomeDialog this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.AbstractScreen -> com.mazalearn.scienceengine.a.b.a:
    com.mazalearn.scienceengine.ScienceEngine scienceEngine -> a
    com.badlogic.gdx.scenes.scene2d.Stage stage -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table table -> c
    com.badlogic.gdx.graphics.Color backgroundColor -> d
    com.mazalearn.scienceengine.app.services.Profile profile -> e
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$ScreenComponent -> f
    java.lang.String getMsg(java.lang.String) -> a
    boolean needsLayout() -> e
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> f
    void goBack() -> g
    void setTitle(java.lang.String) -> b
    com.badlogic.gdx.scenes.scene2d.Group setupCoreGroup(com.badlogic.gdx.scenes.scene2d.Stage) -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table getTable() -> h
    void show() -> a
    void resize(int,int) -> a
    void render(float) -> a
    void hide() -> b
    void pause() -> c
    void resume() -> d
    void addAssets() -> i
    com.mazalearn.scienceengine.app.services.Profile getProfile() -> j
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$ScreenComponent() -> k
com.mazalearn.scienceengine.app.screens.AbstractScreen$1 -> com.mazalearn.scienceengine.a.b.b:
    com.mazalearn.scienceengine.app.screens.AbstractScreen this$0 -> a
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> a
com.mazalearn.scienceengine.app.screens.AbstractScreen$2 -> com.mazalearn.scienceengine.a.b.c:
    com.mazalearn.scienceengine.app.screens.AbstractScreen this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image val$image -> b
    com.badlogic.gdx.scenes.scene2d.Stage val$stage -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.AbstractScreen$3 -> com.mazalearn.scienceengine.a.b.d:
    com.mazalearn.scienceengine.app.screens.AbstractScreen this$0 -> a
    com.badlogic.gdx.scenes.scene2d.Stage val$stage -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.AbstractScreen$4 -> com.mazalearn.scienceengine.a.b.e:
    com.mazalearn.scienceengine.app.screens.AbstractScreen this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.ActivityScreen -> com.mazalearn.scienceengine.a.b.f:
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> c
    com.mazalearn.scienceengine.Topic topic -> d
    com.mazalearn.scienceengine.Topic activityLevel -> e
    com.mazalearn.scienceengine.tutor.ITutor tutorUnderRevision -> f
    com.mazalearn.scienceengine.core.view.IScience2DView science2DView -> g
    com.badlogic.gdx.scenes.scene2d.Actor helpActor -> h
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$Topic -> i
    void enterRevisionMode(com.mazalearn.scienceengine.tutor.ITutor) -> a
    com.badlogic.gdx.scenes.scene2d.Group setupCoreGroup(com.badlogic.gdx.scenes.scene2d.Stage) -> b
    void showHelp() -> k
    void show() -> a
    void goBack() -> g
    void addAssets() -> i
    void access$0(com.mazalearn.scienceengine.app.screens.ActivityScreen) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$Topic() -> l
com.mazalearn.scienceengine.app.screens.ActivityScreen$1 -> com.mazalearn.scienceengine.a.b.g:
    com.mazalearn.scienceengine.app.screens.ActivityScreen this$0 -> a
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> a
com.mazalearn.scienceengine.app.screens.ActivityScreen$2 -> com.mazalearn.scienceengine.a.b.h:
    com.mazalearn.scienceengine.app.screens.ActivityScreen this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.ChooseTopicScreen -> com.mazalearn.scienceengine.a.b.i:
    void show() -> a
    void goBack() -> g
    void gotoTopicHome(com.mazalearn.scienceengine.Topic) -> a
    void access$0(com.mazalearn.scienceengine.app.screens.ChooseTopicScreen,com.mazalearn.scienceengine.Topic) -> a
com.mazalearn.scienceengine.app.screens.ChooseTopicScreen$1 -> com.mazalearn.scienceengine.a.b.j:
    com.mazalearn.scienceengine.app.screens.ChooseTopicScreen this$0 -> a
    boolean val$lock -> b
    com.mazalearn.scienceengine.Topic val$topic -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.HelpTour -> com.mazalearn.scienceengine.a.b.k:
    com.badlogic.gdx.math.Vector2 CENTER_POS -> a
    com.badlogic.gdx.math.Vector2 pos -> b
    com.badlogic.gdx.math.Vector2 access$0() -> A
    com.badlogic.gdx.math.Vector2 access$1() -> B
    java.lang.String access$2(java.lang.String) -> c
    float access$3(com.badlogic.gdx.scenes.scene2d.Stage,com.mazalearn.scienceengine.app.screens.HelpTour$IHelpComponent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.mazalearn.scienceengine.app.screens.HelpTour$1 -> com.mazalearn.scienceengine.a.b.l:
    com.mazalearn.scienceengine.app.screens.HelpTour this$0 -> a
    com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler val$onClickHandler -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.HelpTour$2 -> com.mazalearn.scienceengine.a.b.m:
    com.mazalearn.scienceengine.app.screens.HelpTour this$0 -> a
    com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler val$onClickHandler -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.HelpTour$3 -> com.mazalearn.scienceengine.a.b.n:
    com.mazalearn.scienceengine.app.screens.HelpTour this$0 -> a
    com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler val$onClickHandler -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler -> com.mazalearn.scienceengine.a.b.o:
    com.mazalearn.scienceengine.tutor.ImageMessageBox contentBox -> b
    java.lang.String content -> c
    int currentComponent -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image arrow -> d
    java.util.List helpComponents -> e
    com.mazalearn.scienceengine.app.screens.HelpTour$IHelpComponent helpComponent -> f
    com.badlogic.gdx.scenes.scene2d.Stage stage -> g
    void setContent(java.lang.String,float,float,float) -> a
    java.util.List access$0(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler) -> a
    com.mazalearn.scienceengine.app.screens.HelpTour$IHelpComponent access$1(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler) -> b
    com.badlogic.gdx.scenes.scene2d.Stage access$2(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler) -> c
    com.badlogic.gdx.scenes.scene2d.ui.Image access$3(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler) -> d
    java.lang.String access$4(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler) -> e
    void access$5(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler,java.lang.String,float,float,float) -> a
    com.mazalearn.scienceengine.tutor.ImageMessageBox access$6(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler) -> f
    void access$7(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler,com.mazalearn.scienceengine.app.screens.HelpTour$IHelpComponent) -> a
    void access$8(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler,int) -> a
    void access$9(com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler) -> g
com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler$1 -> com.mazalearn.scienceengine.a.b.p:
    com.mazalearn.scienceengine.app.screens.HelpTour$ClickHandler this$1 -> b
    int val$increment -> c
    boolean act(float) -> a
com.mazalearn.scienceengine.app.screens.HelpTour$IHelpComponent -> com.mazalearn.scienceengine.a.b.q:
    java.lang.String getLocalizedName() -> e_
    java.lang.String getComponentType() -> f
    float getX() -> h
    float getY() -> i
    float getWidth() -> j
    float getHeight() -> k
    void showHelp(com.badlogic.gdx.scenes.scene2d.Stage,boolean) -> a
com.mazalearn.scienceengine.app.screens.LoadingScreen -> com.mazalearn.scienceengine.a.b.r:
    float startX -> c
    float endX -> d
    float percent -> e
    com.mazalearn.scienceengine.app.screens.AbstractScreen nextScreen -> f
    com.badlogic.gdx.scenes.scene2d.Actor train -> g
    float startY -> h
    float endY -> i
    com.badlogic.gdx.scenes.scene2d.ui.Image railTracks -> j
    com.badlogic.gdx.scenes.scene2d.ui.Label loading -> k
    float alpha -> l
    boolean needsLayout() -> e
    void show() -> a
    void resize(int,int) -> a
    void render(float) -> a
    void hide() -> b
    void goBack() -> g
com.mazalearn.scienceengine.app.screens.SplashScreen -> com.mazalearn.scienceengine.a.b.s:
    boolean needsLayout() -> e
    void show() -> a
    void goBack() -> g
    void access$0(com.mazalearn.scienceengine.app.screens.SplashScreen) -> a
com.mazalearn.scienceengine.app.screens.SplashScreen$1 -> com.mazalearn.scienceengine.a.b.t:
    com.mazalearn.scienceengine.app.screens.SplashScreen this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.SplashScreen$2 -> com.mazalearn.scienceengine.a.b.u:
    com.mazalearn.scienceengine.app.screens.SplashScreen this$0 -> a
    com.mazalearn.scienceengine.app.services.InstallProfile val$installProfile -> b
    com.mazalearn.scienceengine.app.services.PreferencesManager val$preferencesManager -> c
    com.badlogic.gdx.scenes.scene2d.ui.Image val$userImage -> d
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.SplashScreen$2$1 -> com.mazalearn.scienceengine.a.b.v:
    com.mazalearn.scienceengine.app.screens.SplashScreen$2 this$1 -> a
    com.mazalearn.scienceengine.app.services.PreferencesManager val$preferencesManager -> b
    com.mazalearn.scienceengine.app.services.Profile val$userProfile -> c
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.SplashScreen$SplashImage -> com.mazalearn.scienceengine.a.b.w:
    com.mazalearn.scienceengine.app.screens.SplashScreen this$0 -> a
com.mazalearn.scienceengine.app.screens.TopicHomeScreen -> com.mazalearn.scienceengine.a.b.x:
    com.badlogic.gdx.scenes.scene2d.ui.TextButton[] activityThumbs -> c
    com.badlogic.gdx.utils.Array resources -> d
    com.mazalearn.scienceengine.Topic topic -> e
    void goBack() -> g
    void show() -> a
    com.badlogic.gdx.scenes.scene2d.Actor createActivitiesPane() -> k
    com.badlogic.gdx.scenes.scene2d.Actor createResourcePane() -> l
    void gotoActivityLevel(com.mazalearn.scienceengine.Topic) -> a
    void addAssets() -> i
    com.mazalearn.scienceengine.Topic access$0(com.mazalearn.scienceengine.app.screens.TopicHomeScreen) -> a
    void access$1(com.mazalearn.scienceengine.app.screens.TopicHomeScreen,com.mazalearn.scienceengine.Topic) -> a
com.mazalearn.scienceengine.app.screens.TopicHomeScreen$1 -> com.mazalearn.scienceengine.a.b.y:
    com.mazalearn.scienceengine.app.screens.TopicHomeScreen this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$contentTypeButton -> b
    com.esotericsoftware.tablelayout.Cell val$scrollPane -> c
    com.badlogic.gdx.scenes.scene2d.Actor val$resourcesPane -> d
    com.badlogic.gdx.scenes.scene2d.Actor val$activitiesPane -> e
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.TopicHomeScreen$2 -> com.mazalearn.scienceengine.a.b.z:
    com.mazalearn.scienceengine.app.screens.TopicHomeScreen this$0 -> a
    boolean val$isScienceTrainLevel -> b
    com.mazalearn.scienceengine.app.services.InstallProfile val$installProfile -> c
    com.mazalearn.scienceengine.Topic val$level -> d
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.TopicHomeScreen$3 -> com.mazalearn.scienceengine.a.b.aa:
    com.mazalearn.scienceengine.app.screens.TopicHomeScreen this$0 -> a
    com.mazalearn.scienceengine.Topic val$iLevel -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.TopicHomeScreen$BrowseUrlListener -> com.mazalearn.scienceengine.a.b.ab:
    java.lang.String url -> a
    void doCommand() -> f
com.mazalearn.scienceengine.app.screens.TopicHomeScreen$VideoPlayListener -> com.mazalearn.scienceengine.a.b.ac:
    java.lang.String fileName -> a
    java.lang.String url -> b
    void doCommand() -> f
com.mazalearn.scienceengine.app.services.AggregatorFunction -> com.mazalearn.scienceengine.a.c.a:
    com.mazalearn.scienceengine.app.services.AggregatorFunction Min -> a
    com.mazalearn.scienceengine.app.services.AggregatorFunction Max -> b
    com.mazalearn.scienceengine.app.services.AggregatorFunction Count -> c
    com.mazalearn.scienceengine.app.services.AggregatorFunction$Aggregator aggregator -> d
    com.mazalearn.scienceengine.app.services.AggregatorFunction[] ENUM$VALUES -> e
    float eval(java.lang.String) -> a
    com.mazalearn.scienceengine.app.services.AggregatorFunction[] values() -> values
    com.mazalearn.scienceengine.app.services.AggregatorFunction valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.app.services.AggregatorFunction$1 -> com.mazalearn.scienceengine.a.c.b:
    float min -> a
    void init() -> a
    void visit(float) -> a
    float getValue() -> b
com.mazalearn.scienceengine.app.services.AggregatorFunction$2 -> com.mazalearn.scienceengine.a.c.c:
    float max -> a
    void init() -> a
    void visit(float) -> a
    float getValue() -> b
com.mazalearn.scienceengine.app.services.AggregatorFunction$3 -> com.mazalearn.scienceengine.a.c.d:
    float count -> a
    void init() -> a
    void visit(float) -> a
    float getValue() -> b
com.mazalearn.scienceengine.app.services.AggregatorFunction$Aggregator -> com.mazalearn.scienceengine.a.c.e:
    void init() -> a
    void visit(float) -> a
    float getValue() -> b
com.mazalearn.scienceengine.app.services.EventLog -> com.mazalearn.scienceengine.a.c.f:
    java.util.List events -> a
    boolean suppressDuplicates -> b
    com.mazalearn.scienceengine.core.lang.Event lastEvent -> c
    void logEvent(java.lang.String,java.lang.String) -> a
    void logEvent(java.lang.String,java.lang.String,float) -> a
    void clear() -> a
com.mazalearn.scienceengine.app.services.IMessage -> com.mazalearn.scienceengine.a.c.g:
    java.lang.String getString(java.lang.String) -> a
    java.lang.String getLanguage() -> a
    void setLanguage(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> a
    void setFont(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> a
com.mazalearn.scienceengine.app.services.InstallData -> com.mazalearn.scienceengine.a.c.h:
    java.lang.String installId -> a
    java.lang.String registeredUserId -> b
    long lastUpdated -> c
    java.lang.String[] userIds -> d
    java.util.ArrayList availableTopicNames -> e
    boolean isChanged -> f
com.mazalearn.scienceengine.app.services.InstallProfile -> com.mazalearn.scienceengine.a.c.i:
    com.mazalearn.scienceengine.app.services.InstallData data -> a
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.OrderedMap) -> a
    void write(com.badlogic.gdx.utils.Json) -> a
    java.lang.String getRegisteredUserId() -> a
    long getLastUpdated() -> b
    java.lang.String[] getUserIds() -> c
    java.lang.String getInstallationId() -> d
    boolean isAvailableTopic(com.mazalearn.scienceengine.Topic) -> a
    void addAsAvailableTopic(com.mazalearn.scienceengine.Topic) -> b
    void provisionProduct(java.lang.String) -> a
    com.mazalearn.scienceengine.app.services.InstallProfile fromBase64(java.lang.String) -> b
    java.lang.String toBase64() -> e
    boolean isChanged() -> f
    void markChanged$1385ff() -> g
com.mazalearn.scienceengine.app.services.MusicManager -> com.mazalearn.scienceengine.a.c.j:
    com.mazalearn.scienceengine.app.services.MusicManager$ScienceEngineMusic musicBeingPlayed -> a
    float volume -> b
    boolean enabled -> c
    void play(com.mazalearn.scienceengine.app.services.MusicManager$ScienceEngineMusic) -> a
    void stop() -> a
    void setVolume(float) -> a
    void setEnabled(boolean) -> a
    void dispose() -> e
com.mazalearn.scienceengine.app.services.MusicManager$ScienceEngineMusic -> com.mazalearn.scienceengine.a.c.k:
    com.mazalearn.scienceengine.app.services.MusicManager$ScienceEngineMusic MENU -> a
    com.mazalearn.scienceengine.app.services.MusicManager$ScienceEngineMusic LEVEL -> b
    com.mazalearn.scienceengine.app.services.MusicManager$ScienceEngineMusic HUM -> c
    java.lang.String fileName -> d
    com.badlogic.gdx.audio.Music musicResource -> e
    com.mazalearn.scienceengine.app.services.MusicManager$ScienceEngineMusic[] ENUM$VALUES -> f
    java.lang.String getFileName() -> a
    com.badlogic.gdx.audio.Music getMusicResource() -> b
    void setMusicResource(com.badlogic.gdx.audio.Music) -> a
    com.mazalearn.scienceengine.app.services.MusicManager$ScienceEngineMusic[] values() -> values
    com.mazalearn.scienceengine.app.services.MusicManager$ScienceEngineMusic valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.app.services.PreferencesManager -> com.mazalearn.scienceengine.a.c.l:
    com.badlogic.gdx.Preferences prefs -> a
    com.mazalearn.scienceengine.app.services.InstallProfile defaultInstallProfile -> b
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter platformAdapter -> c
    com.mazalearn.scienceengine.app.services.InstallProfile installProfile -> d
    com.mazalearn.scienceengine.app.services.Profile userProfile -> e
    boolean isSoundEnabled() -> a
    void setSoundEnabled(boolean) -> a
    boolean isMusicEnabled() -> b
    void setMusicEnabled(boolean) -> b
    boolean isSpeechEnabled() -> c
    void setSpeechEnabled(boolean) -> c
    float getVolume() -> d
    void setVolume(float) -> a
    void setActiveUserProfile(com.mazalearn.scienceengine.app.services.Profile) -> a
    com.mazalearn.scienceengine.app.services.Profile retrieveUserProfile() -> i
    com.mazalearn.scienceengine.app.services.Profile getUserProfile(java.lang.String) -> a
    java.lang.String getProfileUserId() -> j
    com.mazalearn.scienceengine.app.services.Profile getActiveUserProfile() -> e
    com.mazalearn.scienceengine.app.services.InstallProfile getInstallProfile() -> f
    void setSyncProfilesString(java.lang.String) -> c
    void saveUserProfile() -> g
    void markProfileDirty(java.lang.String) -> d
    void syncProfiles(boolean) -> d
    void saveInstallProfile() -> h
    void setSync(java.lang.String) -> b
com.mazalearn.scienceengine.app.services.PreferencesManager$SyncProfilesTask -> com.mazalearn.scienceengine.a.c.m:
    java.lang.String syncProfilesString -> a
    com.badlogic.gdx.Preferences prefs -> b
    com.mazalearn.scienceengine.app.services.InstallProfile installProfile -> c
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter platformAdapter -> d
    void run() -> run
com.mazalearn.scienceengine.app.services.Profile -> com.mazalearn.scienceengine.a.c.n:
    com.mazalearn.scienceengine.app.services.ProfileData data -> a
    void setCurrentActivity(com.mazalearn.scienceengine.Topic) -> a
    com.mazalearn.scienceengine.Topic getCurrentActivity() -> a
    com.mazalearn.scienceengine.Topic getLastActivity() -> b
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.OrderedMap) -> a
    void write(com.badlogic.gdx.utils.Json) -> a
    void setCurrentTopic(com.mazalearn.scienceengine.Topic) -> b
    com.mazalearn.scienceengine.Topic getCurrentTopic() -> c
    java.lang.String getUserName() -> d
    java.lang.String getUserEmail() -> e
    void setUserEmailLocally(java.lang.String) -> a
    void save() -> f
    void addFriend(java.lang.String) -> b
    java.util.List getFriends() -> g
    void sendGift(com.mazalearn.scienceengine.app.services.ProfileData$Social$Message) -> a
    java.util.List getInbox() -> h
    void acceptGift(com.mazalearn.scienceengine.app.services.ProfileData$Social$Message) -> b
    void setCoachPixmap(com.badlogic.gdx.graphics.Pixmap,float,java.lang.String) -> a
    com.badlogic.gdx.graphics.Pixmap getCoachPixmap() -> i
    void setUserPixmap(com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.graphics.Pixmap getUserPixmap() -> j
    float[] getStats(com.mazalearn.scienceengine.Topic,java.lang.String,int) -> a
    void saveStats(float[],java.lang.String) -> a
    void markForSync(java.lang.String) -> g
    void setPlatform(com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform) -> a
    java.lang.String getInstallationId() -> k
    void setInstallationId(java.lang.String) -> c
    com.mazalearn.scienceengine.app.services.Profile fromBase64(java.lang.String) -> d
    java.lang.String toBase64() -> l
    void mergeProfile(java.lang.String) -> e
    void addPoints(int) -> a
    int getPoints() -> m
    int getGiftPoints() -> n
    java.lang.String getSyncStr() -> o
    boolean isRegistered() -> p
    java.util.List getCertificates() -> q
    void addCertificate(java.lang.String) -> f
    void setDontShowAgain(boolean) -> a
    boolean getDontShowAgain() -> r
    int incrementLaunchCount() -> s
    long getDateFirstLaunch() -> t
com.mazalearn.scienceengine.app.services.ProfileData -> com.mazalearn.scienceengine.a.c.o:
    java.util.HashMap currentActivityStats -> a
    com.mazalearn.scienceengine.app.services.ProfileData$ClientProps client -> b
    com.mazalearn.scienceengine.app.services.ProfileData$ServerProps server -> c
    java.util.HashMap topicStats -> d
    com.mazalearn.scienceengine.app.services.ProfileData$Social social -> e
    java.util.HashMap lastUpdated -> f
    java.lang.String userPng -> g
    java.lang.String coachPng -> h
    java.util.Map serverTimestamps -> i
com.mazalearn.scienceengine.app.services.ProfileData$ClientProps -> com.mazalearn.scienceengine.a.c.p:
    java.lang.String platform -> a
    java.lang.String color -> b
    float current -> c
    java.lang.String installId -> d
    java.lang.String topic -> e
    java.lang.String lastActivity -> f
    java.lang.String activity -> g
    java.util.ArrayList certificates -> h
    int points -> i
    boolean dontShowAgain -> j
    int launchCount -> k
    long dateFirstLaunch -> l
com.mazalearn.scienceengine.app.services.ProfileData$ServerProps -> com.mazalearn.scienceengine.a.c.q:
    java.lang.String userName -> a
    java.lang.String userId -> b
    boolean isRegistered -> c
com.mazalearn.scienceengine.app.services.ProfileData$Social -> com.mazalearn.scienceengine.a.c.r:
    java.util.ArrayList friends -> a
    com.mazalearn.scienceengine.app.services.ProfileData$Social$MQ inbox -> b
    com.mazalearn.scienceengine.app.services.ProfileData$Social$MQ outbox -> c
    int points -> d
com.mazalearn.scienceengine.app.services.ProfileData$Social$MQ -> com.mazalearn.scienceengine.a.c.s:
    java.util.ArrayList mq -> a
    int tailId -> b
    int headId -> c
    void addMessage(com.mazalearn.scienceengine.app.services.ProfileData$Social$Message) -> a
com.mazalearn.scienceengine.app.services.ProfileData$Social$Message -> com.mazalearn.scienceengine.a.c.t:
    int messageId -> a
    java.lang.String email -> b
    int giftType -> c
    java.lang.String text -> d
    java.lang.String image -> e
    int points -> f
com.mazalearn.scienceengine.app.services.ProfileSyncer -> com.mazalearn.scienceengine.a.c.u:
    long testCurrentTime -> a
    java.util.List serverProfileItems -> b
    long getCurrentTime() -> a
    void syncMerge(java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> a
    java.util.Map getSyncData(java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> b
    long nvl$3fdc6384(java.lang.Long) -> a
    void mergeProfile(com.mazalearn.scienceengine.app.services.ProfileData,com.mazalearn.scienceengine.app.services.ProfileData) -> a
    boolean syncSocialClient(com.mazalearn.scienceengine.app.services.ProfileData$Social,com.mazalearn.scienceengine.app.services.ProfileData$Social) -> a
    java.util.Map getSyncJson(com.mazalearn.scienceengine.app.services.ProfileData) -> a
com.mazalearn.scienceengine.app.services.SoundManager -> com.mazalearn.scienceengine.a.c.v:
    float volume -> a
    boolean enabled -> b
    void play(com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound) -> a
    void setVolume(float) -> a
    void setEnabled(boolean) -> a
com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound -> com.mazalearn.scienceengine.a.c.w:
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound CLICK -> a
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound SUCCESS -> b
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound FAILURE -> c
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound CELEBRATE -> d
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound RAPID_FIRE -> e
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound CHIME -> f
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound CHALLENGE -> g
    java.lang.String fileName -> h
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound[] ENUM$VALUES -> i
    java.lang.String getFileName() -> a
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound[] values() -> values
    com.mazalearn.scienceengine.app.services.SoundManager$ScienceEngineSound valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.app.services.loaders.AsyncLevelLoader -> com.mazalearn.scienceengine.a.c.a.a:
    com.mazalearn.scienceengine.app.services.loaders.LevelLoader levelLoader -> a
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.mazalearn.scienceengine.app.services.loaders.AsyncLevelLoader$LevelLoaderParameter -> com.mazalearn.scienceengine.a.c.a.b:
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> b
com.mazalearn.scienceengine.app.services.loaders.CircuitLoader -> com.mazalearn.scienceengine.a.c.a.c:
    void loadCircuits(com.badlogic.gdx.utils.Array,com.mazalearn.scienceengine.core.model.IScience2DModel) -> a
com.mazalearn.scienceengine.app.services.loaders.ComponentLoader -> com.mazalearn.scienceengine.a.c.a.d:
    java.util.Map componentTypeCount -> a
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> b
    void loadEnvironment(com.mazalearn.scienceengine.core.model.EnvironmentBody,com.badlogic.gdx.utils.Array) -> a
    void loadComponents(com.badlogic.gdx.utils.Array,boolean) -> a
com.mazalearn.scienceengine.app.services.loaders.ConfigLoader -> com.mazalearn.scienceengine.a.c.a.e:
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$controller$IModelConfig$ConfigType -> a
    void loadConfigs(com.badlogic.gdx.utils.Array,com.mazalearn.scienceengine.core.model.IScience2DModel) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$controller$IModelConfig$ConfigType() -> a
com.mazalearn.scienceengine.app.services.loaders.LevelLoader -> com.mazalearn.scienceengine.a.c.a.f:
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> a
    com.mazalearn.scienceengine.core.view.IScience2DView science2DView -> b
    com.mazalearn.scienceengine.core.model.IScience2DModel science2DModel -> c
    com.mazalearn.scienceengine.core.view.ModelControls modelControls -> d
    com.mazalearn.scienceengine.core.view.ViewControls viewControls -> e
    com.mazalearn.scienceengine.Topic level -> f
    com.badlogic.gdx.utils.OrderedMap rootElem -> g
    com.mazalearn.scienceengine.app.services.loaders.ComponentLoader componentLoader -> h
    com.mazalearn.scienceengine.app.services.loaders.TutorLoader tutorLoader -> i
    void load() -> a
    com.badlogic.gdx.utils.OrderedMap getJsonFromFile() -> b
    com.badlogic.gdx.utils.OrderedMap getJsonFromFile(com.mazalearn.scienceengine.Topic,com.mazalearn.scienceengine.Topic) -> a
    void loadFromJson() -> c
    void reload() -> d
com.mazalearn.scienceengine.app.services.loaders.Trivia -> com.mazalearn.scienceengine.a.c.a.g:
    com.badlogic.gdx.utils.Array trivia -> a
    void load() -> a
    int getNumTrivia() -> b
    java.lang.String getTriviumPart(int,com.mazalearn.scienceengine.app.services.loaders.Trivia$Part) -> a
com.mazalearn.scienceengine.app.services.loaders.Trivia$Part -> com.mazalearn.scienceengine.a.c.a.h:
    com.mazalearn.scienceengine.app.services.loaders.Trivia$Part text -> a
    com.mazalearn.scienceengine.app.services.loaders.Trivia$Part image -> b
    com.mazalearn.scienceengine.app.services.loaders.Trivia$Part[] ENUM$VALUES -> c
    com.mazalearn.scienceengine.app.services.loaders.Trivia$Part[] values() -> values
    com.mazalearn.scienceengine.app.services.loaders.Trivia$Part valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.app.services.loaders.TutorLoader -> com.mazalearn.scienceengine.a.c.a.i:
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$tutor$TutorType -> b
    com.mazalearn.scienceengine.tutor.AbstractTutor makeReviewer(com.badlogic.gdx.utils.OrderedMap,com.mazalearn.scienceengine.tutor.TutorGroup) -> a
    com.mazalearn.scienceengine.tutor.AbstractTutor makeAbstractor(com.badlogic.gdx.utils.OrderedMap,com.mazalearn.scienceengine.tutor.Abstractor) -> a
    java.lang.String[] loadStringArray(java.lang.String,com.badlogic.gdx.utils.OrderedMap) -> a
    java.util.List loadChildTutors(com.mazalearn.scienceengine.Topic,com.mazalearn.scienceengine.tutor.ITutor,com.badlogic.gdx.utils.Array) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$tutor$TutorType() -> a
com.mazalearn.scienceengine.app.utils.Crypter -> com.mazalearn.scienceengine.a.d.a:
    com.mazalearn.scienceengine.app.utils.Crypter$Sha1 sha1 -> a
    java.lang.String saltedSha1Hash(java.lang.String,java.lang.String) -> a
    java.lang.String hexlate(byte[]) -> a
com.mazalearn.scienceengine.app.utils.Crypter$1 -> com.mazalearn.scienceengine.a.d.b:
    byte[] sha1Hash(byte[]) -> a
com.mazalearn.scienceengine.app.utils.Crypter$Sha1 -> com.mazalearn.scienceengine.a.d.c:
    byte[] sha1Hash(byte[]) -> a
com.mazalearn.scienceengine.app.utils.Dimension -> com.mazalearn.scienceengine.a.d.d:
    int width -> a
    int height -> b
com.mazalearn.scienceengine.app.utils.Format -> com.mazalearn.scienceengine.a.d.e:
    java.lang.String formatTime(float) -> a
com.mazalearn.scienceengine.app.utils.IPlatformAdapter -> com.mazalearn.scienceengine.a.d.f:
    void browseURL(java.lang.String) -> a
    boolean playVideo(java.io.File) -> a
    com.badlogic.gdx.scenes.scene2d.Stage createLevelEditor(com.mazalearn.scienceengine.core.controller.IScience2DController,com.mazalearn.scienceengine.app.screens.AbstractScreen) -> a
    com.mazalearn.scienceengine.app.services.IMessage getMsg() -> a
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform getPlatform() -> b
    void getBytes(com.badlogic.gdx.graphics.Pixmap,byte[]) -> a
    void putBytes(com.badlogic.gdx.graphics.Pixmap,byte[]) -> b
    byte[] pixmap2Bytes(com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.graphics.Pixmap bytes2Pixmap(byte[]) -> a
    boolean supportsLanguage() -> c
    java.lang.String httpPost(java.lang.String,java.lang.String,java.util.Map,byte[]) -> a
    void takeSnapshot(com.badlogic.gdx.scenes.scene2d.Stage,com.mazalearn.scienceengine.Topic,com.mazalearn.scienceengine.Topic,int,int,int,int) -> a
    java.lang.String getInstallationId() -> g
    java.lang.String httpGet(java.lang.String) -> b
    void executeAsync(java.lang.Runnable) -> a
    void launchPurchaseFlow(java.lang.String,com.mazalearn.scienceengine.billing.IBilling) -> a
    void queryInventory(java.util.List,com.mazalearn.scienceengine.billing.IBilling) -> a
    boolean supportsSpeech() -> d
    void speak(java.lang.String,boolean) -> a
    void provisionSpeech() -> e
com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform -> com.mazalearn.scienceengine.a.d.g:
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform Desktop -> a
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform Android -> b
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform AndroidEmulator -> c
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform GWT -> d
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform IOS -> e
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform[] ENUM$VALUES -> f
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform[] values() -> values
    com.mazalearn.scienceengine.app.utils.IPlatformAdapter$Platform valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.app.utils.LevelUtil -> com.mazalearn.scienceengine.a.d.h:
    com.badlogic.gdx.graphics.Texture getLevelThumbnail$22c815b4(com.mazalearn.scienceengine.Topic,com.mazalearn.scienceengine.Topic) -> a
    com.badlogic.gdx.graphics.Pixmap getEmptyThumbnail() -> a
    int powerOf2Ceiling(float) -> a
    com.badlogic.gdx.files.FileHandle getLevelFile(com.mazalearn.scienceengine.Topic,com.mazalearn.scienceengine.Topic,java.lang.String) -> a
    java.lang.String getLevelFilename(com.mazalearn.scienceengine.Topic,com.mazalearn.scienceengine.Topic,java.lang.String) -> b
com.mazalearn.scienceengine.app.utils.ProfileMapConverter -> com.mazalearn.scienceengine.a.d.i:
    java.util.Map profileToMap(com.mazalearn.scienceengine.app.services.ProfileData) -> a
com.mazalearn.scienceengine.app.utils.ScreenUtils -> com.mazalearn.scienceengine.a.d.j:
    com.badlogic.gdx.math.Vector3 currentTouch -> a
    com.badlogic.gdx.graphics.Pixmap getScreenshot(float,float,float,float,int,int,com.badlogic.gdx.scenes.scene2d.Stage,boolean) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion createTextureRegion(float,float,com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Label createLabel(java.lang.String,float,float,float,float,com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle) -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton createImageButton(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton createCheckBox$728f9f95(java.lang.String,float,com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle) -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton setupTextBox$22a14b41(float,float,float,com.badlogic.gdx.scenes.scene2d.ui.CheckBox) -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton createImageCheckBox$728f9f95$30d1f14b(float,float,com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle) -> a
    void createProgressPercentageBar(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle,com.badlogic.gdx.scenes.scene2d.ui.TextButton,float,float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor createScienceTrain(int) -> a
com.mazalearn.scienceengine.app.utils.ScreenUtils$1 -> com.mazalearn.scienceengine.a.d.k:
    void drawBackground(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> c
com.mazalearn.scienceengine.app.utils.ScreenUtils$2 -> com.mazalearn.scienceengine.a.d.l:
    void drawBackground(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> c
com.mazalearn.scienceengine.billing.Base64 -> com.mazalearn.scienceengine.b.a:
    byte[] ALPHABET -> b
    byte[] WEBSAFE_ALPHABET -> c
    byte[] DECODABET -> d
    byte[] WEBSAFE_DECODABET -> e
    boolean $assertionsDisabled -> a
    int decode4to3$355785af(byte[],byte[],int,byte[]) -> a
    byte[] decode(java.lang.String) -> a
com.mazalearn.scienceengine.billing.Base64DecoderException -> com.mazalearn.scienceengine.b.b:
com.mazalearn.scienceengine.billing.IBilling -> com.mazalearn.scienceengine.b.c:
    void purchaseCallback(java.lang.String) -> a
    void inventoryCallback(com.mazalearn.scienceengine.billing.Inventory) -> a
com.mazalearn.scienceengine.billing.IabException -> com.mazalearn.scienceengine.b.d:
    com.mazalearn.scienceengine.billing.IabResult mResult -> a
    com.mazalearn.scienceengine.billing.IabResult getResult() -> a
com.mazalearn.scienceengine.billing.IabHelper -> com.mazalearn.scienceengine.b.e:
    boolean mDebugLog -> a
    java.lang.String mDebugTag -> b
    boolean mSetupDone -> c
    boolean mSubscriptionsSupported -> d
    boolean mAsyncInProgress -> e
    java.lang.String mAsyncOperation -> f
    android.content.Context mContext -> g
    com.android.vending.billing.IInAppBillingService mService -> h
    android.content.ServiceConnection mServiceConn -> i
    int mRequestCode -> j
    java.lang.String mPurchasingItemType -> k
    java.lang.String mSignatureBase64 -> l
    com.mazalearn.scienceengine.billing.IabHelper$OnIabPurchaseFinishedListener mPurchaseListener -> m
    void enableDebugLogging$1385ff() -> a
    void startSetup(com.mazalearn.scienceengine.billing.IabHelper$OnIabSetupFinishedListener) -> a
    void dispose() -> b
    boolean inappItemsSupported() -> c
    void launchPurchaseFlow$393134ae(android.app.Activity,java.lang.String,java.lang.String,com.mazalearn.scienceengine.billing.IabHelper$OnIabPurchaseFinishedListener,java.lang.String) -> a
    boolean handleActivityResult(int,int,android.content.Intent) -> a
    com.mazalearn.scienceengine.billing.Inventory queryInventory$57b21199(boolean,java.util.List) -> a
    void queryInventoryAsync(boolean,java.util.List,com.mazalearn.scienceengine.billing.IabHelper$QueryInventoryFinishedListener) -> a
    java.lang.String getResponseDesc(int) -> a
    void checkSetupDone(java.lang.String) -> b
    int getResponseCodeFromBundle(android.os.Bundle) -> a
    void flagStartAsync(java.lang.String) -> c
    void flagEndAsync() -> d
    int queryPurchases(com.mazalearn.scienceengine.billing.Inventory,java.lang.String) -> a
    int querySkuDetails(java.lang.String,com.mazalearn.scienceengine.billing.Inventory,java.util.List) -> a
    void logDebug(java.lang.String) -> a
    void logError(java.lang.String) -> d
    void logWarn(java.lang.String) -> e
com.mazalearn.scienceengine.billing.IabHelper$1 -> com.mazalearn.scienceengine.b.f:
    com.mazalearn.scienceengine.billing.IabHelper this$0 -> a
    com.mazalearn.scienceengine.billing.IabHelper$OnIabSetupFinishedListener val$listener -> b
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
com.mazalearn.scienceengine.billing.IabHelper$2 -> com.mazalearn.scienceengine.b.g:
    com.mazalearn.scienceengine.billing.IabHelper this$0 -> a
    boolean val$querySkuDetails -> b
    java.util.List val$moreSkus -> c
    android.os.Handler val$handler -> d
    com.mazalearn.scienceengine.billing.IabHelper$QueryInventoryFinishedListener val$listener -> e
    void run() -> run
com.mazalearn.scienceengine.billing.IabHelper$2$1 -> com.mazalearn.scienceengine.b.h:
    com.mazalearn.scienceengine.billing.IabHelper$2 this$1 -> a
    com.mazalearn.scienceengine.billing.IabHelper$QueryInventoryFinishedListener val$listener -> b
    com.mazalearn.scienceengine.billing.IabResult val$result_f -> c
    com.mazalearn.scienceengine.billing.Inventory val$inv_f -> d
    void run() -> run
com.mazalearn.scienceengine.billing.IabHelper$OnIabPurchaseFinishedListener -> com.mazalearn.scienceengine.b.i:
    void onIabPurchaseFinished(com.mazalearn.scienceengine.billing.IabResult,com.mazalearn.scienceengine.billing.Purchase) -> a
com.mazalearn.scienceengine.billing.IabHelper$OnIabSetupFinishedListener -> com.mazalearn.scienceengine.b.j:
    void onIabSetupFinished(com.mazalearn.scienceengine.billing.IabResult) -> a
com.mazalearn.scienceengine.billing.IabHelper$QueryInventoryFinishedListener -> com.mazalearn.scienceengine.b.k:
    void onQueryInventoryFinished(com.mazalearn.scienceengine.billing.IabResult,com.mazalearn.scienceengine.billing.Inventory) -> a
com.mazalearn.scienceengine.billing.IabResult -> com.mazalearn.scienceengine.b.l:
    int mResponse -> a
    java.lang.String mMessage -> b
    int getResponse() -> a
    boolean isSuccess() -> b
    boolean isFailure() -> c
    java.lang.String toString() -> toString
com.mazalearn.scienceengine.billing.Inventory -> com.mazalearn.scienceengine.b.m:
    java.util.Map mSkuMap -> a
    java.util.Map mPurchaseMap -> b
    com.mazalearn.scienceengine.billing.SkuDetails getSkuDetails(java.lang.String) -> a
    java.util.Set getAllOwnedSkus() -> a
    java.util.List getAllOwnedSkus(java.lang.String) -> b
    void addSkuDetails(com.mazalearn.scienceengine.billing.SkuDetails) -> a
com.mazalearn.scienceengine.billing.Purchase -> com.mazalearn.scienceengine.b.n:
    java.lang.String itemType -> a
    java.lang.String productId -> b
    java.lang.String developerPayload -> c
    java.lang.String purchaseToken -> d
    java.lang.String originalJson -> e
    java.lang.String signature -> f
    com.mazalearn.scienceengine.billing.Purchase toPurchase(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getItemType() -> a
    java.lang.String getProductId() -> b
    java.lang.String getDeveloperPayload() -> c
    java.lang.String getPurchaseToken() -> d
    java.lang.String toString() -> toString
com.mazalearn.scienceengine.billing.Security -> com.mazalearn.scienceengine.b.o:
    java.lang.String[] PKEY -> a
    com.mazalearn.scienceengine.billing.Security$Logger Log -> b
    java.lang.String getPublicKey() -> a
    boolean verifyPurchase(java.lang.String,java.lang.String,java.lang.String) -> a
    java.security.PublicKey generatePublicKey(java.lang.String) -> a
    boolean verify(java.security.PublicKey,java.lang.String,java.lang.String) -> a
com.mazalearn.scienceengine.billing.Security$Logger -> com.mazalearn.scienceengine.b.p:
    void e(java.lang.String,java.lang.String) -> a
com.mazalearn.scienceengine.billing.SkuDetails -> com.mazalearn.scienceengine.b.q:
    java.lang.String itemType -> a
    java.lang.String productId -> b
    java.lang.String price -> c
    java.lang.String description -> d
    java.lang.String mJson -> e
    com.mazalearn.scienceengine.billing.SkuDetails toSkuDetails(java.lang.String,java.lang.String) -> a
    java.lang.String getProductId() -> a
    java.lang.String getPrice() -> b
    java.lang.String getDescription() -> c
    java.lang.String toString() -> toString
com.mazalearn.scienceengine.core.controller.AbstractModelConfig -> com.mazalearn.scienceengine.c.a.a:
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType type -> b
    com.mazalearn.scienceengine.core.model.Science2DBody body -> c
    com.mazalearn.scienceengine.core.model.IParameter parameter -> a
    boolean isPermitted -> d
    float low -> e
    float high -> f
    java.lang.Enum[] values -> g
    java.lang.String name -> h
    void setPermitted(boolean) -> a
    boolean isMeter() -> a
    boolean isPermitted() -> b
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType getType() -> c
    java.lang.String getName() -> d
    com.mazalearn.scienceengine.core.model.Science2DBody getBody() -> e
    com.mazalearn.scienceengine.core.model.IParameter getParameter() -> f
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
    boolean isPossible() -> h
    boolean isAvailable() -> i
    boolean hasProbeMode() -> j
    void setProbeMode() -> k
    float getLow() -> l
    float getHigh() -> m
    void setRange(float,float) -> a
    void doCommand() -> n
    java.lang.Enum[] getList() -> o
com.mazalearn.scienceengine.core.controller.AbstractScience2DController -> com.mazalearn.scienceengine.c.a.b:
    com.mazalearn.scienceengine.core.view.ModelControls modelControls -> a
    com.mazalearn.scienceengine.core.view.ViewControls viewControls -> b
    com.mazalearn.scienceengine.core.model.IScience2DModel science2DModel -> c
    com.mazalearn.scienceengine.core.view.IScience2DView science2DView -> d
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> e
    com.mazalearn.scienceengine.Topic topic -> f
    com.mazalearn.scienceengine.Topic level -> g
    com.mazalearn.scienceengine.tutor.Guru guru -> h
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$model$CoreComponentType -> i
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$tutor$TutorType -> j
    void initialize(com.mazalearn.scienceengine.core.model.IScience2DModel,com.mazalearn.scienceengine.core.view.AbstractScience2DView) -> a
    com.mazalearn.scienceengine.Topic getTopic() -> a
    java.lang.String getTitle() -> b
    com.mazalearn.scienceengine.Topic getLevel() -> c
    com.mazalearn.scienceengine.core.view.IScience2DView getView() -> d
    com.mazalearn.scienceengine.core.model.IScience2DModel getModel() -> e
    com.mazalearn.scienceengine.core.view.ModelControls getModelControls() -> f
    com.mazalearn.scienceengine.core.view.ViewControls getViewControls() -> g
    void reset() -> h
    com.mazalearn.scienceengine.tutor.Guru getGuru() -> i
    com.badlogic.gdx.scenes.scene2d.Actor addScience2DActor(java.lang.String,java.lang.String,float,float,float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor createActor(java.lang.String,java.lang.String,com.mazalearn.scienceengine.core.model.Science2DBody) -> a
    com.mazalearn.scienceengine.tutor.AbstractTutor createTutor(com.mazalearn.scienceengine.tutor.ITutor,java.lang.String,com.mazalearn.scienceengine.Topic,java.lang.String,java.lang.String,com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Array,java.lang.String[],java.lang.String[],java.lang.String[]) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$model$CoreComponentType() -> j
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$tutor$TutorType() -> k
com.mazalearn.scienceengine.core.controller.AbstractScience2DController$1 -> com.mazalearn.scienceengine.c.a.c:
    com.mazalearn.scienceengine.core.controller.AbstractScience2DController this$0 -> a
    void showHelp(com.badlogic.gdx.scenes.scene2d.Stage,boolean) -> a
com.mazalearn.scienceengine.core.controller.CommandButtonControl -> com.mazalearn.scienceengine.c.a.d:
    com.mazalearn.scienceengine.core.controller.IModelConfig command -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextButton textButton -> a
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> a
    void syncWithModel() -> i_
    boolean isActivated() -> j_
com.mazalearn.scienceengine.core.controller.CommandButtonControl$1 -> com.mazalearn.scienceengine.c.a.e:
    com.mazalearn.scienceengine.core.controller.CommandButtonControl this$0 -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig val$command -> b
    void doCommand() -> f
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.mazalearn.scienceengine.core.controller.Controller -> com.mazalearn.scienceengine.c.a.f:
    com.esotericsoftware.tablelayout.Cell cellTable -> a
    com.mazalearn.scienceengine.core.controller.IControl control -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table table -> c
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$controller$IModelConfig$ConfigType -> d
    void validate() -> a
    com.mazalearn.scienceengine.core.controller.Controller createController(com.mazalearn.scienceengine.core.controller.IModelConfig,com.badlogic.gdx.scenes.scene2d.ui.Table,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> a
    com.mazalearn.scienceengine.core.controller.Controller createController(com.mazalearn.scienceengine.core.controller.IModelConfig,com.badlogic.gdx.scenes.scene2d.ui.Table,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$controller$IModelConfig$ConfigType() -> b
com.mazalearn.scienceengine.core.controller.IControl -> com.mazalearn.scienceengine.c.a.g:
    void syncWithModel() -> i_
    boolean isActivated() -> j_
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> a
com.mazalearn.scienceengine.core.controller.IModelConfig -> com.mazalearn.scienceengine.c.a.h:
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType getType() -> c
    java.lang.String getName() -> d
    com.mazalearn.scienceengine.core.model.IParameter getParameter() -> f
    boolean isAvailable() -> i
    boolean isMeter() -> a
    void doCommand() -> n
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
    float getLow() -> l
    float getHigh() -> m
    java.lang.Enum[] getList() -> o
    void setPermitted(boolean) -> a
    boolean isPermitted() -> b
    boolean isPossible() -> h
    boolean hasProbeMode() -> j
    void setProbeMode() -> k
    com.mazalearn.scienceengine.core.model.Science2DBody getBody() -> e
com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType -> com.mazalearn.scienceengine.c.a.i:
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType RANGE -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType LIST -> b
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType COMMAND -> c
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType TOGGLE -> d
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType TEXT -> e
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType[] ENUM$VALUES -> f
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType[] values() -> values
    com.mazalearn.scienceengine.core.controller.IModelConfig$ConfigType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.core.controller.IScience2DController -> com.mazalearn.scienceengine.c.a.j:
    com.mazalearn.scienceengine.core.view.IScience2DView getView() -> d
    com.mazalearn.scienceengine.core.model.IScience2DModel getModel() -> e
    com.mazalearn.scienceengine.core.view.ModelControls getModelControls() -> f
    com.mazalearn.scienceengine.Topic getTopic() -> a
    com.mazalearn.scienceengine.Topic getLevel() -> c
    void reset() -> h
    com.badlogic.gdx.scenes.scene2d.Actor addScience2DActor(java.lang.String,java.lang.String,float,float,float) -> a
    com.mazalearn.scienceengine.tutor.Guru getGuru() -> i
    com.mazalearn.scienceengine.tutor.AbstractTutor createTutor(com.mazalearn.scienceengine.tutor.ITutor,java.lang.String,com.mazalearn.scienceengine.Topic,java.lang.String,java.lang.String,com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Array,java.lang.String[],java.lang.String[],java.lang.String[]) -> a
    com.mazalearn.scienceengine.core.view.ViewControls getViewControls() -> g
    java.lang.String getTitle() -> b
com.mazalearn.scienceengine.core.controller.SelectBoxControl -> com.mazalearn.scienceengine.c.a.k:
    com.mazalearn.scienceengine.core.controller.IModelConfig property -> a
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox selectBox -> b
    java.lang.String[] getItems(com.mazalearn.scienceengine.core.controller.IModelConfig) -> a
    void syncWithModel() -> i_
    boolean isActivated() -> j_
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> a
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox access$0(com.mazalearn.scienceengine.core.controller.SelectBoxControl) -> a
com.mazalearn.scienceengine.core.controller.SelectBoxControl$1 -> com.mazalearn.scienceengine.c.a.l:
    com.mazalearn.scienceengine.core.controller.SelectBoxControl this$0 -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig val$property -> b
    void changed$d8a80ea(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.mazalearn.scienceengine.core.controller.SelectBoxControl$2 -> com.mazalearn.scienceengine.c.a.m:
    com.mazalearn.scienceengine.core.controller.SelectBoxControl this$0 -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig val$property -> b
    void doCommand() -> f
com.mazalearn.scienceengine.core.controller.SliderControl -> com.mazalearn.scienceengine.c.a.n:
    com.mazalearn.scienceengine.core.controller.IModelConfig property -> a
    com.badlogic.gdx.scenes.scene2d.ui.Slider slider -> b
    void syncWithModel() -> i_
    boolean isActivated() -> j_
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> a
    com.badlogic.gdx.scenes.scene2d.ui.Slider access$0(com.mazalearn.scienceengine.core.controller.SliderControl) -> a
com.mazalearn.scienceengine.core.controller.SliderControl$1 -> com.mazalearn.scienceengine.c.a.o:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> b
    com.mazalearn.scienceengine.core.controller.SliderControl this$0 -> c
    com.mazalearn.scienceengine.core.controller.IModelConfig val$property -> d
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.core.controller.SliderControl$2 -> com.mazalearn.scienceengine.c.a.p:
    com.mazalearn.scienceengine.core.controller.SliderControl this$0 -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig val$property -> b
    void changed$d8a80ea(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.mazalearn.scienceengine.core.controller.SliderControl$3 -> com.mazalearn.scienceengine.c.a.q:
    com.mazalearn.scienceengine.core.controller.SliderControl this$0 -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig val$property -> b
    void doCommand() -> f
com.mazalearn.scienceengine.core.controller.TextMeter -> com.mazalearn.scienceengine.c.a.r:
    com.mazalearn.scienceengine.core.controller.IModelConfig property -> a
    com.badlogic.gdx.scenes.scene2d.ui.Label label -> b
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> a
    void syncWithModel() -> i_
    boolean isActivated() -> j_
    com.badlogic.gdx.scenes.scene2d.ui.Label access$0(com.mazalearn.scienceengine.core.controller.TextMeter) -> a
com.mazalearn.scienceengine.core.controller.TextMeter$1 -> com.mazalearn.scienceengine.c.a.s:
    com.mazalearn.scienceengine.core.controller.TextMeter this$0 -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig val$property -> b
    void doCommand() -> f
com.mazalearn.scienceengine.core.controller.ToggleButtonControl -> com.mazalearn.scienceengine.c.a.t:
    com.mazalearn.scienceengine.core.controller.IModelConfig property -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextButton toggleButton -> a
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> a
    void syncWithModel() -> i_
    boolean isActivated() -> j_
com.mazalearn.scienceengine.core.controller.ToggleButtonControl$1 -> com.mazalearn.scienceengine.c.a.u:
    com.mazalearn.scienceengine.core.controller.ToggleButtonControl this$0 -> d
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.core.controller.ToggleButtonControl$2 -> com.mazalearn.scienceengine.c.a.v:
    com.mazalearn.scienceengine.core.controller.ToggleButtonControl this$0 -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig val$property -> b
    void doCommand() -> f
com.mazalearn.scienceengine.core.lang.BinaryExpr -> com.mazalearn.scienceengine.c.b.a:
    int rator -> a
    com.mazalearn.scienceengine.core.lang.Expr rand0 -> b
    com.mazalearn.scienceengine.core.lang.Expr rand1 -> c
    java.util.List BOOLEAN_OPS -> d
    double fvalue() -> a
    java.lang.String svalue() -> b
    boolean bvalue() -> c
com.mazalearn.scienceengine.core.lang.ConditionalExpr -> com.mazalearn.scienceengine.c.b.b:
    com.mazalearn.scienceengine.core.lang.Expr test -> a
    com.mazalearn.scienceengine.core.lang.Expr consequent -> b
    com.mazalearn.scienceengine.core.lang.Expr alternative -> c
    double fvalue() -> a
    java.lang.String svalue() -> b
    boolean bvalue() -> c
com.mazalearn.scienceengine.core.lang.Event -> com.mazalearn.scienceengine.c.b.c:
    com.mazalearn.scienceengine.core.lang.Event$Type type -> a
    java.lang.String object -> b
    java.lang.String action -> c
    float fvalue -> d
    boolean bvalue -> e
    java.lang.String svalue -> f
    float time -> g
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$lang$Event$Type -> h
    java.lang.String getObject() -> a
    java.lang.String getAction() -> b
    float fvalue() -> c
    com.mazalearn.scienceengine.core.lang.Event$Type getType() -> d
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$lang$Event$Type() -> e
com.mazalearn.scienceengine.core.lang.Event$Type -> com.mazalearn.scienceengine.c.b.d:
    com.mazalearn.scienceengine.core.lang.Event$Type FLOAT -> a
    com.mazalearn.scienceengine.core.lang.Event$Type STRING -> b
    com.mazalearn.scienceengine.core.lang.Event$Type BOOLEAN -> c
    com.mazalearn.scienceengine.core.lang.Event$Type[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.core.lang.Event$Type[] values() -> values
    com.mazalearn.scienceengine.core.lang.Event$Type valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.core.lang.Expr -> com.mazalearn.scienceengine.c.b.e:
    com.mazalearn.scienceengine.core.lang.Expr$Type type -> e
    double fvalue() -> a
    java.lang.String svalue() -> b
    boolean bvalue() -> c
    com.mazalearn.scienceengine.core.lang.Expr makeApp1(int,com.mazalearn.scienceengine.core.lang.Expr) -> a
    com.mazalearn.scienceengine.core.lang.Expr makeApp2(int,com.mazalearn.scienceengine.core.lang.Expr,com.mazalearn.scienceengine.core.lang.Expr) -> a
com.mazalearn.scienceengine.core.lang.Expr$Type -> com.mazalearn.scienceengine.c.b.f:
    com.mazalearn.scienceengine.core.lang.Expr$Type DOUBLE -> a
    com.mazalearn.scienceengine.core.lang.Expr$Type STRING -> b
    com.mazalearn.scienceengine.core.lang.Expr$Type BOOL -> c
    com.mazalearn.scienceengine.core.lang.Expr$Type[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.core.lang.Expr$Type[] values() -> values
    com.mazalearn.scienceengine.core.lang.Expr$Type valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.core.lang.FunctionExpr -> com.mazalearn.scienceengine.c.b.g:
    int arity -> a
    int rator -> b
    com.mazalearn.scienceengine.core.lang.Variable rand0 -> c
    com.mazalearn.scienceengine.core.lang.Variable rand1 -> d
    com.mazalearn.scienceengine.core.lang.IFunction$A0 function0 -> f
    com.mazalearn.scienceengine.core.lang.IFunction$A1 function1 -> g
    com.mazalearn.scienceengine.core.lang.IFunction$A2 function2 -> h
    double fvalue() -> a
    java.lang.String svalue() -> b
    boolean bvalue() -> c
com.mazalearn.scienceengine.core.lang.IFunction -> com.mazalearn.scienceengine.c.b.h:
com.mazalearn.scienceengine.core.lang.IFunction$A0 -> com.mazalearn.scienceengine.c.b.i:
    float eval() -> a
com.mazalearn.scienceengine.core.lang.IFunction$A1 -> com.mazalearn.scienceengine.c.b.j:
    float eval(java.lang.String) -> a
com.mazalearn.scienceengine.core.lang.IFunction$A2 -> com.mazalearn.scienceengine.c.b.k:
    float eval$16da0607() -> a
com.mazalearn.scienceengine.core.lang.NumberLiteralExpr -> com.mazalearn.scienceengine.c.b.l:
    double v -> a
    double fvalue() -> a
    java.lang.String svalue() -> b
    boolean bvalue() -> c
com.mazalearn.scienceengine.core.lang.Parser -> com.mazalearn.scienceengine.c.b.m:
    com.mazalearn.scienceengine.core.lang.Variable pi -> b
    java.util.Set variables -> c
    java.util.HashMap allowedVariables -> d
    java.util.Map functions0 -> e
    java.util.Map functions1 -> f
    java.util.Map functions2 -> g
    com.mazalearn.scienceengine.core.lang.Scanner tokens -> a
    com.mazalearn.scienceengine.core.lang.Token token -> h
    java.lang.String[] procs1 -> i
    int[] rators1 -> j
    java.lang.String[] procs2 -> k
    int[] rators2 -> l
    void allowFunctions(java.util.Map,java.util.Map,java.util.Map) -> a
    java.util.Set getVariables() -> a
    com.mazalearn.scienceengine.core.lang.Expr parseString(java.lang.String) -> a
    void nextToken() -> b
    com.mazalearn.scienceengine.core.lang.Expr parseExpr(int) -> a
    com.mazalearn.scienceengine.core.lang.SyntaxException error(java.lang.String,int,java.lang.String) -> a
    void expect(int) -> b
com.mazalearn.scienceengine.core.lang.Scanner -> com.mazalearn.scienceengine.c.b.n:
    java.lang.String s -> c
    java.lang.String operatorChars -> d
    java.util.Vector tokens -> a
    int index -> b
    java.lang.String toString() -> toString
    boolean isAlphanumeric(com.mazalearn.scienceengine.core.lang.Token) -> a
    com.mazalearn.scienceengine.core.lang.Token getCurrentToken() -> a
    int scanToken(int) -> a
    int scanNumber(int) -> b
    com.mazalearn.scienceengine.core.lang.Token makeErrorToken(int,int) -> a
com.mazalearn.scienceengine.core.lang.StringLiteralExpr -> com.mazalearn.scienceengine.c.b.o:
    java.lang.String v -> a
    double fvalue() -> a
    java.lang.String svalue() -> b
    boolean bvalue() -> c
com.mazalearn.scienceengine.core.lang.SyntaxException -> com.mazalearn.scienceengine.c.b.p:
    com.mazalearn.scienceengine.core.lang.Parser parser -> a
    com.mazalearn.scienceengine.core.lang.Scanner scanner -> b
    int reason -> c
    java.lang.String expected -> d
    java.lang.String fixedInput -> e
com.mazalearn.scienceengine.core.lang.Token -> com.mazalearn.scienceengine.c.b.q:
    int ttype -> a
    java.lang.String sval -> b
    double nval -> c
    int location -> d
    int leadingWhitespace -> e
    int trailingWhitespace -> f
com.mazalearn.scienceengine.core.lang.UnaryExpr -> com.mazalearn.scienceengine.c.b.r:
    int rator -> a
    com.mazalearn.scienceengine.core.lang.Expr rand -> b
    double fvalue() -> a
    java.lang.String svalue() -> b
    boolean bvalue() -> c
com.mazalearn.scienceengine.core.lang.Variable -> com.mazalearn.scienceengine.c.b.s:
    java.util.HashMap variables -> a
    java.lang.String name -> b
    double fval -> c
    java.lang.String sval -> d
    boolean bval -> f
    com.mazalearn.scienceengine.core.lang.Variable make(java.lang.String) -> a
    java.lang.String name() -> d
    java.lang.String toString() -> toString
    double fvalue() -> a
    java.lang.String svalue() -> b
    boolean bvalue() -> c
    void setValue(boolean) -> a
    void setValue(double) -> a
    void setValue(java.lang.String) -> b
com.mazalearn.scienceengine.core.model.AbstractScience2DModel -> com.mazalearn.scienceengine.c.c.a:
    com.badlogic.gdx.physics.box2d.World box2DWorld -> a
    java.util.List bodies -> b
    java.util.Map modelConfigs -> h
    java.util.Map allConfigs -> i
    boolean isEnabled -> j
    int numStepsPerView -> c
    java.util.List circuits -> k
    java.util.List emProducers -> d
    java.util.List emConsumers -> e
    com.badlogic.gdx.math.Vector3 bField -> f
    com.badlogic.gdx.math.Vector3 totalBField -> g
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$model$CoreComponentType -> l
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$controller$IModelConfig$ConfigType -> m
    com.mazalearn.scienceengine.core.controller.IModelConfig getConfig(java.lang.String) -> a
    void simulateSteps(float) -> a
    void singleStep() -> a
    com.mazalearn.scienceengine.core.model.Science2DBody addBody(java.lang.String,float,float,float) -> a
    com.mazalearn.scienceengine.core.model.Science2DBody findBody(com.mazalearn.scienceengine.core.model.IComponentType) -> a
    void propagateField() -> b
    void getBField(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector3) -> a
    void notifyFieldChange() -> c
    void addCircuit(com.mazalearn.scienceengine.core.model.ICurrent$CircuitElement[]) -> a
    java.util.List getCircuits() -> d
    void removeCircuits() -> e
    void notifyCurrentChange(com.mazalearn.scienceengine.core.model.ICurrent$Source) -> a
    java.util.Map getAllConfigs() -> f
    boolean isEnabled() -> g
    void enable(boolean) -> a
    com.badlogic.gdx.physics.box2d.World getBox2DWorld() -> h
    com.mazalearn.scienceengine.core.model.Science2DBody createScience2DBody(java.lang.String,float,float,float) -> b
    void reset() -> i
    void prepareModel() -> j
    java.util.List getBodies() -> k
    void bindParameterValues(java.util.Collection) -> a
    com.mazalearn.scienceengine.core.model.Science2DBody findBody(java.lang.String) -> b
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$model$CoreComponentType() -> l
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$controller$IModelConfig$ConfigType() -> m
com.mazalearn.scienceengine.core.model.CoreComponentType -> com.mazalearn.scienceengine.c.c.b:
    com.mazalearn.scienceengine.core.model.CoreComponentType Dummy -> a
    com.mazalearn.scienceengine.core.model.CoreComponentType Drawing -> b
    com.mazalearn.scienceengine.core.model.CoreComponentType Environment -> c
    com.mazalearn.scienceengine.core.model.CoreComponentType Global -> d
    com.mazalearn.scienceengine.core.model.CoreComponentType ScienceTrain -> e
    com.mazalearn.scienceengine.core.model.CoreComponentType Image -> f
    com.mazalearn.scienceengine.core.model.CoreComponentType[] ENUM$VALUES -> g
    com.mazalearn.scienceengine.core.model.CoreComponentType[] values() -> values
    com.mazalearn.scienceengine.core.model.CoreComponentType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.core.model.Drawing -> com.mazalearn.scienceengine.c.c.c:
    java.util.List points -> a
    void initializeConfigs() -> a
    void reset() -> l_
    void addPointSequence() -> c
    void addPoint(float,float) -> a
    java.util.List getPointSequences() -> d
    boolean allowsConfiguration() -> e
com.mazalearn.scienceengine.core.model.DummyBody -> com.mazalearn.scienceengine.c.c.d:
    float[] parameters -> a
    com.mazalearn.scienceengine.core.model.DummyBody$ProbeConfig probeConfig -> f
    void initializeConfigs() -> a
    boolean allowsConfiguration() -> e
com.mazalearn.scienceengine.core.model.DummyBody$ProbeConfig -> com.mazalearn.scienceengine.c.c.e:
    int num -> c
    com.mazalearn.scienceengine.core.model.DummyBody this$0 -> b
    boolean isPossible() -> h
    boolean isAvailable() -> i
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.core.model.EnvironmentBody -> com.mazalearn.scienceengine.c.c.f:
    java.util.List parameters -> a
    java.util.List environmentConfigs -> f
    void initializeConfigs() -> a
    void addParameter(java.lang.String) -> a
com.mazalearn.scienceengine.core.model.EnvironmentBody$1 -> com.mazalearn.scienceengine.c.c.g:
    com.mazalearn.scienceengine.core.model.EnvironmentBody this$0 -> b
    int val$index -> c
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.core.model.EnvironmentBody$Parameter -> com.mazalearn.scienceengine.c.c.h:
    java.lang.String name -> b
    com.mazalearn.scienceengine.core.model.EnvironmentBody this$0 -> a
    java.lang.String toString() -> toString
    java.lang.String name() -> name
com.mazalearn.scienceengine.core.model.IComponentType -> com.mazalearn.scienceengine.c.c.i:
    java.lang.String name() -> name
com.mazalearn.scienceengine.core.model.ICurrent -> com.mazalearn.scienceengine.c.c.j:
com.mazalearn.scienceengine.core.model.ICurrent$CircuitElement -> com.mazalearn.scienceengine.c.c.k:
    com.badlogic.gdx.math.Vector2 getT1Position() -> c
    com.badlogic.gdx.math.Vector2 getT2Position() -> d
    boolean isActive() -> h_
com.mazalearn.scienceengine.core.model.ICurrent$Sink -> com.mazalearn.scienceengine.c.c.l:
    void setCurrent(float) -> a
com.mazalearn.scienceengine.core.model.ICurrent$Source -> com.mazalearn.scienceengine.c.c.m:
    float getCurrent() -> b
com.mazalearn.scienceengine.core.model.IMagneticField -> com.mazalearn.scienceengine.c.c.n:
com.mazalearn.scienceengine.core.model.IMagneticField$Consumer -> com.mazalearn.scienceengine.c.c.o:
    com.badlogic.gdx.math.Vector2 getPosition() -> g_
    void setBField(com.badlogic.gdx.math.Vector3) -> a
    boolean isActive() -> h_
    void notifyFieldChange() -> d
com.mazalearn.scienceengine.core.model.IMagneticField$Producer -> com.mazalearn.scienceengine.c.c.p:
    com.badlogic.gdx.math.Vector3 getBField(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector3) -> a
    boolean isActive() -> h_
    com.badlogic.gdx.math.Vector2 getPosition() -> g_
com.mazalearn.scienceengine.core.model.IParameter -> com.mazalearn.scienceengine.c.c.q:
    java.lang.String name() -> name
com.mazalearn.scienceengine.core.model.IScience2DModel -> com.mazalearn.scienceengine.c.c.r:
    void reset() -> i
    void simulateSteps(float) -> a
    java.util.Map getAllConfigs() -> f
    com.badlogic.gdx.physics.box2d.World getBox2DWorld() -> h
    void enable(boolean) -> a
    boolean isEnabled() -> g
    void notifyFieldChange() -> c
    void getBField(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector3) -> a
    java.util.List getCircuits() -> d
    void removeCircuits() -> e
    void addCircuit(com.mazalearn.scienceengine.core.model.ICurrent$CircuitElement[]) -> a
    void notifyCurrentChange(com.mazalearn.scienceengine.core.model.ICurrent$Source) -> a
    com.mazalearn.scienceengine.core.model.Science2DBody addBody(java.lang.String,float,float,float) -> a
    void prepareModel() -> j
    com.mazalearn.scienceengine.core.controller.IModelConfig getConfig(java.lang.String) -> a
    com.mazalearn.scienceengine.core.model.Science2DBody findBody(com.mazalearn.scienceengine.core.model.IComponentType) -> a
    com.mazalearn.scienceengine.core.model.Science2DBody findBody(java.lang.String) -> b
    void bindParameterValues(java.util.Collection) -> a
    java.util.List getBodies() -> k
com.mazalearn.scienceengine.core.model.Parameter -> com.mazalearn.scienceengine.c.c.s:
    com.mazalearn.scienceengine.core.model.Parameter Self -> a
    com.mazalearn.scienceengine.core.model.Parameter Reset -> b
    com.mazalearn.scienceengine.core.model.Parameter Tutoring -> c
    com.mazalearn.scienceengine.core.model.Parameter PauseResume -> d
    com.mazalearn.scienceengine.core.model.Parameter Select -> e
    com.mazalearn.scienceengine.core.model.Parameter Move -> f
    com.mazalearn.scienceengine.core.model.Parameter NameOfSelectedBody -> g
    com.mazalearn.scienceengine.core.model.Parameter Rotate -> h
    com.mazalearn.scienceengine.core.model.Parameter Tutor -> i
    com.mazalearn.scienceengine.core.model.Parameter RotationAngle -> j
    com.mazalearn.scienceengine.core.model.Parameter[] ENUM$VALUES -> k
    java.lang.String toString() -> toString
    com.mazalearn.scienceengine.core.model.Parameter[] values() -> values
    com.mazalearn.scienceengine.core.model.Parameter valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.core.model.Science2DBody -> com.mazalearn.scienceengine.c.c.t:
    com.badlogic.gdx.physics.box2d.World box2DWorld -> a
    com.badlogic.gdx.physics.box2d.Body GROUND -> f
    com.mazalearn.scienceengine.core.model.IScience2DModel model -> g
    com.badlogic.gdx.physics.box2d.Body body -> b
    java.util.List configs -> c
    com.badlogic.gdx.math.Vector2 aPosition -> h
    com.mazalearn.scienceengine.core.model.IComponentType componentType -> i
    int count -> j
    com.mazalearn.scienceengine.core.model.Science2DBody$MovementMode movementMode -> k
    com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef rotationJointDef -> l
    com.badlogic.gdx.physics.box2d.Joint rotationJoint -> m
    float prevAngularVelocity -> d
    float angleCovered -> e
    float prevAngle -> n
    void setCount(int) -> a
    void initializeConfigs() -> a
    java.util.List getConfigs() -> f
    void singleStep(float) -> b
    int getNumRevolutions() -> g
    void reset() -> l_
    void setPositionAndAngle(com.badlogic.gdx.math.Vector2,float) -> a
    void setBox2DWorld(com.badlogic.gdx.physics.box2d.World) -> a
    java.lang.String getComponentTypeName() -> h
    java.lang.String name() -> i
    java.lang.String getLocalizedName() -> j
    com.mazalearn.scienceengine.core.model.IComponentType getComponentType() -> k
    com.badlogic.gdx.physics.box2d.Body getBody() -> l
    com.mazalearn.scienceengine.core.model.IScience2DModel getModel() -> m
    void setModel(com.mazalearn.scienceengine.core.model.IScience2DModel) -> a
    java.lang.String getMovementMode() -> n
    void setMovementMode(java.lang.String) -> b
    boolean allowsConfiguration() -> e
    com.badlogic.gdx.physics.box2d.Fixture createFixture(com.badlogic.gdx.physics.box2d.FixtureDef) -> a
    com.badlogic.gdx.math.Vector2 getPosition() -> g_
    float getAngle() -> o
    com.badlogic.gdx.math.Vector2 getWorldCenter() -> p
    void setLinearVelocity(com.badlogic.gdx.math.Vector2) -> a
    void setLinearVelocity$2548a35() -> q
    com.badlogic.gdx.math.Vector2 getLinearVelocity() -> r
    void setAngularVelocity(float) -> c
    float getAngularVelocity() -> s
    void applyForce(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 getWorldPoint(com.badlogic.gdx.math.Vector2) -> b
    com.badlogic.gdx.math.Vector2 getLocalPoint(com.badlogic.gdx.math.Vector2) -> c
    void setAngularDamping(float) -> d
    void setType(com.badlogic.gdx.physics.box2d.BodyDef$BodyType) -> a
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType getType() -> t
    void setActive(boolean) -> a
    boolean isActive() -> h_
com.mazalearn.scienceengine.core.model.Science2DBody$1 -> com.mazalearn.scienceengine.c.c.u:
    com.mazalearn.scienceengine.core.model.Science2DBody this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.core.model.Science2DBody$MovementMode -> com.mazalearn.scienceengine.c.c.v:
    com.mazalearn.scienceengine.core.model.Science2DBody$MovementMode Move -> a
    com.mazalearn.scienceengine.core.model.Science2DBody$MovementMode Rotate -> b
    com.mazalearn.scienceengine.core.model.Science2DBody$MovementMode None -> c
    com.mazalearn.scienceengine.core.model.Science2DBody$MovementMode[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.core.model.Science2DBody$MovementMode[] values() -> values
    com.mazalearn.scienceengine.core.model.Science2DBody$MovementMode valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.core.model.ScienceTrain -> com.mazalearn.scienceengine.c.c.w:
    boolean allowsConfiguration() -> e
com.mazalearn.scienceengine.core.view.AbstractScience2DView -> com.mazalearn.scienceengine.c.d.a:
    com.mazalearn.scienceengine.core.model.IScience2DModel science2DModel -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> b
    boolean isTutoringInProgress -> d
    com.mazalearn.scienceengine.core.view.ModelControls modelControls -> c
    java.util.List locationGroups -> e
    com.badlogic.gdx.math.Vector2 deltaPosition -> f
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> g
    java.util.List viewCommands -> h
    com.mazalearn.scienceengine.core.view.ViewControls viewControls -> i
    com.badlogic.gdx.scenes.scene2d.Group activityGroup -> j
    void suspend(boolean) -> a
    boolean isSuspended() -> k
    java.util.List getCommands() -> l
    void initializeCommands(java.util.List) -> a
    void done(boolean) -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont getFont() -> m
    com.badlogic.gdx.scenes.scene2d.Actor findActor(java.lang.String) -> a
    void tutoring(boolean) -> c
    void act(float) -> a
    void addLocationGroup(com.badlogic.gdx.scenes.scene2d.Actor[]) -> a
    java.util.List getLocationGroups() -> n
    void removeLocationGroups() -> o
    void notifyLocationChangedByUser$5cc3aa2f(com.mazalearn.scienceengine.core.view.Science2DActor,com.badlogic.gdx.math.Vector2) -> a
    void prepareView() -> p
    void setupControls() -> q
    com.mazalearn.scienceengine.core.view.ModelControls getModelControls() -> r
    void checkActiveTutorProgress() -> s
    com.mazalearn.scienceengine.core.view.ViewControls getViewControls() -> t
com.mazalearn.scienceengine.core.view.ActivityViewControls -> com.mazalearn.scienceengine.c.d.b:
    com.mazalearn.scienceengine.core.view.IScience2DView science2DView -> d
    com.mazalearn.scienceengine.core.controller.IControl suspendControl -> e
    com.mazalearn.scienceengine.core.controller.IControl resetControl -> f
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> g
    void syncWithModel() -> i_
    void enableControls(boolean) -> c
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> a
    com.mazalearn.scienceengine.core.view.IScience2DView access$0(com.mazalearn.scienceengine.core.view.ActivityViewControls) -> a
    com.mazalearn.scienceengine.app.services.IMessage access$1(com.mazalearn.scienceengine.core.view.ActivityViewControls) -> b
    com.mazalearn.scienceengine.core.controller.IScience2DController access$2(com.mazalearn.scienceengine.core.view.ActivityViewControls) -> c
    void access$3(com.mazalearn.scienceengine.core.view.ActivityViewControls) -> d
com.mazalearn.scienceengine.core.view.ActivityViewControls$1 -> com.mazalearn.scienceengine.c.d.c:
    com.mazalearn.scienceengine.core.view.ActivityViewControls this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.core.view.ActivityViewControls$2 -> com.mazalearn.scienceengine.c.d.d:
    com.mazalearn.scienceengine.core.view.ActivityViewControls this$0 -> b
    void syncWithModel() -> i_
com.mazalearn.scienceengine.core.view.ActivityViewControls$3 -> com.mazalearn.scienceengine.c.d.e:
    com.mazalearn.scienceengine.core.view.ActivityViewControls this$0 -> b
    void doCommand() -> n
    boolean isPossible() -> h
com.mazalearn.scienceengine.core.view.ActivityViewControls$4 -> com.mazalearn.scienceengine.c.d.f:
    com.mazalearn.scienceengine.core.view.ActivityViewControls this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.core.view.ActivityViewControls$5 -> com.mazalearn.scienceengine.c.d.g:
    com.mazalearn.scienceengine.core.view.ActivityViewControls this$0 -> a
    com.badlogic.gdx.scenes.scene2d.Actor val$snapshotter -> b
    void drag$1dcb6a94(com.badlogic.gdx.scenes.scene2d.InputEvent) -> a
    void dragStop$1dcb6a94() -> c
com.mazalearn.scienceengine.core.view.AnimateAction -> com.mazalearn.scienceengine.c.d.h:
    com.badlogic.gdx.scenes.scene2d.Action animatePosition(float,float,boolean) -> a
com.mazalearn.scienceengine.core.view.AnimateAction$1 -> com.mazalearn.scienceengine.c.d.i:
    float val$w -> b
    float val$h -> c
    boolean val$visible -> d
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean act(float) -> a
com.mazalearn.scienceengine.core.view.AnimateAction$2 -> com.mazalearn.scienceengine.c.d.j:
    float val$x -> b
    float val$y -> c
    boolean val$visible -> d
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean act(float) -> a
com.mazalearn.scienceengine.core.view.CoachDrawingActor -> com.mazalearn.scienceengine.c.d.k:
    float DRAWING_WHEEL_DIA_X -> a
    float DRAWING_WHEEL_DIA_Y -> c
    float DRAWING_WHEEL_OFFSET -> d
    float DRAWING_COACH_WIDTH -> e
    float DRAWING_COACH_HEIGHT -> f
    com.mazalearn.scienceengine.core.model.Drawing drawing -> g
    com.badlogic.gdx.math.Vector2 pos -> h
    com.badlogic.gdx.math.Vector2 prevPos -> i
    com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer -> j
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> k
    com.badlogic.gdx.graphics.Texture coachTexture -> l
    boolean hasChangedSinceSnapshot -> m
    com.badlogic.gdx.graphics.Pixmap snapshot -> n
    com.mazalearn.scienceengine.core.view.CoachDrawingActor$Coach coach -> o
    java.lang.String viewSpec -> p
    void takeSnapshot() -> v
    boolean hasChangedSinceSnapshot() -> w
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.mazalearn.scienceengine.core.view.CoachDrawingActor$Coach getCoach() -> x
    com.badlogic.gdx.graphics.Pixmap getPixmap() -> y
    com.mazalearn.scienceengine.core.model.Drawing access$0(com.mazalearn.scienceengine.core.view.CoachDrawingActor) -> a
    void access$1$7bdd1b9e(com.mazalearn.scienceengine.core.view.CoachDrawingActor) -> b
    com.badlogic.gdx.math.Vector2 access$2(com.mazalearn.scienceengine.core.view.CoachDrawingActor) -> c
com.mazalearn.scienceengine.core.view.CoachDrawingActor$1 -> com.mazalearn.scienceengine.c.d.l:
    com.mazalearn.scienceengine.core.view.CoachDrawingActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
com.mazalearn.scienceengine.core.view.CoachDrawingActor$Coach -> com.mazalearn.scienceengine.c.d.m:
    com.badlogic.gdx.scenes.scene2d.ui.Label userCurrentLabel -> a
    com.badlogic.gdx.graphics.Color lightColor -> b
    float lightIntensity -> c
    void setLight(float,com.badlogic.gdx.graphics.Color) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.core.view.ColorPanel -> com.mazalearn.scienceengine.c.d.n:
    com.badlogic.gdx.graphics.Texture backgroundTexture -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.core.view.CommandClickListener -> com.mazalearn.scienceengine.c.d.o:
    void clicked$43069389(com.badlogic.gdx.scenes.scene2d.InputEvent) -> a
    void doCommand() -> f
com.mazalearn.scienceengine.core.view.DrawingActor -> com.mazalearn.scienceengine.c.d.p:
    int LINE_WIDTH -> c
    int SCALE -> d
    int SCALED_FACE_WIDTH -> a
    int SCALED_FACE_HEIGHT -> b
    com.badlogic.gdx.math.Vector2 pos -> e
    com.badlogic.gdx.math.Vector2 prevPos -> f
    com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer -> g
    com.badlogic.gdx.graphics.Texture faceTexture -> h
    boolean hasChangedSinceSnapshot -> i
    com.badlogic.gdx.graphics.Pixmap snapshot -> j
    com.mazalearn.scienceengine.core.view.DrawingActor$Face face -> k
    java.util.List pointSequences -> l
    void addPointSequence() -> v
    void addPoint(float,float) -> f
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.badlogic.gdx.graphics.Pixmap getPixmap() -> w
    java.util.List access$0(com.mazalearn.scienceengine.core.view.DrawingActor) -> a
    void access$1$15ee46c2(com.mazalearn.scienceengine.core.view.DrawingActor) -> b
    com.badlogic.gdx.math.Vector2 access$2(com.mazalearn.scienceengine.core.view.DrawingActor) -> c
com.mazalearn.scienceengine.core.view.DrawingActor$1 -> com.mazalearn.scienceengine.c.d.q:
    com.mazalearn.scienceengine.core.view.DrawingActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
com.mazalearn.scienceengine.core.view.DrawingActor$Face -> com.mazalearn.scienceengine.c.d.r:
    com.badlogic.gdx.scenes.scene2d.ui.Label userCurrentLabel -> a
com.mazalearn.scienceengine.core.view.IScience2DView -> com.mazalearn.scienceengine.c.d.s:
    void suspend(boolean) -> a
    boolean isSuspended() -> k
    com.badlogic.gdx.utils.Array getActors() -> b
    void tutoring(boolean) -> c
    com.badlogic.gdx.scenes.scene2d.Actor findActor(java.lang.String) -> a
    java.util.List getLocationGroups() -> n
    void addLocationGroup(com.badlogic.gdx.scenes.scene2d.Actor[]) -> a
    void removeLocationGroups() -> o
    void prepareView() -> p
    void checkActiveTutorProgress() -> s
    com.badlogic.gdx.graphics.g2d.BitmapFont getFont() -> m
    java.util.List getCommands() -> l
    com.mazalearn.scienceengine.core.view.ModelControls getModelControls() -> r
com.mazalearn.scienceengine.core.view.ModelControls -> com.mazalearn.scienceengine.c.d.t:
    com.mazalearn.scienceengine.core.model.IScience2DModel science2DModel -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> b
    java.util.List controllers -> c
    com.badlogic.gdx.scenes.scene2d.ui.Table modelControlPanel -> d
    com.badlogic.gdx.scenes.scene2d.ui.TextButton title -> e
    void refresh() -> A
    void validate() -> d_
    void registerModelConfigs(com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    com.badlogic.gdx.scenes.scene2d.Actor getTitle() -> B
    void act(float) -> a
    void syncWithModel() -> C
    void enableControls(boolean) -> c
com.mazalearn.scienceengine.core.view.ModelControls$1 -> com.mazalearn.scienceengine.c.d.u:
    com.mazalearn.scienceengine.core.view.ModelControls this$0 -> a
    com.mazalearn.scienceengine.core.model.Science2DBody val$body -> b
    java.lang.String name() -> name
    java.lang.String toString() -> toString
com.mazalearn.scienceengine.core.view.ModelControls$2 -> com.mazalearn.scienceengine.c.d.v:
    com.mazalearn.scienceengine.core.view.ModelControls this$0 -> b
    com.mazalearn.scienceengine.core.model.Science2DBody val$body -> c
    boolean isPossible() -> h
    boolean isAvailable() -> i
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.core.view.Science2DActor -> com.mazalearn.scienceengine.c.d.w:
    com.mazalearn.scienceengine.core.model.Science2DBody body -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> c
    com.badlogic.gdx.math.Vector2 viewPos -> d
    com.badlogic.gdx.math.Vector2 box2DPos -> e
    com.badlogic.gdx.math.Vector2 lastTouch -> b
    boolean drag -> f
    com.badlogic.gdx.math.Vector3 currentTouch -> g
    float moveDistance -> h
    void moveToCurrent() -> v
    com.mazalearn.scienceengine.core.model.Science2DBody getBody() -> z
    void setVisible(boolean) -> a
    void act(float) -> a
    java.lang.String getName() -> t
    java.lang.String getLocalizedName() -> e_
    java.lang.String getComponentType() -> f
    void showHelp(com.badlogic.gdx.scenes.scene2d.Stage,boolean) -> a
    void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> A
    void getBox2DPositionFromViewPosition$62b7ab5(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    void setPositionFromViewCoords(boolean) -> b
    java.lang.String getMovementMode() -> B
    void setMovementMode(java.lang.String) -> b
    int getRotationForceScaler() -> C
    void prepareActor() -> D
    void access$0(com.mazalearn.scienceengine.core.view.Science2DActor,boolean) -> a
    void access$1$59f9b2d2(com.mazalearn.scienceengine.core.view.Science2DActor) -> a
    boolean access$2(com.mazalearn.scienceengine.core.view.Science2DActor) -> b
    void access$3(com.mazalearn.scienceengine.core.view.Science2DActor) -> c
    float access$4(com.mazalearn.scienceengine.core.view.Science2DActor) -> d
    com.badlogic.gdx.math.Vector2 access$5(com.mazalearn.scienceengine.core.view.Science2DActor) -> e
com.mazalearn.scienceengine.core.view.Science2DActor$1 -> com.mazalearn.scienceengine.c.d.x:
    com.mazalearn.scienceengine.core.view.Science2DActor this$0 -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$model$Science2DBody$MovementMode -> b
    com.mazalearn.scienceengine.core.model.Science2DBody val$body -> c
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$model$Science2DBody$MovementMode() -> f
com.mazalearn.scienceengine.core.view.Science2DActor$2 -> com.mazalearn.scienceengine.c.d.y:
    com.mazalearn.scienceengine.core.view.Science2DActor this$0 -> a
    com.mazalearn.scienceengine.core.model.Science2DBody val$body -> b
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.mazalearn.scienceengine.core.view.Science2DGestureDetector -> com.mazalearn.scienceengine.c.d.z:
com.mazalearn.scienceengine.core.view.Science2DGestureDetector$Science2DGestureAdapter -> com.mazalearn.scienceengine.c.d.aa:
    com.badlogic.gdx.scenes.scene2d.Stage science2DView -> a
    com.badlogic.gdx.math.Vector2 p -> b
    com.badlogic.gdx.math.Vector2 center -> c
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.mazalearn.scienceengine.core.view.ScienceTrainActor -> com.mazalearn.scienceengine.c.d.ab:
    com.mazalearn.scienceengine.core.view.IScience2DView science2DView -> b
    com.badlogic.gdx.scenes.scene2d.Actor coach -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void reset() -> A
    void animate() -> B
com.mazalearn.scienceengine.core.view.Scoreboard -> com.mazalearn.scienceengine.c.d.ac:
    com.badlogic.gdx.scenes.scene2d.ui.Label scoreLabel -> a
    com.mazalearn.scienceengine.app.services.Profile profile -> b
    void act(float) -> a
com.mazalearn.scienceengine.core.view.SizeAction -> com.mazalearn.scienceengine.c.d.ad:
    void update(float) -> b
    com.mazalearn.scienceengine.core.view.SizeAction sizeTo(float,float,float) -> a
com.mazalearn.scienceengine.core.view.Snapshotter -> com.mazalearn.scienceengine.c.d.ae:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.core.view.ViewControls -> com.mazalearn.scienceengine.c.d.af:
    com.mazalearn.scienceengine.app.services.IMessage messages -> a
    boolean isActivated -> d
    com.badlogic.gdx.scenes.scene2d.ui.Table viewControlPanel -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> c
    void syncWithModel() -> i_
    void enableControls(boolean) -> c
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> a
    boolean isActivated() -> j_
    void setActivated(boolean) -> d
com.mazalearn.scienceengine.core.view.ViewControls$1 -> com.mazalearn.scienceengine.c.d.ag:
    com.mazalearn.scienceengine.core.view.ViewControls this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.core.view.ViewControls$2 -> com.mazalearn.scienceengine.c.d.ah:
    com.mazalearn.scienceengine.core.view.ViewControls this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.designer.ActorPropertyPanel -> com.mazalearn.scienceengine.d.a:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextField widthField -> c
    com.badlogic.gdx.scenes.scene2d.ui.TextField heightField -> d
    com.badlogic.gdx.scenes.scene2d.ui.TextField xField -> e
    com.badlogic.gdx.scenes.scene2d.ui.TextField yField -> f
    com.badlogic.gdx.scenes.scene2d.ui.TextField rotationField -> g
    com.badlogic.gdx.scenes.scene2d.ui.TextField originXField -> h
    com.badlogic.gdx.scenes.scene2d.ui.TextField originYField -> i
    com.badlogic.gdx.scenes.scene2d.ui.Label nameLabel -> j
    com.badlogic.gdx.scenes.scene2d.ui.TextField allowMoveField -> k
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox dynamicBodyField -> l
    com.badlogic.gdx.scenes.scene2d.ui.TextField addLabeledProperty(java.lang.String) -> c
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> g
    void showActorProperties(com.badlogic.gdx.scenes.scene2d.Actor) -> h
com.mazalearn.scienceengine.designer.LevelEditor -> com.mazalearn.scienceengine.d.b:
    com.mazalearn.scienceengine.app.screens.AbstractScreen screen -> a
    com.badlogic.gdx.graphics.OrthographicCamera orthographicCamera -> b
    com.mazalearn.scienceengine.designer.LevelEditor$Operation operation -> c
    com.mazalearn.scienceengine.designer.LevelEditor$Mode mode -> d
    com.badlogic.gdx.graphics.Color fontColor -> e
    com.badlogic.gdx.scenes.scene2d.Actor selectedActor -> f
    com.badlogic.gdx.math.Vector2 lastTouch -> g
    com.badlogic.gdx.scenes.scene2d.Stage originalStage -> h
    com.badlogic.gdx.math.Vector3 originalCameraPos -> i
    float originalCameraZoom -> j
    com.badlogic.gdx.scenes.scene2d.ui.Table layout -> k
    com.mazalearn.scienceengine.core.model.IScience2DModel science2DModel -> l
    com.mazalearn.scienceengine.core.view.ModelControls modelControls -> m
    com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer -> n
    com.badlogic.gdx.math.Vector2 stagePoint -> o
    com.badlogic.gdx.math.Vector2 point -> p
    com.badlogic.gdx.math.Vector2 rotatedVector -> q
    com.mazalearn.scienceengine.designer.ActorPropertyPanel actorPropertyPanel -> r
    com.badlogic.gdx.scenes.scene2d.ui.Table configTable -> s
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> t
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$designer$LevelEditor$Mode -> u
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$designer$LevelEditor$Operation -> v
    void refreshConfigsTable(com.mazalearn.scienceengine.core.model.IScience2DModel,com.badlogic.gdx.scenes.scene2d.ui.Skin,com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    void draw() -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean keyDown(int) -> a
    void restoreCamera() -> k
    com.badlogic.gdx.math.Vector2 screenToWorld(int,int) -> a
    com.mazalearn.scienceengine.core.controller.IScience2DController access$0(com.mazalearn.scienceengine.designer.LevelEditor) -> a
    void access$1(com.mazalearn.scienceengine.designer.LevelEditor) -> b
    void access$2(com.mazalearn.scienceengine.designer.LevelEditor) -> c
    void access$3(com.mazalearn.scienceengine.designer.LevelEditor,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.mazalearn.scienceengine.designer.ActorPropertyPanel access$4(com.mazalearn.scienceengine.designer.LevelEditor) -> d
    com.badlogic.gdx.scenes.scene2d.Actor access$5(com.mazalearn.scienceengine.designer.LevelEditor) -> e
    com.mazalearn.scienceengine.core.model.IScience2DModel access$6(com.mazalearn.scienceengine.designer.LevelEditor) -> f
    void access$7(com.mazalearn.scienceengine.designer.LevelEditor,com.mazalearn.scienceengine.core.model.IScience2DModel,com.badlogic.gdx.scenes.scene2d.ui.Skin,com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    com.mazalearn.scienceengine.core.view.ModelControls access$8(com.mazalearn.scienceengine.designer.LevelEditor) -> g
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$designer$LevelEditor$Mode() -> l
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$designer$LevelEditor$Operation() -> m
com.mazalearn.scienceengine.designer.LevelEditor$1 -> com.mazalearn.scienceengine.d.c:
    com.mazalearn.scienceengine.designer.LevelEditor this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.designer.LevelEditor$2 -> com.mazalearn.scienceengine.d.d:
    com.mazalearn.scienceengine.designer.LevelEditor this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.designer.LevelEditor$3 -> com.mazalearn.scienceengine.d.e:
    com.mazalearn.scienceengine.designer.LevelEditor this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.designer.LevelEditor$4 -> com.mazalearn.scienceengine.d.f:
    com.mazalearn.scienceengine.designer.LevelEditor this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.designer.LevelEditor$5 -> com.mazalearn.scienceengine.d.g:
    com.mazalearn.scienceengine.designer.LevelEditor this$0 -> a
    com.badlogic.gdx.scenes.scene2d.Stage val$stage -> b
    com.badlogic.gdx.scenes.scene2d.Actor val$actor -> c
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox val$componentCheckbox -> d
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> e
    com.badlogic.gdx.scenes.scene2d.ui.Table val$configTable -> f
    void doCommand() -> f
com.mazalearn.scienceengine.designer.LevelEditor$6 -> com.mazalearn.scienceengine.d.h:
    com.mazalearn.scienceengine.designer.LevelEditor this$0 -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig val$config -> b
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox val$configCheckbox -> c
    void doCommand() -> f
com.mazalearn.scienceengine.designer.LevelEditor$Mode -> com.mazalearn.scienceengine.d.i:
    com.mazalearn.scienceengine.designer.LevelEditor$Mode CONFIGURE -> a
    com.mazalearn.scienceengine.designer.LevelEditor$Mode OVERLAY -> b
    com.mazalearn.scienceengine.designer.LevelEditor$Mode[] ENUM$VALUES -> c
    com.mazalearn.scienceengine.designer.LevelEditor$Mode[] values() -> values
    com.mazalearn.scienceengine.designer.LevelEditor$Mode valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.designer.LevelEditor$Operation -> com.mazalearn.scienceengine.d.j:
    com.mazalearn.scienceengine.designer.LevelEditor$Operation MOVE -> a
    com.mazalearn.scienceengine.designer.LevelEditor$Operation ROTATE -> b
    com.mazalearn.scienceengine.designer.LevelEditor$Operation RESIZE -> c
    com.mazalearn.scienceengine.designer.LevelEditor$Operation[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.designer.LevelEditor$Operation[] values() -> values
    com.mazalearn.scienceengine.designer.LevelEditor$Operation valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.designer.LevelSaver -> com.mazalearn.scienceengine.d.k:
    com.mazalearn.scienceengine.Topic level -> a
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> b
    com.mazalearn.scienceengine.core.view.IScience2DView science2DView -> c
    com.mazalearn.scienceengine.core.model.IScience2DModel science2DModel -> d
    void save() -> a
    void writeConfigs(com.badlogic.gdx.utils.JsonWriter) -> a
    void writeGroups(com.badlogic.gdx.utils.JsonWriter) -> b
    void writeCircuits(com.badlogic.gdx.utils.JsonWriter) -> c
    void writeComponents(com.badlogic.gdx.utils.JsonWriter) -> d
com.mazalearn.scienceengine.designer.PngWriter -> com.mazalearn.scienceengine.d.l:
    byte[] HEADER -> a
    byte[] IDAT -> b
    byte[] IEND -> c
    byte[] IHDR -> d
    byte[] generateImage(com.badlogic.gdx.graphics.Pixmap) -> a
    byte[] stringToBytes(java.lang.String) -> a
    void writeUnsignedInt(java.io.OutputStream,long) -> a
com.mazalearn.scienceengine.domains.electromagnetism.ElectroMagnetismController -> com.mazalearn.scienceengine.e.a.a:
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$ComponentType -> f
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$tutor$TutorType -> g
    com.badlogic.gdx.scenes.scene2d.Actor createActor(java.lang.String,java.lang.String,com.mazalearn.scienceengine.core.model.Science2DBody) -> a
    com.mazalearn.scienceengine.tutor.AbstractTutor createTutor(com.mazalearn.scienceengine.tutor.ITutor,java.lang.String,com.mazalearn.scienceengine.Topic,java.lang.String,java.lang.String,com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Array,java.lang.String[],java.lang.String[],java.lang.String[]) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$ComponentType() -> j
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$tutor$TutorType() -> k
com.mazalearn.scienceengine.domains.electromagnetism.ElectroMagnetismModel -> com.mazalearn.scienceengine.e.a.b:
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$ComponentType -> h
    com.mazalearn.scienceengine.core.model.Science2DBody createScience2DBody(java.lang.String,float,float,float) -> b
    void singleStep() -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$ComponentType() -> l
com.mazalearn.scienceengine.domains.electromagnetism.ElectroMagnetismView -> com.mazalearn.scienceengine.e.a.c:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo dynamo -> d
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet magnet -> e
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb lightbulb -> f
    void act(float) -> a
    void prepareView() -> p
    void initializeCommands(java.util.List) -> a
    void access$0(com.mazalearn.scienceengine.domains.electromagnetism.ElectroMagnetismView) -> a
com.mazalearn.scienceengine.domains.electromagnetism.ElectroMagnetismView$1 -> com.mazalearn.scienceengine.e.a.d:
    com.mazalearn.scienceengine.domains.electromagnetism.ElectroMagnetismView this$0 -> b
    void doCommand() -> n
    boolean isPossible() -> h
com.mazalearn.scienceengine.domains.electromagnetism.model.AbstractMagnet -> com.mazalearn.scienceengine.e.a.a.a:
    float width -> a
    float height -> f
    float strength -> g
    com.badlogic.gdx.math.Vector2 bField -> h
    void setStrength(float) -> e
    void setAngle(float) -> f
    float getStrength() -> u
    com.badlogic.gdx.math.Vector3 getBField(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector2 getBFieldRelative(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> b
    void setSize(float,float) -> a
    float getWidth() -> v
    float getHeight() -> w
com.mazalearn.scienceengine.domains.electromagnetism.model.Ammeter -> com.mazalearn.scienceengine.e.a.a.b:
    float maxCurrent -> a
    com.badlogic.gdx.math.Vector2 firstTerminal -> f
    com.badlogic.gdx.math.Vector2 secondTerminal -> g
    float needleAngle -> h
    float minNeedleAngle -> i
    float maxNeedleAngle -> j
    float current -> k
    void initializeConfigs() -> a
    void reset() -> l_
    float getMinNeedleAngle() -> u
    float getMaxNeedleAngle() -> v
    float getNeedleAngle() -> w
    void singleStep(float) -> b
    com.badlogic.gdx.math.Vector2 getT1Position() -> c
    com.badlogic.gdx.math.Vector2 getT2Position() -> d
    void setCurrent(float) -> a
    float getMaxCurrent() -> x
    void setMaxCurrent(float) -> e
com.mazalearn.scienceengine.domains.electromagnetism.model.Ammeter$1 -> com.mazalearn.scienceengine.e.a.a.c:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Ammeter this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet -> com.mazalearn.scienceengine.e.a.a.d:
    com.mazalearn.scienceengine.app.utils.Dimension INTERNAL_GRID_SIZE -> f
    com.mazalearn.scienceengine.app.utils.Dimension EXTERNAL_NEAR_GRID_SIZE -> g
    com.mazalearn.scienceengine.app.utils.Dimension EXTERNAL_FAR_GRID_SIZE -> h
    com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$Grid internalGrid -> i
    com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$Grid externalNearGrid -> j
    com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$Grid externalFarGrid -> k
    boolean $assertionsDisabled -> a
    void initializeConfigs() -> a
    com.badlogic.gdx.math.Vector2 getBFieldRelative(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$Grid chooseGrid(double,double) -> a
    double interpolate(double,double,double,double,float[][],double) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$1 -> com.mazalearn.scienceengine.e.a.a.e:
    com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$2 -> com.mazalearn.scienceengine.e.a.a.f:
    com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$3 -> com.mazalearn.scienceengine.e.a.a.g:
    com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$Grid -> com.mazalearn.scienceengine.e.a.a.h:
    float[][] bxArray -> a
    float[][] byArray -> b
    com.mazalearn.scienceengine.app.utils.Dimension size -> c
    float spacing -> d
    float getSpacing() -> a
    float[][] getBxArray() -> b
    float[][] getByArray() -> c
    boolean contains(double,double) -> a
    double getMaxX() -> d
    double getMaxY() -> e
    float[][] readComponent(java.lang.String,com.mazalearn.scienceengine.app.utils.Dimension) -> a
    double access$0(com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$Grid) -> a
    double access$1(com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet$Grid) -> b
com.mazalearn.scienceengine.domains.electromagnetism.model.Charge -> com.mazalearn.scienceengine.e.a.a.i:
    com.badlogic.gdx.math.Vector3 fieldVector -> a
    com.badlogic.gdx.math.Vector3 velocity -> f
    com.badlogic.gdx.math.Vector2 force -> g
    float charge -> h
    float velocityMagnitude -> i
    void initializeConfigs() -> a
    float getStrength() -> u
    void setStrength(float) -> a
    void reset() -> l_
    void setLinearVelocity(com.badlogic.gdx.math.Vector2) -> a
    void singleStep(float) -> b
    void setBField(com.badlogic.gdx.math.Vector3) -> a
    void notifyFieldChange() -> d
    com.badlogic.gdx.math.Vector2 access$0(com.mazalearn.scienceengine.domains.electromagnetism.model.Charge) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Charge$1 -> com.mazalearn.scienceengine.e.a.a.j:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Charge this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Charge$2 -> com.mazalearn.scienceengine.e.a.a.k:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Charge this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Clamp -> com.mazalearn.scienceengine.e.a.a.l:
    float clamp(float,float,float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Compass -> com.mazalearn.scienceengine.e.a.a.m:
    com.badlogic.gdx.math.Vector2 fieldVector -> a
    com.badlogic.gdx.math.Vector3 bField -> f
    void singleStep(float) -> b
com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType -> com.mazalearn.scienceengine.e.a.a.n:
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType BarMagnet -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType CurrentSource -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType Compass -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType ElectroMagnet -> d
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType Lightbulb -> e
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType FieldMeter -> f
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType PickupCoil -> g
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType Wire -> h
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType Ammeter -> i
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType HorseshoeMagnet -> j
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType CurrentCoil -> k
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType Dynamo -> l
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType Magnet -> m
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType Monopole -> n
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType MagneticField -> o
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType Charge -> p
    java.lang.String textureName -> q
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType[] ENUM$VALUES -> r
    java.lang.String getTextureName() -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.ComponentType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil -> com.mazalearn.scienceengine.e.a.a.o:
    float width -> a
    float height -> f
    float current -> g
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType commutatorType -> h
    com.badlogic.gdx.math.Vector2 forceVector -> i
    com.badlogic.gdx.math.Vector2 pos -> j
    com.badlogic.gdx.math.Vector3 bField -> k
    com.badlogic.gdx.math.Vector2 firstTerminal -> l
    com.badlogic.gdx.math.Vector2 secondTerminal -> m
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$RotationDataType rotationDataType -> n
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$CurrentCoil$CommutatorType -> o
    void initializeConfigs() -> a
    java.lang.Float getRotationData() -> u
    void setCurrent(float) -> a
    float getCurrent() -> v
    void singleStep(float) -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType getCommutatorType() -> w
    com.badlogic.gdx.math.Vector2 getT1Position() -> c
    com.badlogic.gdx.math.Vector2 getT2Position() -> d
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType access$0(com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil) -> a
    void access$1(com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil,com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType) -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$RotationDataType access$2(com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil) -> b
    void access$3(com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil,com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$RotationDataType) -> a
    void access$4$4804a8e7(com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil) -> c
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$CurrentCoil$CommutatorType() -> x
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$1 -> com.mazalearn.scienceengine.e.a.a.p:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$2 -> com.mazalearn.scienceengine.e.a.a.q:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$3 -> com.mazalearn.scienceengine.e.a.a.r:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil this$0 -> b
    boolean isMeter() -> a
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType -> com.mazalearn.scienceengine.e.a.a.s:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType Connector -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType Commutator -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType Disconnected -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$CommutatorType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$RotationDataType -> com.mazalearn.scienceengine.e.a.a.t:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$RotationDataType AngularVelocity -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$RotationDataType NumRevolutions -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$RotationDataType[] ENUM$VALUES -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$RotationDataType[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil$RotationDataType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource -> com.mazalearn.scienceengine.e.a.a.u:
    float frequency -> f
    float acAngle -> g
    float deltaAngle -> h
    float maxCurrent -> i
    float current -> j
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$CurrentType currentType -> k
    boolean isNegativeCurrent -> l
    com.badlogic.gdx.math.Vector2 firstTerminal -> m
    com.badlogic.gdx.math.Vector2 secondTerminal -> n
    boolean $assertionsDisabled -> a
    void initializeConfigs() -> a
    void setCurrentType(java.lang.String) -> a
    java.lang.String getCurrentType() -> u
    void setFrequency(float) -> a
    float getFrequency() -> v
    void singleStep(float) -> b
    float getCurrent() -> b
    void setCurrent(float) -> f
    void setMaxCurrent(float) -> e
    float getMaxCurrent() -> w
    void setNegativeCurrent(boolean) -> b
    com.badlogic.gdx.math.Vector2 getT1Position() -> c
    com.badlogic.gdx.math.Vector2 getT2Position() -> d
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$CurrentType access$0(com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource) -> a
    void access$1(com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource,float) -> a
    boolean access$2(com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource) -> b
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$1 -> com.mazalearn.scienceengine.e.a.a.v:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource this$0 -> b
    boolean isPossible() -> h
    boolean hasProbeMode() -> j
    void setProbeMode() -> k
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$2 -> com.mazalearn.scienceengine.e.a.a.w:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$3 -> com.mazalearn.scienceengine.e.a.a.x:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$4 -> com.mazalearn.scienceengine.e.a.a.y:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource this$0 -> b
    boolean isMeter() -> a
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$5 -> com.mazalearn.scienceengine.e.a.a.z:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$CurrentType -> com.mazalearn.scienceengine.e.a.a.aa:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$CurrentType AC -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$CurrentType DC -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$CurrentType[] ENUM$VALUES -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$CurrentType[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource$CurrentType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo -> com.mazalearn.scienceengine.e.a.a.ab:
    float width -> a
    float height -> f
    float current -> g
    com.badlogic.gdx.math.Vector2 firstTerminal -> h
    com.badlogic.gdx.math.Vector2 secondTerminal -> i
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$AreaOrientation areaOrientation -> j
    int numberOfLoops -> k
    float minWidth -> l
    float maxCurrent -> m
    void initializeConfigs() -> a
    void setMagnetFlux(float) -> a
    float getCurrent() -> b
    float getMaxCurrent() -> u
    float getWidth() -> v
    void setWidth(float) -> e
    void setHeight(float) -> f
    float getHeight() -> w
    void setNumberOfLoops(float) -> g
    float getNumberOfLoops() -> x
    com.badlogic.gdx.math.Vector2 getT2Position() -> d
    com.badlogic.gdx.math.Vector2 getT1Position() -> c
    java.lang.String getAreaOrientation() -> y
    void setAreaOrientation(java.lang.String) -> a
    void setMinWidth(float) -> h
com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$1 -> com.mazalearn.scienceengine.e.a.a.ac:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$2 -> com.mazalearn.scienceengine.e.a.a.ad:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$3 -> com.mazalearn.scienceengine.e.a.a.ae:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$AreaOrientation -> com.mazalearn.scienceengine.e.a.a.af:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$AreaOrientation ParallelToRotation -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$AreaOrientation PerpendicularToRotation -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$AreaOrientation[] ENUM$VALUES -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$AreaOrientation[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo$AreaOrientation valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.model.ElectroMagnet -> com.mazalearn.scienceengine.e.a.a.ag:
    float maxStrengthOutside -> a
    float current -> f
    int numberOfLoops -> g
    com.badlogic.gdx.math.Vector2 firstTerminal -> h
    com.badlogic.gdx.math.Vector2 secondTerminal -> i
    float radius -> j
    void initializeConfigs() -> a
    void setRadius(java.lang.Float) -> a
    java.lang.Float getRadius() -> x
    void setCurrent(float) -> a
    void updateStrength() -> A
    com.badlogic.gdx.math.Vector2 getBFieldRelative(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> b
    float getNumberOfLoops() -> y
    void setNumberOfLoops(float) -> g
    com.badlogic.gdx.math.Vector2 getT1Position() -> c
    com.badlogic.gdx.math.Vector2 getT2Position() -> d
    float getCurrent() -> z
com.mazalearn.scienceengine.domains.electromagnetism.model.ElectroMagnet$1 -> com.mazalearn.scienceengine.e.a.a.ah:
    com.mazalearn.scienceengine.domains.electromagnetism.model.ElectroMagnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.ElectroMagnet$2 -> com.mazalearn.scienceengine.e.a.a.ai:
    com.mazalearn.scienceengine.domains.electromagnetism.model.ElectroMagnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter -> com.mazalearn.scienceengine.e.a.a.aj:
    com.badlogic.gdx.math.Vector3 fieldVector -> a
    com.badlogic.gdx.math.Vector2 samplePoint -> f
    com.badlogic.gdx.math.Vector2 bField -> g
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$SampleMode sampleMode -> h
    java.util.List fieldSamples -> i
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$FieldMeter$SampleMode -> j
    void initializeConfigs() -> a
    void setPositionAndAngle(com.badlogic.gdx.math.Vector2,float) -> a
    void reset() -> l_
    void addFieldSample(float,float,com.badlogic.gdx.math.Vector3) -> a
    java.util.List getFieldSamples() -> u
    void setBField(com.badlogic.gdx.math.Vector3) -> a
    boolean allowsConfiguration() -> e
    void notifyFieldChange() -> d
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$SampleMode getSampleMode() -> v
    java.util.List access$0(com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter) -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$SampleMode access$1(com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter) -> b
    void access$2(com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter,java.lang.String) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$FieldMeter$SampleMode() -> w
com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$1 -> com.mazalearn.scienceengine.e.a.a.ak:
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter this$0 -> b
    boolean isMeter() -> a
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$2 -> com.mazalearn.scienceengine.e.a.a.al:
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$FieldSample -> com.mazalearn.scienceengine.e.a.a.am:
    float x -> a
    float y -> b
    float magnitude -> c
    float theta -> d
    float phi -> e
    void rectangular2spherical(com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$FieldSample,com.badlogic.gdx.math.Vector3) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$SampleMode -> com.mazalearn.scienceengine.e.a.a.an:
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$SampleMode User -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$SampleMode Uniform -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$SampleMode[] ENUM$VALUES -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$SampleMode[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter$SampleMode valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.model.HorseshoeMagnet -> com.mazalearn.scienceengine.e.a.a.ao:
    com.badlogic.gdx.math.Vector2 getBFieldRelative(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> b
    void initializeConfigs() -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.HorseshoeMagnet$1 -> com.mazalearn.scienceengine.e.a.a.ap:
    com.mazalearn.scienceengine.domains.electromagnetism.model.HorseshoeMagnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.HorseshoeMagnet$2 -> com.mazalearn.scienceengine.e.a.a.aq:
    com.mazalearn.scienceengine.domains.electromagnetism.model.HorseshoeMagnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb -> com.mazalearn.scienceengine.e.a.a.ar:
    float previousCurrent -> f
    float current -> g
    float intensity -> h
    com.badlogic.gdx.math.Vector2 firstTerminal -> i
    com.badlogic.gdx.math.Vector2 secondTerminal -> j
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor bulbColor -> a
    void initializeConfigs() -> a
    com.badlogic.gdx.graphics.Color getColor() -> u
    float getIntensity() -> v
    void setCurrent(float) -> a
    com.badlogic.gdx.math.Vector2 getT2Position() -> d
    com.badlogic.gdx.math.Vector2 getT1Position() -> c
com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$1 -> com.mazalearn.scienceengine.e.a.a.as:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor -> com.mazalearn.scienceengine.e.a.a.at:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor Yellow -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor Red -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor Blue -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor Green -> d
    com.badlogic.gdx.graphics.Color color -> e
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor[] ENUM$VALUES -> f
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor valueOf(java.lang.String) -> valueOf
    com.badlogic.gdx.graphics.Color access$2(com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb$BulbColor) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet -> com.mazalearn.scienceengine.e.a.a.au:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType magnetType -> f
    float maxWidth -> g
    com.mazalearn.scienceengine.core.controller.AbstractModelConfig strengthConfig -> h
    float maxHeight -> i
    boolean $assertionsDisabled -> a
    void initializeConfigs() -> a
    void reset() -> l_
    void setStrength(float) -> e
    void setMaxWidth(float) -> a
    java.lang.String getMagnetType() -> d
    void setMagnetType(java.lang.String) -> a
    com.badlogic.gdx.math.Vector2 getBFieldRelative(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType access$0(com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$1 -> com.mazalearn.scienceengine.e.a.a.av:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$2 -> com.mazalearn.scienceengine.e.a.a.aw:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$3 -> com.mazalearn.scienceengine.e.a.a.ax:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType -> com.mazalearn.scienceengine.e.a.a.ay:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType Ferrite -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType Smco -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType Neodymium -> c
    float costPerLb -> d
    float bhMax -> e
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType[] ENUM$VALUES -> f
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType valueOf(java.lang.String) -> valueOf
    float access$2(com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType) -> a
    float access$3(com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet$MagnetType,float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField -> com.mazalearn.scienceengine.e.a.a.az:
    com.badlogic.gdx.math.Vector3 field3 -> a
    com.badlogic.gdx.math.Vector2 field2 -> f
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$Phi phi -> g
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$MagneticField$Phi -> h
    void initializeConfigs() -> a
    float getAngle() -> o
    com.badlogic.gdx.math.Vector3 getBField(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector3) -> a
    void setTheta(java.lang.Float) -> a
    float getTheta() -> d
    void setPhi(java.lang.String) -> a
    java.lang.String getPhi() -> u
    com.badlogic.gdx.math.Vector3 access$0(com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField) -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$Phi access$1(com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField) -> b
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$MagneticField$Phi() -> v
com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$1 -> com.mazalearn.scienceengine.e.a.a.ba:
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$2 -> com.mazalearn.scienceengine.e.a.a.bb:
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$3 -> com.mazalearn.scienceengine.e.a.a.bc:
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$Phi -> com.mazalearn.scienceengine.e.a.a.bd:
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$Phi XYPlane -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$Phi Up -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$Phi Down -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$Phi[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$Phi[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.MagneticField$Phi valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole -> com.mazalearn.scienceengine.e.a.a.be:
    com.badlogic.gdx.math.Vector3 fieldVector -> a
    com.badlogic.gdx.math.Vector2 force -> f
    float strength -> g
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType monopoleType -> h
    void initializeConfigs() -> a
    float getStrength() -> u
    void setStrength(float) -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType getPoleType() -> v
    void reset() -> l_
    void singleStep(float) -> b
    void setBField(com.badlogic.gdx.math.Vector3) -> a
    void notifyFieldChange() -> d
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType access$0(com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole) -> a
    void access$1(com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole,com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$1 -> com.mazalearn.scienceengine.e.a.a.bf:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$2 -> com.mazalearn.scienceengine.e.a.a.bg:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType -> com.mazalearn.scienceengine.e.a.a.bh:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType NorthPole -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType SouthPole -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType[] ENUM$VALUES -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole$MonopoleType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter -> com.mazalearn.scienceengine.e.a.a.bi:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter CurrentType -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter CurrentFrequency -> b
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter MaxCurrent -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter CurrentDirection -> d
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter MagnetStrength -> e
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter MovementMode -> f
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter CommutatorType -> g
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter CoilLoops -> h
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter Flip -> i
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter RotationDataType -> j
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter RotationData -> k
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter Count -> l
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter Current -> m
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter RotationVelocity -> n
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter MagnetType -> o
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter Cost -> p
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter AreaOrientation -> q
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter Width -> r
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter Color -> s
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter MonopoleType -> t
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter FieldStrength -> u
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter FieldAngle -> v
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter FieldUpDown -> w
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter ChargeStrength -> x
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter SampleMode -> y
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter Velocity -> z
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter Radius -> A
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter[] ENUM$VALUES -> B
    java.lang.String toString() -> toString
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.model.Parameter valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.model.PickupCoil -> com.mazalearn.scienceengine.e.a.a.bj:
    float averageBx -> f
    float flux -> g
    float emf -> h
    float biggestAbsEmf -> i
    com.badlogic.gdx.math.Vector2[] samplePoints -> j
    float calibrationEmf -> k
    com.badlogic.gdx.math.Vector3 sampleBField -> l
    int numberOfLoops -> m
    float wireWidth -> n
    float current -> o
    float radius -> p
    com.badlogic.gdx.math.Vector2 firstTerminal -> q
    com.badlogic.gdx.math.Vector2 secondTerminal -> r
    boolean $assertionsDisabled -> a
    void initializeConfigs() -> a
    void singleStep(float) -> b
    void setNumberOfLoops(float) -> a
    float getNumberOfLoops() -> u
    void setCurrent(float) -> e
    float getCurrent() -> b
    com.badlogic.gdx.math.Vector2 getT1Position() -> c
    com.badlogic.gdx.math.Vector2 getT2Position() -> d
    void access$0(com.mazalearn.scienceengine.domains.electromagnetism.model.PickupCoil,float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.PickupCoil$1 -> com.mazalearn.scienceengine.e.a.a.bk:
    com.mazalearn.scienceengine.domains.electromagnetism.model.PickupCoil this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.PickupCoil$2 -> com.mazalearn.scienceengine.e.a.a.bl:
    com.mazalearn.scienceengine.domains.electromagnetism.model.PickupCoil this$0 -> b
    boolean isMeter() -> a
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.electromagnetism.model.Wire -> com.mazalearn.scienceengine.e.a.a.bm:
    float radius -> a
    float current -> f
    com.badlogic.gdx.math.Vector2 forceVector -> g
    com.badlogic.gdx.math.Vector3 bField -> h
    com.badlogic.gdx.math.Vector2 firstTerminal -> i
    com.badlogic.gdx.math.Vector2 secondTerminal -> j
    void setCurrent(float) -> a
    float getCurrent() -> u
    com.badlogic.gdx.math.Vector3 getBField(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector3) -> a
    void singleStep(float) -> b
    com.badlogic.gdx.math.Vector2 getT1Position() -> c
    com.badlogic.gdx.math.Vector2 getT2Position() -> d
com.mazalearn.scienceengine.domains.electromagnetism.tutor.AbstractFieldProber -> com.mazalearn.scienceengine.e.a.b.a:
    com.badlogic.gdx.math.Vector2 modelPos -> k
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter fieldMeter -> a
    com.mazalearn.scienceengine.core.view.Science2DActor fieldMeterActor -> b
    int netSuccesses -> l
    void createFieldMeterSamples(com.badlogic.gdx.math.Vector2[],com.badlogic.gdx.math.Vector3[]) -> a
    void getBField(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector3) -> a
    void systemReadyToFinish(boolean) -> c
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldDirectionProber -> com.mazalearn.scienceengine.e.a.b.b:
    com.badlogic.gdx.scenes.scene2d.ui.Image image -> k
    com.badlogic.gdx.scenes.scene2d.ui.Image userField -> l
    com.badlogic.gdx.math.Vector2[] points -> m
    com.badlogic.gdx.math.Vector2 bField2 -> n
    com.badlogic.gdx.math.Vector3[] bFields -> o
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void teach() -> A
    com.badlogic.gdx.scenes.scene2d.ui.Image access$0(com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldDirectionProber) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image access$1(com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldDirectionProber) -> b
    com.badlogic.gdx.math.Vector2 access$2(com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldDirectionProber) -> c
    com.badlogic.gdx.math.Vector3[] access$3(com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldDirectionProber) -> d
com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldDirectionProber$1 -> com.mazalearn.scienceengine.e.a.b.c:
    com.badlogic.gdx.math.Vector2 lastTouch -> a
    com.badlogic.gdx.math.Vector2 currentTouch -> b
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldDirectionProber this$0 -> c
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldDirectionProber$1$1 -> com.mazalearn.scienceengine.e.a.b.d:
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldDirectionProber$1 this$1 -> b
    boolean val$success -> c
    boolean act(float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldMagnitudeProber -> com.mazalearn.scienceengine.e.a.b.e:
    com.badlogic.gdx.scenes.scene2d.ui.Image imageCorrect -> k
    com.badlogic.gdx.scenes.scene2d.ui.Image imageWrong -> l
    com.badlogic.gdx.math.Vector2[] points -> m
    com.badlogic.gdx.math.Vector3[] bFields -> n
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void teach() -> A
    com.badlogic.gdx.scenes.scene2d.ui.Image access$0(com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldMagnitudeProber) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image access$1(com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldMagnitudeProber) -> b
com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldMagnitudeProber$ClickResult -> com.mazalearn.scienceengine.e.a.b.f:
    boolean success -> b
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldMagnitudeProber this$0 -> a
    void doCommand() -> f
    boolean access$0(com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldMagnitudeProber$ClickResult) -> a
com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldMagnitudeProber$ClickResult$1 -> com.mazalearn.scienceengine.e.a.b.g:
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.FieldMagnitudeProber$ClickResult this$1 -> b
    boolean act(float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.tutor.LightProber -> com.mazalearn.scienceengine.e.a.b.h:
    com.badlogic.gdx.math.Vector2[] points -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image image -> b
    com.mazalearn.scienceengine.domains.electromagnetism.view.LightbulbActor lightbulbActor -> k
    void act(float) -> a
    void teach() -> A
com.mazalearn.scienceengine.domains.electromagnetism.tutor.TutorType -> com.mazalearn.scienceengine.e.a.b.i:
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.TutorType FieldMagnitudeProber -> a
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.TutorType FieldDirectionProber -> b
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.TutorType LightProber -> c
    com.badlogic.gdx.graphics.Color color -> d
    int successPoints -> e
    int failurePoints -> f
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.TutorType[] ENUM$VALUES -> g
    com.badlogic.gdx.graphics.Color getColor() -> a
    int getSuccessPoints() -> b
    int getFailurePoints() -> c
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.TutorType[] values() -> values
    com.mazalearn.scienceengine.domains.electromagnetism.tutor.TutorType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.electromagnetism.view.AmmeterActor -> com.mazalearn.scienceengine.e.a.c.a:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Ammeter ammeter -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer -> c
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.view.BarMagnetActor -> com.mazalearn.scienceengine.e.a.c.b:
    com.mazalearn.scienceengine.domains.electromagnetism.model.BarMagnet barMagnet -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> c
    com.badlogic.gdx.math.Vector2 newPos -> d
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.view.ChargeActor -> com.mazalearn.scienceengine.e.a.c.c:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Charge charge -> d
    com.badlogic.gdx.math.Vector2 lastTouch -> a
    com.badlogic.gdx.math.Vector2 currentTouch -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion textureNegative -> e
    com.badlogic.gdx.graphics.g2d.TextureRegion texturePositive -> f
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.Charge access$0(com.mazalearn.scienceengine.domains.electromagnetism.view.ChargeActor) -> a
com.mazalearn.scienceengine.domains.electromagnetism.view.ChargeActor$1 -> com.mazalearn.scienceengine.e.a.c.d:
    com.mazalearn.scienceengine.domains.electromagnetism.view.ChargeActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
com.mazalearn.scienceengine.domains.electromagnetism.view.CircuitActor -> com.mazalearn.scienceengine.e.a.c.e:
    java.util.List circuit -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer -> b
    com.badlogic.gdx.math.Vector2 delta -> c
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void drawConnection(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.mazalearn.scienceengine.domains.electromagnetism.view.CurrentCoilActor -> com.mazalearn.scienceengine.e.a.c.f:
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentCoil currentCoil -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion commutatorNone -> d
    com.badlogic.gdx.graphics.g2d.TextureRegion commutatorAc -> e
    com.badlogic.gdx.graphics.g2d.TextureRegion commutatorDc -> f
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> g
    com.badlogic.gdx.math.Vector2 newPos -> h
    int[] rotationAngles -> i
    com.badlogic.gdx.graphics.g2d.TextureRegion[] rotationFrames -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$CurrentCoil$CommutatorType -> j
    int getRotationForceScaler() -> C
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$CurrentCoil$CommutatorType() -> v
com.mazalearn.scienceengine.domains.electromagnetism.view.CurrentSourceActor -> com.mazalearn.scienceengine.e.a.c.g:
    com.badlogic.gdx.graphics.g2d.TextureRegion current -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.CurrentSource currentSource -> c
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void drawCurrent(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.view.DynamoActor -> com.mazalearn.scienceengine.e.a.c.h:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Dynamo dynamo -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion[] rotationFrames -> a
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.view.ElectromagnetActor -> com.mazalearn.scienceengine.e.a.c.i:
    com.badlogic.gdx.graphics.g2d.TextureRegion coil -> a
    float COIL_WIDTH -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.ElectroMagnet electromagnet -> d
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    float getWidth() -> j
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void showHelp(com.badlogic.gdx.scenes.scene2d.Stage,boolean) -> a
com.mazalearn.scienceengine.domains.electromagnetism.view.FieldMeterActor -> com.mazalearn.scienceengine.e.a.c.j:
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter fieldMeter -> a
    com.badlogic.gdx.math.Vector2 pos -> c
    com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer -> d
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void showHelp(com.badlogic.gdx.scenes.scene2d.Stage,boolean) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.mazalearn.scienceengine.domains.electromagnetism.model.FieldMeter access$0(com.mazalearn.scienceengine.domains.electromagnetism.view.FieldMeterActor) -> a
    com.badlogic.gdx.math.Vector2 access$1(com.mazalearn.scienceengine.domains.electromagnetism.view.FieldMeterActor) -> b
com.mazalearn.scienceengine.domains.electromagnetism.view.FieldMeterActor$1 -> com.mazalearn.scienceengine.e.a.c.k:
    com.mazalearn.scienceengine.domains.electromagnetism.view.FieldMeterActor this$0 -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
com.mazalearn.scienceengine.domains.electromagnetism.view.LightbulbActor -> com.mazalearn.scienceengine.e.a.c.l:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Lightbulb lightbulb -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion LIGHT_TEXTURE -> c
    float lightRadius -> d
    com.badlogic.gdx.math.Vector2 point -> e
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void drawLight(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,com.badlogic.gdx.graphics.Color,float,float) -> a
    boolean withinLightRegion(float,float) -> f
com.mazalearn.scienceengine.domains.electromagnetism.view.MagnetActor -> com.mazalearn.scienceengine.e.a.c.m:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Magnet magnet -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion ferrite -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion smco -> d
    com.badlogic.gdx.graphics.g2d.TextureRegion neodymium -> e
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$Magnet$MagnetType -> f
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$electromagnetism$model$Magnet$MagnetType() -> v
com.mazalearn.scienceengine.domains.electromagnetism.view.MonopoleActor -> com.mazalearn.scienceengine.e.a.c.n:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Monopole monopole -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion textureSouthPole -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion textureNorthPole -> d
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.domains.electromagnetism.view.PickupCoilActor -> com.mazalearn.scienceengine.e.a.c.o:
    com.badlogic.gdx.graphics.g2d.TextureRegion coil -> a
    int COIL_OFFSET -> c
    com.mazalearn.scienceengine.domains.electromagnetism.model.PickupCoil pickupCoil -> d
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void showHelp(com.badlogic.gdx.scenes.scene2d.Stage,boolean) -> a
com.mazalearn.scienceengine.domains.electromagnetism.view.WireActor -> com.mazalearn.scienceengine.e.a.c.p:
    com.mazalearn.scienceengine.domains.electromagnetism.model.Wire currentWire -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion currentWireDown -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion currentWireUp -> d
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.domains.statesofmatter.StatesOfMatterController -> com.mazalearn.scienceengine.e.b.a:
    com.mazalearn.scienceengine.core.model.IScience2DModel statesOfMatterModel -> f
    com.mazalearn.scienceengine.domains.statesofmatter.StatesOfMatterView statesOfMatterView -> g
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$statesofmatter$model$ComponentType -> h
    com.badlogic.gdx.scenes.scene2d.Actor createActor(java.lang.String,java.lang.String,com.mazalearn.scienceengine.core.model.Science2DBody) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$statesofmatter$model$ComponentType() -> j
com.mazalearn.scienceengine.domains.statesofmatter.StatesOfMatterModel -> com.mazalearn.scienceengine.e.b.b:
    int N -> h
    com.mazalearn.scienceengine.domains.statesofmatter.model.AbstractMoleculeBox moleculeBox -> i
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$statesofmatter$model$ComponentType -> j
    void simulateSteps(float) -> a
    void singleStep() -> a
    com.mazalearn.scienceengine.core.model.Science2DBody createScience2DBody(java.lang.String,float,float,float) -> b
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$statesofmatter$model$ComponentType() -> l
com.mazalearn.scienceengine.domains.statesofmatter.StatesOfMatterView -> com.mazalearn.scienceengine.e.b.c:
com.mazalearn.scienceengine.domains.statesofmatter.model.AbstractMoleculeBox -> com.mazalearn.scienceengine.e.b.a.a:
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$State state -> r
    double[] DAMPING -> s
    double dt -> a
    double dtOver2 -> f
    double dtSquaredOver2 -> g
    com.mazalearn.scienceengine.domains.statesofmatter.model.Molecule[] molecules -> h
    int boxWidth -> i
    int boxHeight -> j
    double temperature -> k
    int N -> l
    double ke -> m
    double pe -> n
    double energy -> o
    double simulatedTime -> p
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$HeatingLevel heatingLevel -> q
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$statesofmatter$model$IMoleculeBox$State -> t
    void reset() -> l_
    void reScaleDt() -> d
    void normalizeVelocities() -> A
    com.mazalearn.scienceengine.domains.statesofmatter.model.Molecule getMolecule(int) -> b
    double getSimulatedTime() -> u
    double getTemperature() -> v
    void setTemperature(double) -> a
    void singleStep() -> w
    double computeAccelerations() -> x
    java.lang.String getState() -> y
    void setState(java.lang.String) -> a
    void setState(com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$State) -> a
    java.lang.String getHeatingLevel() -> z
    void setHeatingLevel(java.lang.String) -> c
    void initializeConfigs() -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$statesofmatter$model$IMoleculeBox$State() -> B
com.mazalearn.scienceengine.domains.statesofmatter.model.AbstractMoleculeBox$1 -> com.mazalearn.scienceengine.e.b.a.b:
    com.mazalearn.scienceengine.domains.statesofmatter.model.AbstractMoleculeBox this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.statesofmatter.model.AbstractMoleculeBox$2 -> com.mazalearn.scienceengine.e.b.a.c:
    com.mazalearn.scienceengine.domains.statesofmatter.model.AbstractMoleculeBox this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.statesofmatter.model.ComponentType -> com.mazalearn.scienceengine.e.b.a.d:
    com.mazalearn.scienceengine.domains.statesofmatter.model.ComponentType MoleculeBox -> a
    com.mazalearn.scienceengine.domains.statesofmatter.model.ComponentType ColorPanel -> b
    com.mazalearn.scienceengine.domains.statesofmatter.model.ComponentType[] ENUM$VALUES -> c
    com.mazalearn.scienceengine.domains.statesofmatter.model.ComponentType[] values() -> values
    com.mazalearn.scienceengine.domains.statesofmatter.model.ComponentType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox -> com.mazalearn.scienceengine.e.b.a.e:
    double getSimulatedTime() -> u
    com.mazalearn.scienceengine.domains.statesofmatter.model.Molecule getMolecule(int) -> b
    double getTemperature() -> v
com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$HeatingLevel -> com.mazalearn.scienceengine.e.b.a.f:
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$HeatingLevel Neutral -> a
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$HeatingLevel Cold -> b
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$HeatingLevel Hot -> c
    int level -> d
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$HeatingLevel[] ENUM$VALUES -> e
    int level() -> a
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$HeatingLevel[] values() -> values
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$HeatingLevel valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$State -> com.mazalearn.scienceengine.e.b.a.g:
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$State Solid -> a
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$State Liquid -> b
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$State Gas -> c
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$State[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$State[] values() -> values
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox$State valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.statesofmatter.model.LJMoleculeBox -> com.mazalearn.scienceengine.e.b.a.h:
    double MIN_LJ_FORCE_OVER_R -> r
    double[] DAMPING_FORCE_OVER_R -> t
    double MIN_LJ_POTENTIAL_ENERGY -> s
    double computeAccelerations() -> x
com.mazalearn.scienceengine.domains.statesofmatter.model.Molecule -> com.mazalearn.scienceengine.e.b.a.i:
    double x -> a
    double y -> b
    double vx -> c
    double vy -> d
    double ax -> e
    double ay -> f
com.mazalearn.scienceengine.domains.statesofmatter.model.Parameter -> com.mazalearn.scienceengine.e.b.a.j:
    com.mazalearn.scienceengine.domains.statesofmatter.model.Parameter StateOfMatter -> a
    com.mazalearn.scienceengine.domains.statesofmatter.model.Parameter HeatingLevel -> b
    com.mazalearn.scienceengine.domains.statesofmatter.model.Parameter[] ENUM$VALUES -> c
    java.lang.String toString() -> toString
    com.mazalearn.scienceengine.domains.statesofmatter.model.Parameter[] values() -> values
    com.mazalearn.scienceengine.domains.statesofmatter.model.Parameter valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.statesofmatter.view.MoleculeBoxActor -> com.mazalearn.scienceengine.e.b.b.a:
    com.mazalearn.scienceengine.domains.statesofmatter.model.IMoleculeBox moleculeBox -> a
    com.badlogic.gdx.graphics.Texture moleculeTextureWhite -> c
    com.badlogic.gdx.graphics.Texture moleculeTextureRed -> d
    long timeStart -> e
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> f
    com.badlogic.gdx.graphics.Texture backgroundTexture -> g
    int boxHeight -> h
    int boxWidth -> i
    int N -> j
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
com.mazalearn.scienceengine.domains.waves.WaveController -> com.mazalearn.scienceengine.e.c.a:
    com.mazalearn.scienceengine.domains.waves.WaveModel waveModel -> f
    com.badlogic.gdx.graphics.g2d.TextureRegion ballTextureRed -> g
    com.badlogic.gdx.graphics.g2d.TextureRegion ballTextureBlue -> h
    com.mazalearn.scienceengine.domains.waves.WaveView waveView -> i
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$waves$model$ComponentType -> j
    com.badlogic.gdx.graphics.g2d.TextureRegion createBallTexture(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.scenes.scene2d.Actor createActor(java.lang.String,java.lang.String,com.mazalearn.scienceengine.core.model.Science2DBody) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$waves$model$ComponentType() -> j
com.mazalearn.scienceengine.domains.waves.WaveModel -> com.mazalearn.scienceengine.e.c.b:
    com.mazalearn.scienceengine.domains.waves.model.Boundary boundary -> i
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker waveMaker -> j
    com.mazalearn.scienceengine.domains.waves.model.WaveBox waveBox -> k
    int numBalls -> l
    com.mazalearn.scienceengine.domains.waves.model.WaveBox$Ball[] balls -> h
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$waves$model$ComponentType -> m
    void singleStep() -> a
    void reset() -> i
    com.mazalearn.scienceengine.core.model.Science2DBody createScience2DBody(java.lang.String,float,float,float) -> b
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$waves$model$ComponentType() -> l
com.mazalearn.scienceengine.domains.waves.WaveView -> com.mazalearn.scienceengine.e.c.c:
    com.mazalearn.scienceengine.domains.waves.view.WaveMakerActor waveMakerActor -> d
    com.mazalearn.scienceengine.domains.waves.view.BoundaryActor boundaryActor -> e
    com.mazalearn.scienceengine.domains.waves.view.WaveBoxActor waveBoxActor -> f
    com.mazalearn.scienceengine.domains.waves.WaveModel waveModel -> g
    void setBallDiameter(int) -> c
    void prepareView() -> p
com.mazalearn.scienceengine.domains.waves.model.Boundary -> com.mazalearn.scienceengine.e.c.a.a:
    com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType boundaryType -> a
    java.lang.String getBoundaryType() -> d
    void setBoundaryType(java.lang.String) -> a
    void initializeConfigs() -> a
    com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType boundaryType() -> u
com.mazalearn.scienceengine.domains.waves.model.Boundary$1 -> com.mazalearn.scienceengine.e.c.a.b:
    com.mazalearn.scienceengine.domains.waves.model.Boundary this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType -> com.mazalearn.scienceengine.e.c.a.c:
    com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType FixedEnd -> a
    com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType LooseEnd -> b
    com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType NoEnd -> c
    com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType[] values() -> values
    com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.waves.model.ComponentType -> com.mazalearn.scienceengine.e.c.a.d:
    com.mazalearn.scienceengine.domains.waves.model.ComponentType WaveBox -> a
    com.mazalearn.scienceengine.domains.waves.model.ComponentType Boundary -> b
    com.mazalearn.scienceengine.domains.waves.model.ComponentType WaveMaker -> c
    com.mazalearn.scienceengine.domains.waves.model.ComponentType[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.domains.waves.model.ComponentType[] values() -> values
    com.mazalearn.scienceengine.domains.waves.model.ComponentType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.waves.model.Parameter -> com.mazalearn.scienceengine.e.c.a.e:
    com.mazalearn.scienceengine.domains.waves.model.Parameter Amplitude -> a
    com.mazalearn.scienceengine.domains.waves.model.Parameter Frequency -> b
    com.mazalearn.scienceengine.domains.waves.model.Parameter Damping -> c
    com.mazalearn.scienceengine.domains.waves.model.Parameter GenMode -> d
    com.mazalearn.scienceengine.domains.waves.model.Parameter PulseWidth -> e
    com.mazalearn.scienceengine.domains.waves.model.Parameter Tension -> f
    com.mazalearn.scienceengine.domains.waves.model.Parameter BoundaryType -> g
    com.mazalearn.scienceengine.domains.waves.model.Parameter[] ENUM$VALUES -> h
    java.lang.String toString() -> toString
    com.mazalearn.scienceengine.domains.waves.model.Parameter[] values() -> values
    com.mazalearn.scienceengine.domains.waves.model.Parameter valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.waves.model.WaveBox -> com.mazalearn.scienceengine.e.c.a.f:
    float WAVE_SPEED -> f
    int numBalls -> g
    com.mazalearn.scienceengine.domains.waves.model.WaveBox$Ball[] balls -> a
    float tension -> h
    float beta -> i
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$waves$model$Boundary$BoundaryType -> j
    void singleStep(com.mazalearn.scienceengine.domains.waves.model.Boundary$BoundaryType) -> a
    void reset() -> l_
    float getTension() -> d
    void setTension(float) -> a
    float getDamping() -> u
    void setDamping(float) -> e
    void initializeConfigs() -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$waves$model$Boundary$BoundaryType() -> v
com.mazalearn.scienceengine.domains.waves.model.WaveBox$1 -> com.mazalearn.scienceengine.e.c.a.g:
    com.mazalearn.scienceengine.domains.waves.model.WaveBox this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.waves.model.WaveBox$2 -> com.mazalearn.scienceengine.e.c.a.h:
    com.mazalearn.scienceengine.domains.waves.model.WaveBox this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.waves.model.WaveBox$Ball -> com.mazalearn.scienceengine.e.c.a.i:
    com.badlogic.gdx.math.Vector2 pos -> a
    float nextY -> b
    float previousY -> c
com.mazalearn.scienceengine.domains.waves.model.WaveMaker -> com.mazalearn.scienceengine.e.c.a.j:
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker$GenMode genMode -> a
    float amplitude -> f
    float frequency -> g
    float pulseWidth -> h
    long pulseStartTime -> i
    float phi -> j
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$waves$model$WaveMaker$GenMode -> k
    java.lang.String getGenMode() -> d
    void setGenMode(java.lang.String) -> a
    void reset() -> l_
    void initializeConfigs() -> a
    float getPulseWidth() -> u
    void setPulseWidth(float) -> a
    float getAmplitude() -> v
    void setAmplitude(float) -> e
    float getFrequency() -> w
    void setFrequency(float) -> f
    float getPos(long,float) -> a
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker$GenMode access$0(com.mazalearn.scienceengine.domains.waves.model.WaveMaker) -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$domains$waves$model$WaveMaker$GenMode() -> x
com.mazalearn.scienceengine.domains.waves.model.WaveMaker$1 -> com.mazalearn.scienceengine.e.c.a.k:
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.waves.model.WaveMaker$2 -> com.mazalearn.scienceengine.e.c.a.l:
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.waves.model.WaveMaker$3 -> com.mazalearn.scienceengine.e.c.a.m:
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.waves.model.WaveMaker$4 -> com.mazalearn.scienceengine.e.c.a.n:
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker this$0 -> b
    boolean isPossible() -> h
    java.lang.Object getValue() -> g
    void setValue(java.lang.Object) -> a
com.mazalearn.scienceengine.domains.waves.model.WaveMaker$GenMode -> com.mazalearn.scienceengine.e.c.a.o:
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker$GenMode Oscillate -> a
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker$GenMode Pulse -> b
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker$GenMode Manual -> c
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker$GenMode[] ENUM$VALUES -> d
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker$GenMode[] values() -> values
    com.mazalearn.scienceengine.domains.waves.model.WaveMaker$GenMode valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.domains.waves.view.BoundaryActor -> com.mazalearn.scienceengine.e.c.b.a:
    com.mazalearn.scienceengine.domains.waves.model.WaveBox$Ball ball -> a
    float originY -> c
    int ballDiameter -> d
    com.mazalearn.scienceengine.domains.waves.view.WaveBoxActor waveBoxActor -> e
    void act(float) -> a
    void setBallDiameter(int) -> a
    void setWaveBox(com.mazalearn.scienceengine.domains.waves.view.WaveBoxActor) -> a
com.mazalearn.scienceengine.domains.waves.view.WaveBoxActor -> com.mazalearn.scienceengine.e.c.b.b:
    com.badlogic.gdx.graphics.g2d.TextureRegion ballTextureRed -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion ballTextureBlue -> c
    float originX -> d
    float originY -> e
    int ballDiameter -> f
    com.mazalearn.scienceengine.domains.waves.WaveView waveView -> g
    com.mazalearn.scienceengine.domains.waves.model.WaveBox waveBox -> h
    void setWidth(float) -> d
    int getBallDiameter() -> v
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.domains.waves.view.WaveMakerActor -> com.mazalearn.scienceengine.e.c.b.c:
    com.mazalearn.scienceengine.domains.waves.model.WaveBox$Ball ball -> e
    float lastTouchedY -> a
    float originX -> c
    float originY -> d
    int ballDiameter -> f
    void act(float) -> a
    void setBallDiameter(int) -> a
    int access$0(com.mazalearn.scienceengine.domains.waves.view.WaveMakerActor) -> a
com.mazalearn.scienceengine.domains.waves.view.WaveMakerActor$1 -> com.mazalearn.scienceengine.e.c.b.d:
    com.mazalearn.scienceengine.domains.waves.view.WaveMakerActor this$0 -> a
    com.mazalearn.scienceengine.domains.waves.model.WaveBox$Ball val$ball -> b
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
com.mazalearn.scienceengine.tutor.AbstractScience2DProber -> com.mazalearn.scienceengine.f.a:
    com.badlogic.gdx.math.Vector2 localPoint -> a
    void generateProbePoints(com.badlogic.gdx.math.Vector2[]) -> a
    boolean approxEquals(float,float) -> f
com.mazalearn.scienceengine.tutor.AbstractTutor -> com.mazalearn.scienceengine.f.b:
    com.badlogic.gdx.utils.Array components -> c
    com.badlogic.gdx.utils.Array configs -> d
    java.lang.String[] hints -> a
    java.lang.String goal -> b
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> e
    com.mazalearn.scienceengine.tutor.ITutor parent -> f
    com.mazalearn.scienceengine.tutor.TutorHelper tutorHelper -> g
    com.mazalearn.scienceengine.tutor.ITutor$ITutorType tutorType -> k
    java.lang.String id -> l
    boolean success -> h
    float[] stats -> i
    com.mazalearn.scienceengine.tutor.ITutor$State state -> j
    int successPoints -> m
    int failurePoints -> n
    java.lang.String[] explanation -> o
    java.lang.String[] refs -> p
    int hintCounter -> q
    java.lang.String makeGlobalId(com.mazalearn.scienceengine.Topic,java.lang.String) -> a
    void systemReadyToFinish(boolean) -> c
    java.lang.String[] getExplanation() -> B
    boolean isSuccess() -> C
    java.lang.String getGoal() -> D
    java.lang.String getId() -> E
    void userReadyToFinish() -> F
    void finish() -> G
    void abort() -> H
    void recordStats() -> I
    float[] getStats() -> J
    void setSuccessPoints(int) -> a
    void teach() -> A
    com.mazalearn.scienceengine.tutor.ITutor getParentTutor() -> K
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void prepareStage() -> L
    java.lang.String getHint() -> M
    int getSuccessPoints() -> N
    int getFailurePoints() -> O
    void checkProgress() -> P
    com.mazalearn.scienceengine.tutor.ITutor$ITutorType getType() -> Q
    java.util.List getChildTutors() -> R
    void addTimeSpent(float) -> j
    com.mazalearn.scienceengine.tutor.ITutor$State getState() -> S
    void setParentTutor(com.mazalearn.scienceengine.tutor.ITutor) -> b
    java.lang.String[] getRefs() -> T
    java.lang.String getProgressText() -> U
com.mazalearn.scienceengine.tutor.Abstractor -> com.mazalearn.scienceengine.f.c:
    com.badlogic.gdx.math.Vector2[] points -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table configTable -> b
    com.mazalearn.scienceengine.core.view.ModelControls modelControls -> k
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> l
    java.util.Map correctParameters -> m
    com.badlogic.gdx.scenes.scene2d.ui.Image[] life -> n
    int numLivesLeft -> o
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable increase -> p
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable decrease -> q
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable noeffect -> r
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable question -> s
    java.util.List configList -> t
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void systemReadyToFinish(boolean) -> c
    void teach() -> A
    void initialize(java.util.Map) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table access$0(com.mazalearn.scienceengine.tutor.Abstractor) -> a
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable access$1(com.mazalearn.scienceengine.tutor.Abstractor) -> b
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable access$2(com.mazalearn.scienceengine.tutor.Abstractor) -> c
    java.util.Map access$3(com.mazalearn.scienceengine.tutor.Abstractor) -> d
com.mazalearn.scienceengine.tutor.Abstractor$1 -> com.mazalearn.scienceengine.f.d:
    com.mazalearn.scienceengine.tutor.Abstractor this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image val$image -> b
    com.mazalearn.scienceengine.tutor.Abstractor$ChangeOptions val$changeOptions -> c
    com.badlogic.gdx.scenes.scene2d.ui.Label val$label -> d
    void clicked$43069389(com.badlogic.gdx.scenes.scene2d.InputEvent) -> a
com.mazalearn.scienceengine.tutor.Abstractor$2 -> com.mazalearn.scienceengine.f.e:
    com.mazalearn.scienceengine.tutor.Abstractor this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$submitButton -> b
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.Abstractor$ChangeOptions -> com.mazalearn.scienceengine.f.f:
    com.badlogic.gdx.scenes.scene2d.ui.Image img -> a
    com.badlogic.gdx.scenes.scene2d.ui.Label label -> b
    void setImageAndLabel(com.badlogic.gdx.scenes.scene2d.ui.Image,com.badlogic.gdx.scenes.scene2d.ui.Label) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Label access$0(com.mazalearn.scienceengine.tutor.Abstractor$ChangeOptions) -> a
com.mazalearn.scienceengine.tutor.Abstractor$ChangeOptions$1 -> com.mazalearn.scienceengine.f.g:
    com.mazalearn.scienceengine.tutor.Abstractor$ChangeOptions this$1 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image val$opt -> b
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable[] val$options -> c
    com.badlogic.gdx.utils.Array val$choices -> d
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable val$question -> e
    com.badlogic.gdx.scenes.scene2d.ui.Button val$submitButton -> f
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.ClickResult -> com.mazalearn.scienceengine.f.h:
    com.mazalearn.scienceengine.tutor.IDoneCallback doneCallback -> a
    int resultImage -> b
    com.badlogic.gdx.scenes.scene2d.ui.Image[] stateImages -> c
    com.mazalearn.scienceengine.tutor.ClickResult$StateMapper stateMapper -> d
    void setResult(int) -> d
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
com.mazalearn.scienceengine.tutor.ClickResult$StateMapper -> com.mazalearn.scienceengine.f.i:
    int map$2548a28(float) -> a
com.mazalearn.scienceengine.tutor.ConfigGenerator -> com.mazalearn.scienceengine.f.j:
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$controller$IModelConfig$ConfigType -> a
    int[] $SWITCH_TABLE$com$mazalearn$scienceengine$core$controller$IModelConfig$ConfigType() -> a
com.mazalearn.scienceengine.tutor.ExplanationBox -> com.mazalearn.scienceengine.f.k:
    int current -> d
    java.lang.String[] explanation -> e
    com.badlogic.gdx.scenes.scene2d.ui.TextButton reviseButton -> f
    boolean hasRevisionRefs -> g
    void showExplanation() -> Z
    void setExplanation(java.lang.String[],boolean) -> a
    void access$0(com.mazalearn.scienceengine.tutor.ExplanationBox) -> a
com.mazalearn.scienceengine.tutor.ExplanationBox$1 -> com.mazalearn.scienceengine.f.l:
    com.mazalearn.scienceengine.tutor.ExplanationBox this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.ExplanationBox$2 -> com.mazalearn.scienceengine.f.m:
    com.mazalearn.scienceengine.tutor.ExplanationBox this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.ExplanationBox$3 -> com.mazalearn.scienceengine.f.n:
    com.mazalearn.scienceengine.tutor.ExplanationBox this$0 -> a
    com.mazalearn.scienceengine.tutor.TutorHelper val$tutorHelper -> b
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.Guru -> com.mazalearn.scienceengine.f.o:
    com.mazalearn.scienceengine.core.view.ModelControls modelControls -> a
    com.mazalearn.scienceengine.tutor.ConfigGenerator configGenerator -> b
    com.mazalearn.scienceengine.core.controller.IScience2DController science2DController -> c
    com.mazalearn.scienceengine.core.view.ViewControls viewControls -> d
    java.lang.String goal -> e
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> f
    com.mazalearn.scienceengine.tutor.TutorGroup rootTutor -> g
    com.mazalearn.scienceengine.tutor.ITutor activeTutor -> h
    com.mazalearn.scienceengine.tutor.TutorHelper tutorHelper -> i
    com.mazalearn.scienceengine.tutor.ITutor gotoTutor -> j
    com.mazalearn.scienceengine.tutor.ITutor getRootTutor() -> C
    void initialize(java.util.List) -> a
    void beginTutoring() -> N
    void endTutoring() -> O
    void setActiveTutor(com.mazalearn.scienceengine.tutor.ITutor) -> c
    void setupProbeConfigs(java.util.Collection,boolean) -> a
    void checkProgress() -> P
    void goTo(com.mazalearn.scienceengine.tutor.ITutor) -> d
    void prepareTutors(com.mazalearn.scienceengine.tutor.ITutor) -> e
    com.mazalearn.scienceengine.tutor.TutorHelper getTutorHelper() -> V
    java.lang.String getLevelEndMessage(boolean) -> d
    java.lang.String getGoal() -> D
    void finish() -> G
    void recordStats() -> I
    float[] getStats() -> J
    void teach() -> A
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void prepareStage() -> L
    java.lang.String getHint() -> M
    java.lang.String getId() -> E
    java.util.List getChildTutors() -> R
    com.mazalearn.scienceengine.tutor.ITutor getParentTutor() -> K
    void abort() -> H
    void addTimeSpent(float) -> j
    void systemReadyToFinish(boolean) -> c
    void userReadyToFinish() -> F
    com.mazalearn.scienceengine.tutor.ITutor$State getState() -> S
    java.lang.String[] getExplanation() -> B
    void setParentTutor(com.mazalearn.scienceengine.tutor.ITutor) -> b
    java.lang.String[] getRefs() -> T
    java.lang.String getProgressText() -> U
    com.mazalearn.scienceengine.tutor.ITutor$ITutorType getType() -> Q
com.mazalearn.scienceengine.tutor.Hinter -> com.mazalearn.scienceengine.f.p:
    java.lang.String hint -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton hintBox -> b
    com.mazalearn.scienceengine.tutor.ITutor activeTutor -> c
    float lastTimeHintShown -> d
    void act(float) -> a
    void setActiveTutor(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void clearHint() -> A
    com.badlogic.gdx.scenes.scene2d.ui.TextButton access$0(com.mazalearn.scienceengine.tutor.Hinter) -> a
com.mazalearn.scienceengine.tutor.Hinter$1 -> com.mazalearn.scienceengine.f.q:
    com.mazalearn.scienceengine.tutor.Hinter this$0 -> b
    java.lang.String val$hint -> c
    boolean act(float) -> a
com.mazalearn.scienceengine.tutor.IDoneCallback -> com.mazalearn.scienceengine.f.r:
    void done(boolean) -> b
com.mazalearn.scienceengine.tutor.ITutor -> com.mazalearn.scienceengine.f.s:
    java.lang.String getGoal() -> D
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void teach() -> A
    java.lang.String getHint() -> M
    void checkProgress() -> P
    void finish() -> G
    java.util.List getChildTutors() -> R
    com.mazalearn.scienceengine.tutor.ITutor$ITutorType getType() -> Q
    java.lang.String getId() -> E
    com.mazalearn.scienceengine.tutor.ITutor getParentTutor() -> K
    com.mazalearn.scienceengine.tutor.ITutor$State getState() -> S
    void systemReadyToFinish(boolean) -> c
    void userReadyToFinish() -> F
    void addTimeSpent(float) -> j
    void recordStats() -> I
    float[] getStats() -> J
    void abort() -> H
    java.lang.String[] getExplanation() -> B
    java.lang.String[] getRefs() -> T
    void setParentTutor(com.mazalearn.scienceengine.tutor.ITutor) -> b
    java.lang.String getProgressText() -> U
    void prepareStage() -> L
com.mazalearn.scienceengine.tutor.ITutor$ITutorType -> com.mazalearn.scienceengine.f.t:
    com.badlogic.gdx.graphics.Color getColor() -> a
    int getSuccessPoints() -> b
    int getFailurePoints() -> c
com.mazalearn.scienceengine.tutor.ITutor$State -> com.mazalearn.scienceengine.f.u:
    com.mazalearn.scienceengine.tutor.ITutor$State Constructed -> a
    com.mazalearn.scienceengine.tutor.ITutor$State Initialized -> b
    com.mazalearn.scienceengine.tutor.ITutor$State PreparedToTeach -> c
    com.mazalearn.scienceengine.tutor.ITutor$State Teaching -> d
    com.mazalearn.scienceengine.tutor.ITutor$State SystemFinished -> e
    com.mazalearn.scienceengine.tutor.ITutor$State UserFinished -> f
    com.mazalearn.scienceengine.tutor.ITutor$State Finished -> g
    com.mazalearn.scienceengine.tutor.ITutor$State Aborted -> h
    com.mazalearn.scienceengine.tutor.ITutor$State[] ENUM$VALUES -> i
    com.mazalearn.scienceengine.tutor.ITutor$State[] values() -> values
    com.mazalearn.scienceengine.tutor.ITutor$State valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.tutor.ImageMessageBox -> com.mazalearn.scienceengine.f.v:
    com.badlogic.gdx.scenes.scene2d.ui.TextButton nextButton -> d
    com.badlogic.gdx.scenes.scene2d.ui.TextButton prevButton -> e
    int scale -> f
    com.badlogic.gdx.scenes.scene2d.ui.Button closeButton -> g
    com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle textButtonStyle -> h
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable backgroundImg -> i
    float[] padding -> j
    void setFontColor(com.badlogic.gdx.graphics.Color) -> b
    void setPaddingAndScale$2d91bd6b() -> V
    void drawBackground(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> c
    com.badlogic.gdx.scenes.scene2d.ui.Button getNextButton() -> W
    com.badlogic.gdx.scenes.scene2d.ui.Button getPrevButton() -> X
    void setTextAndResize(java.lang.String,boolean) -> a
    void positionButtons() -> Z
    void setImageAndResize(com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable) -> a
    com.badlogic.gdx.scenes.scene2d.Actor getCloseButton() -> Y
com.mazalearn.scienceengine.tutor.ImageMessageBox$1 -> com.mazalearn.scienceengine.f.w:
    com.mazalearn.scienceengine.tutor.ImageMessageBox this$0 -> a
    com.badlogic.gdx.scenes.scene2d.Actor val$parentActor -> b
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.ImageMessageBox$2 -> com.mazalearn.scienceengine.f.x:
    boolean ignore -> a
    com.mazalearn.scienceengine.tutor.ImageMessageBox this$0 -> b
    void drag$1dcb6a94(com.badlogic.gdx.scenes.scene2d.InputEvent) -> a
com.mazalearn.scienceengine.tutor.KnowledgeUnit -> com.mazalearn.scienceengine.f.y:
    com.mazalearn.scienceengine.core.lang.Expr postCondition -> a
    java.util.Collection variables -> b
    java.lang.String when -> k
    void initialize(java.lang.String,java.lang.String) -> a
    void checkProgress() -> P
com.mazalearn.scienceengine.tutor.McqActor -> com.mazalearn.scienceengine.f.z:
    com.mazalearn.scienceengine.tutor.McqActor$OptionListener optionListener -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton submitButton -> b
    com.mazalearn.scienceengine.tutor.ITutor tutor -> c
    com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup optionButtons -> d
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle radioButtonStyle -> e
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle checkBoxStyle -> f
    com.badlogic.gdx.scenes.scene2d.ui.Image questionImage -> g
    com.badlogic.gdx.scenes.scene2d.ui.TextButton progressInfo -> h
    com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup setUp(com.mazalearn.scienceengine.tutor.ITutor,java.lang.String,java.lang.String,java.util.List,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton access$0(com.mazalearn.scienceengine.tutor.McqActor) -> a
    com.mazalearn.scienceengine.tutor.ITutor access$1(com.mazalearn.scienceengine.tutor.McqActor) -> b
com.mazalearn.scienceengine.tutor.McqActor$1 -> com.mazalearn.scienceengine.f.aa:
    com.mazalearn.scienceengine.tutor.McqActor this$0 -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion val$blackTexture -> b
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.tutor.McqActor$2 -> com.mazalearn.scienceengine.f.ab:
    com.mazalearn.scienceengine.tutor.McqActor this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.McqActor$OptionListener -> com.mazalearn.scienceengine.f.ac:
    com.mazalearn.scienceengine.tutor.ITutor tutor -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton submitButton -> b
    void setTutor(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.McqTutor -> com.mazalearn.scienceengine.f.ad:
    com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup optionsGroup -> a
    java.lang.String answerMask -> b
    boolean singleAnswer -> k
    int[] permutation -> l
    java.util.List optionList -> m
    java.lang.String questionImageTexture -> n
    void systemReadyToFinish(boolean) -> c
    void initialize(java.lang.String,java.lang.String[],java.lang.String) -> a
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
com.mazalearn.scienceengine.tutor.ParameterProber -> com.mazalearn.scienceengine.f.ae:
    int netSuccesses -> a
    com.mazalearn.scienceengine.tutor.ParameterProber$ResultType resultType -> k
    com.badlogic.gdx.scenes.scene2d.ui.Image image -> l
    com.mazalearn.scienceengine.tutor.ClickResult imageListener -> m
    com.mazalearn.scienceengine.core.lang.Expr resultExpr -> n
    java.util.Set resultExprVariables -> o
    com.mazalearn.scienceengine.core.controller.IModelConfig probeConfig -> b
    com.badlogic.gdx.math.Vector2 coords -> p
    com.badlogic.gdx.scenes.scene2d.ui.Table changeOptions -> q
    com.badlogic.gdx.scenes.scene2d.ui.Image delta -> r
    com.badlogic.gdx.scenes.scene2d.ui.Image createResultImage(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> a
    void finish() -> G
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void teach() -> A
    void checkProgress() -> P
    void systemReadyToFinish(boolean) -> c
    void initialize(com.mazalearn.scienceengine.core.controller.IModelConfig,java.lang.String,java.lang.String) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image access$0(com.mazalearn.scienceengine.tutor.ParameterProber) -> a
    com.mazalearn.scienceengine.tutor.ParameterProber$ResultType access$1(com.mazalearn.scienceengine.tutor.ParameterProber) -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table access$2(com.mazalearn.scienceengine.tutor.ParameterProber) -> c
com.mazalearn.scienceengine.tutor.ParameterProber$1 -> com.mazalearn.scienceengine.f.af:
    com.mazalearn.scienceengine.tutor.ParameterProber this$0 -> a
    void done(boolean) -> b
com.mazalearn.scienceengine.tutor.ParameterProber$2 -> com.mazalearn.scienceengine.f.ag:
    com.mazalearn.scienceengine.tutor.ParameterProber this$0 -> a
    int map$2548a28(float) -> a
com.mazalearn.scienceengine.tutor.ParameterProber$3 -> com.mazalearn.scienceengine.f.ah:
    com.mazalearn.scienceengine.tutor.ParameterProber this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image val$increase -> b
    com.badlogic.gdx.scenes.scene2d.ui.Image val$decrease -> c
    com.badlogic.gdx.scenes.scene2d.ui.Image val$dontCare -> d
    void clicked$43069389(com.badlogic.gdx.scenes.scene2d.InputEvent) -> a
com.mazalearn.scienceengine.tutor.ParameterProber$ResultType -> com.mazalearn.scienceengine.f.ai:
    com.mazalearn.scienceengine.tutor.ParameterProber$ResultType Spin -> a
    com.mazalearn.scienceengine.tutor.ParameterProber$ResultType Direct -> b
    com.mazalearn.scienceengine.tutor.ParameterProber$ResultType Inverse -> c
    com.mazalearn.scienceengine.tutor.ParameterProber$ResultType None -> d
    com.mazalearn.scienceengine.tutor.ParameterProber$ResultType[] ENUM$VALUES -> e
    com.mazalearn.scienceengine.tutor.ParameterProber$ResultType[] values() -> values
    com.mazalearn.scienceengine.tutor.ParameterProber$ResultType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.tutor.ProbeImage -> com.mazalearn.scienceengine.f.aj:
com.mazalearn.scienceengine.tutor.ScoreImage -> com.mazalearn.scienceengine.f.ak:
    java.lang.String message -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> b
    void show(java.lang.String) -> b
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.tutor.ScoreImage$1 -> com.mazalearn.scienceengine.f.al:
    com.mazalearn.scienceengine.tutor.ScoreImage this$0 -> b
    boolean act(float) -> a
com.mazalearn.scienceengine.tutor.SuccessFailureImage -> com.mazalearn.scienceengine.f.am:
    java.lang.String message -> a
    boolean success -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> c
    void show(java.lang.String) -> b
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.tutor.TimeTracker -> com.mazalearn.scienceengine.f.an:
    float activeTime -> a
    com.mazalearn.scienceengine.tutor.ITutor activeTutor -> b
    void setActiveTutor(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void act(float) -> a
com.mazalearn.scienceengine.tutor.TutorGroup -> com.mazalearn.scienceengine.f.ao:
    java.util.List childTutors -> a
    com.mazalearn.scienceengine.tutor.ITutor currentTutor -> b
    float[] tutorBeginTime -> k
    int tutorIndex -> l
    com.mazalearn.scienceengine.core.lang.Expr successActions -> m
    java.util.Set variables -> n
    int numChildren -> o
    void systemReadyToFinish(boolean) -> c
    void teach() -> A
    void prepareToTeach(com.mazalearn.scienceengine.tutor.ITutor) -> a
    java.lang.String getProgressText() -> U
    void checkProgress() -> P
    void initialize(java.util.List,java.lang.String) -> a
    java.util.List getChildTutors() -> R
    void recordStats() -> I
com.mazalearn.scienceengine.tutor.TutorHelper -> com.mazalearn.scienceengine.f.ap:
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> c
    com.mazalearn.scienceengine.app.services.SoundManager soundManager -> d
    com.mazalearn.scienceengine.tutor.ScoreImage correctImage -> e
    com.mazalearn.scienceengine.tutor.ScoreImage wrongImage -> f
    com.mazalearn.scienceengine.tutor.SuccessFailureImage successImage -> a
    com.mazalearn.scienceengine.tutor.SuccessFailureImage failureImage -> b
    com.mazalearn.scienceengine.tutor.McqActor mcqActor -> g
    com.mazalearn.scienceengine.tutor.ITutor activeTutor -> h
    com.mazalearn.scienceengine.tutor.Hinter hinter -> i
    com.mazalearn.scienceengine.tutor.ExplanationBox explanation -> j
    com.mazalearn.scienceengine.app.services.Profile profile -> k
    com.mazalearn.scienceengine.core.view.IScience2DView science2DView -> l
    com.mazalearn.scienceengine.tutor.Guru guru -> m
    com.mazalearn.scienceengine.tutor.TimeTracker timeTracker -> n
    java.util.List excludedActors -> o
    com.mazalearn.scienceengine.tutor.TutorNavigator tutorNavigator -> p
    java.util.Stack revisionStack -> q
    java.lang.String[] ENCOURAGEMENTS -> r
    void setActiveTutor(com.mazalearn.scienceengine.tutor.ITutor) -> a
    com.mazalearn.scienceengine.app.services.Profile getProfile() -> A
    java.util.List getExcludedActors() -> B
    com.badlogic.gdx.scenes.scene2d.ui.Skin getSkin() -> C
    com.mazalearn.scienceengine.core.lang.Parser createParser() -> D
    java.lang.String scoreToString(int) -> e
    void showWrong(int) -> a
    void showFailure(int) -> b
    void showCorrect(int) -> c
    void showSuccess(int) -> d
    com.mazalearn.scienceengine.tutor.McqActor getMcqActor() -> E
    void doAnimation(boolean) -> c
    void doChallengeAnimation(com.mazalearn.scienceengine.tutor.ITutor) -> b
    void doRapidFireAnimation(com.mazalearn.scienceengine.tutor.ITutor) -> c
    void showNextAndExplanation(boolean,boolean) -> a
    void clearActiveTutor() -> F
    void populateTutors(com.mazalearn.scienceengine.tutor.TutorGroup) -> a
    void pushRevisionMode() -> G
    com.mazalearn.scienceengine.tutor.ITutor popRevisionMode() -> H
    boolean isRevisionMode() -> I
    void access$0$30a59096(com.mazalearn.scienceengine.tutor.TutorHelper) -> a
com.mazalearn.scienceengine.tutor.TutorHelper$1 -> com.mazalearn.scienceengine.f.aq:
    com.mazalearn.scienceengine.tutor.TutorHelper this$0 -> a
    com.mazalearn.scienceengine.core.controller.IModelConfig val$command -> b
    float eval() -> a
com.mazalearn.scienceengine.tutor.TutorHelper$2 -> com.mazalearn.scienceengine.f.ar:
    com.mazalearn.scienceengine.tutor.TutorHelper this$0 -> b
    com.badlogic.gdx.scenes.scene2d.ui.Image val$challenge -> c
    com.mazalearn.scienceengine.tutor.ITutor val$tutor -> d
    boolean act(float) -> a
com.mazalearn.scienceengine.tutor.TutorHelper$3 -> com.mazalearn.scienceengine.f.as:
    com.mazalearn.scienceengine.tutor.TutorHelper this$0 -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$start -> c
    boolean act(float) -> a
com.mazalearn.scienceengine.tutor.TutorHelper$4 -> com.mazalearn.scienceengine.f.at:
    com.mazalearn.scienceengine.tutor.TutorHelper this$0 -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$start -> c
    boolean act(float) -> a
com.mazalearn.scienceengine.tutor.TutorHelper$5 -> com.mazalearn.scienceengine.f.au:
    com.mazalearn.scienceengine.tutor.TutorHelper this$0 -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextButton val$start -> c
    com.mazalearn.scienceengine.tutor.ITutor val$tutor -> d
    boolean act(float) -> a
com.mazalearn.scienceengine.tutor.TutorHelper$RevisionFrame -> com.mazalearn.scienceengine.f.av:
    com.mazalearn.scienceengine.tutor.ITutor tutorUnderRevision -> a
    java.util.List childTutors -> b
    com.mazalearn.scienceengine.tutor.ITutor access$0(com.mazalearn.scienceengine.tutor.TutorHelper$RevisionFrame) -> a
    java.util.List access$1(com.mazalearn.scienceengine.tutor.TutorHelper$RevisionFrame) -> b
com.mazalearn.scienceengine.tutor.TutorNavigator -> com.mazalearn.scienceengine.f.aw:
    com.badlogic.gdx.graphics.Color c -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion gray -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextButton activeTutorButton -> d
    com.badlogic.gdx.scenes.scene2d.ui.Label[] tutorTimeLabels -> e
    java.util.LinkedHashMap tutors -> f
    com.badlogic.gdx.scenes.scene2d.ui.Image userImage -> g
    com.badlogic.gdx.scenes.scene2d.ui.TextButton goal -> c
    com.mazalearn.scienceengine.tutor.ITutor activeTutor -> h
    com.badlogic.gdx.scenes.scene2d.Group tutorsPanel -> i
    com.badlogic.gdx.scenes.scene2d.ui.Button nextButton -> j
    void collectLeafTutors(com.mazalearn.scienceengine.tutor.ITutor,java.util.Map) -> a
    void show(com.mazalearn.scienceengine.tutor.ITutor) -> a
    void setActiveTutor(com.mazalearn.scienceengine.tutor.ITutor) -> b
    void clearActiveTutor() -> A
    com.badlogic.gdx.scenes.scene2d.Actor createTutorsPane(java.util.Collection,com.mazalearn.scienceengine.tutor.Guru,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> a
    void showNextButton(boolean) -> c
    com.mazalearn.scienceengine.tutor.ITutor id2Tutor(java.lang.String) -> c
    com.badlogic.gdx.scenes.scene2d.Group access$0(com.mazalearn.scienceengine.tutor.TutorNavigator) -> a
    com.mazalearn.scienceengine.tutor.ITutor access$1(com.mazalearn.scienceengine.tutor.TutorNavigator) -> b
    com.badlogic.gdx.scenes.scene2d.ui.Button access$2(com.mazalearn.scienceengine.tutor.TutorNavigator) -> c
    com.badlogic.gdx.scenes.scene2d.ui.TextButton access$3(com.mazalearn.scienceengine.tutor.TutorNavigator) -> d
    com.badlogic.gdx.scenes.scene2d.ui.Image access$4(com.mazalearn.scienceengine.tutor.TutorNavigator) -> e
com.mazalearn.scienceengine.tutor.TutorNavigator$1 -> com.mazalearn.scienceengine.f.ax:
    com.mazalearn.scienceengine.tutor.TutorNavigator this$0 -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.mazalearn.scienceengine.tutor.TutorNavigator$2 -> com.mazalearn.scienceengine.f.ay:
    com.mazalearn.scienceengine.tutor.TutorNavigator this$0 -> a
    com.mazalearn.scienceengine.tutor.TutorHelper val$tutorHelper -> b
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.TutorNavigator$3 -> com.mazalearn.scienceengine.f.az:
    com.mazalearn.scienceengine.tutor.TutorNavigator this$0 -> a
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.TutorNavigator$4 -> com.mazalearn.scienceengine.f.ba:
    com.mazalearn.scienceengine.tutor.TutorNavigator this$0 -> b
    com.mazalearn.scienceengine.tutor.ITutor val$activeTutor -> c
    boolean act(float) -> a
com.mazalearn.scienceengine.tutor.TutorNavigator$5 -> com.mazalearn.scienceengine.f.bb:
    com.mazalearn.scienceengine.tutor.TutorNavigator this$0 -> a
    com.mazalearn.scienceengine.tutor.Guru val$guru -> b
    com.mazalearn.scienceengine.tutor.ITutor val$tutor -> c
    void doCommand() -> f
com.mazalearn.scienceengine.tutor.TutorType -> com.mazalearn.scienceengine.f.bc:
    com.mazalearn.scienceengine.tutor.TutorType Root -> a
    com.mazalearn.scienceengine.tutor.TutorType Guide -> b
    com.mazalearn.scienceengine.tutor.TutorType Challenge -> c
    com.mazalearn.scienceengine.tutor.TutorType RapidFire -> d
    com.mazalearn.scienceengine.tutor.TutorType MCQ1 -> e
    com.mazalearn.scienceengine.tutor.TutorType MCQ -> f
    com.mazalearn.scienceengine.tutor.TutorType KnowledgeUnit -> g
    com.mazalearn.scienceengine.tutor.TutorType ParameterProber -> h
    com.mazalearn.scienceengine.tutor.TutorType Abstractor -> i
    com.mazalearn.scienceengine.tutor.TutorType Reviewer -> j
    com.badlogic.gdx.graphics.Color color -> k
    int successPoints -> l
    int failurePoints -> m
    com.mazalearn.scienceengine.tutor.TutorType[] ENUM$VALUES -> n
    com.badlogic.gdx.graphics.Color getColor() -> a
    int getSuccessPoints() -> b
    int getFailurePoints() -> c
    com.mazalearn.scienceengine.tutor.TutorType[] values() -> values
    com.mazalearn.scienceengine.tutor.TutorType valueOf(java.lang.String) -> valueOf
com.mazalearn.scienceengine.tutor.Utils -> com.mazalearn.scienceengine.f.bd:
    int[] shuffle(java.util.List) -> a
